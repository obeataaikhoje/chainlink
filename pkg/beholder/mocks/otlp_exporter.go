// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	log "go.opentelemetry.io/otel/sdk/log"

	mock "github.com/stretchr/testify/mock"
)

// OTLPExporter is an autogenerated mock type for the OTLPExporter type
type OTLPExporter struct {
	mock.Mock
}

// Export provides a mock function with given fields: ctx, records
func (_m *OTLPExporter) Export(ctx context.Context, records []log.Record) error {
	ret := _m.Called(ctx, records)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []log.Record) error); ok {
		r0 = rf(ctx, records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceFlush provides a mock function with given fields: ctx
func (_m *OTLPExporter) ForceFlush(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ForceFlush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx
func (_m *OTLPExporter) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOTLPExporter creates a new instance of OTLPExporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTLPExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTLPExporter {
	mock := &OTLPExporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
