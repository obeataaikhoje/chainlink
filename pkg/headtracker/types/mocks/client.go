// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-relay/pkg/types"
)

// Client is an autogenerated mock type for the Client type
type Client[H types.Head[BLOCK_HASH], S types.Subscription, ID types.ID, BLOCK_HASH types.Hashable] struct {
	mock.Mock
}

// ConfiguredChainID provides a mock function with given fields:
func (_m *Client[H, S, ID, BLOCK_HASH]) ConfiguredChainID() ID {
	ret := _m.Called()

	var r0 ID
	if rf, ok := ret.Get(0).(func() ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ID)
	}

	return r0
}

// HeadByNumber provides a mock function with given fields: ctx, number
func (_m *Client[H, S, ID, BLOCK_HASH]) HeadByNumber(ctx context.Context, number *big.Int) (H, error) {
	ret := _m.Called(ctx, number)

	var r0 H
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (H, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) H); ok {
		r0 = rf(ctx, number)
	} else {
		r0 = ret.Get(0).(H)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeNewHead provides a mock function with given fields: ctx, ch
func (_m *Client[H, S, ID, BLOCK_HASH]) SubscribeNewHead(ctx context.Context, ch chan<- H) (S, error) {
	ret := _m.Called(ctx, ch)

	var r0 S
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- H) (S, error)); ok {
		return rf(ctx, ch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, chan<- H) S); ok {
		r0 = rf(ctx, ch)
	} else {
		r0 = ret.Get(0).(S)
	}

	if rf, ok := ret.Get(1).(func(context.Context, chan<- H) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient[H types.Head[BLOCK_HASH], S types.Subscription, ID types.ID, BLOCK_HASH types.Hashable](t mockConstructorTestingTNewClient) *Client[H, S, ID, BLOCK_HASH] {
	mock := &Client[H, S, ID, BLOCK_HASH]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
