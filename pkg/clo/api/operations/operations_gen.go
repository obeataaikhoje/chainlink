// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package operations

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/smartcontractkit/feeds-manager/api/models"
)

// AddChainResponse is returned by AddChain on success.
type AddChainResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns AddChainResponse.Ccip, and is useful for accessing the field via an interface.
func (v *AddChainResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// AddFeedAggregatorResponse is returned by AddFeedAggregator on success.
type AddFeedAggregatorResponse struct {
	AddFeedAggregator models.AddFeedAggregatorPayload `json:"addFeedAggregator"`
}

// GetAddFeedAggregator returns AddFeedAggregatorResponse.AddFeedAggregator, and is useful for accessing the field via an interface.
func (v *AddFeedAggregatorResponse) GetAddFeedAggregator() models.AddFeedAggregatorPayload {
	return v.AddFeedAggregator
}

// AddFeedResponse is returned by AddFeed on success.
type AddFeedResponse struct {
	AddFeed models.AddFeedPayload `json:"addFeed"`
}

// GetAddFeed returns AddFeedResponse.AddFeed, and is useful for accessing the field via an interface.
func (v *AddFeedResponse) GetAddFeed() models.AddFeedPayload { return v.AddFeed }

// AddLaneResponse is returned by AddLane on success.
type AddLaneResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns AddLaneResponse.Ccip, and is useful for accessing the field via an interface.
func (v *AddLaneResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// AddTokenPoolResponse is returned by AddTokenPool on success.
type AddTokenPoolResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns AddTokenPoolResponse.Ccip, and is useful for accessing the field via an interface.
func (v *AddTokenPoolResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// AssignNodetoJobResponse is returned by AssignNodetoJob on success.
type AssignNodetoJobResponse struct {
	AssignNodeToJob models.AssignNodeToJobPayload `json:"assignNodeToJob"`
}

// GetAssignNodeToJob returns AssignNodetoJobResponse.AssignNodeToJob, and is useful for accessing the field via an interface.
func (v *AssignNodetoJobResponse) GetAssignNodeToJob() models.AssignNodeToJobPayload {
	return v.AssignNodeToJob
}

// ConfirmLaneUpgradeResponse is returned by ConfirmLaneUpgrade on success.
type ConfirmLaneUpgradeResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns ConfirmLaneUpgradeResponse.Ccip, and is useful for accessing the field via an interface.
func (v *ConfirmLaneUpgradeResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// CreateBootstrapJobResponse is returned by CreateBootstrapJob on success.
type CreateBootstrapJobResponse struct {
	CreateBootstrapJob models.CreateBootstrapJobPayload `json:"createBootstrapJob"`
}

// GetCreateBootstrapJob returns CreateBootstrapJobResponse.CreateBootstrapJob, and is useful for accessing the field via an interface.
func (v *CreateBootstrapJobResponse) GetCreateBootstrapJob() models.CreateBootstrapJobPayload {
	return v.CreateBootstrapJob
}

// CreateNodeOperatorResponse is returned by CreateNodeOperator on success.
type CreateNodeOperatorResponse struct {
	CreateNodeOperator models.CreateNodeOperatorPayload `json:"createNodeOperator"`
}

// GetCreateNodeOperator returns CreateNodeOperatorResponse.CreateNodeOperator, and is useful for accessing the field via an interface.
func (v *CreateNodeOperatorResponse) GetCreateNodeOperator() models.CreateNodeOperatorPayload {
	return v.CreateNodeOperator
}

// CreateNodeResponse is returned by CreateNode on success.
type CreateNodeResponse struct {
	CreateNode models.CreateNodePayload `json:"createNode"`
}

// GetCreateNode returns CreateNodeResponse.CreateNode, and is useful for accessing the field via an interface.
func (v *CreateNodeResponse) GetCreateNode() models.CreateNodePayload { return v.CreateNode }

// CreateUserResponse is returned by CreateUser on success.
type CreateUserResponse struct {
	CreateUser models.CreateUserPayload `json:"createUser"`
}

// GetCreateUser returns CreateUserResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *CreateUserResponse) GetCreateUser() models.CreateUserPayload { return v.CreateUser }

// CreateVaultResponse is returned by CreateVault on success.
type CreateVaultResponse struct {
	CreateVault models.CreateVaultPayload `json:"createVault"`
}

// GetCreateVault returns CreateVaultResponse.CreateVault, and is useful for accessing the field via an interface.
func (v *CreateVaultResponse) GetCreateVault() models.CreateVaultPayload { return v.CreateVault }

// DeployChainResponse is returned by DeployChain on success.
type DeployChainResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns DeployChainResponse.Ccip, and is useful for accessing the field via an interface.
func (v *DeployChainResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// DeployContractResponse is returned by DeployContract on success.
type DeployContractResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns DeployContractResponse.Ccip, and is useful for accessing the field via an interface.
func (v *DeployContractResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// DeregisterTestTokenResponse is returned by DeregisterTestToken on success.
type DeregisterTestTokenResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns DeregisterTestTokenResponse.Ccip, and is useful for accessing the field via an interface.
func (v *DeregisterTestTokenResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// GetAggregatorResponse is returned by GetAggregator on success.
type GetAggregatorResponse struct {
	Aggregator *models.Aggregator `json:"aggregator"`
}

// GetAggregator returns GetAggregatorResponse.Aggregator, and is useful for accessing the field via an interface.
func (v *GetAggregatorResponse) GetAggregator() *models.Aggregator { return v.Aggregator }

// GetAggregatorsResponse is returned by GetAggregators on success.
type GetAggregatorsResponse struct {
	Aggregators []models.Aggregator `json:"aggregators"`
}

// GetAggregators returns GetAggregatorsResponse.Aggregators, and is useful for accessing the field via an interface.
func (v *GetAggregatorsResponse) GetAggregators() []models.Aggregator { return v.Aggregators }

// GetBuildInfoResponse is returned by GetBuildInfo on success.
type GetBuildInfoResponse struct {
	BuildInfo *models.BuildInfo `json:"buildInfo"`
}

// GetBuildInfo returns GetBuildInfoResponse.BuildInfo, and is useful for accessing the field via an interface.
func (v *GetBuildInfoResponse) GetBuildInfo() *models.BuildInfo { return v.BuildInfo }

// GetCategoriesResponse is returned by GetCategories on success.
type GetCategoriesResponse struct {
	Categories []models.Category `json:"categories"`
}

// GetCategories returns GetCategoriesResponse.Categories, and is useful for accessing the field via an interface.
func (v *GetCategoriesResponse) GetCategories() []models.Category { return v.Categories }

// GetChainResponse is returned by GetChain on success.
type GetChainResponse struct {
	Ccip *models.CCIPQueries `json:"ccip"`
}

// GetCcip returns GetChainResponse.Ccip, and is useful for accessing the field via an interface.
func (v *GetChainResponse) GetCcip() *models.CCIPQueries { return v.Ccip }

// GetChainsResponse is returned by GetChains on success.
type GetChainsResponse struct {
	Ccip *models.CCIPQueries `json:"ccip"`
}

// GetCcip returns GetChainsResponse.Ccip, and is useful for accessing the field via an interface.
func (v *GetChainsResponse) GetCcip() *models.CCIPQueries { return v.Ccip }

// GetFeedResponse is returned by GetFeed on success.
type GetFeedResponse struct {
	Feed *models.Feed `json:"feed"`
}

// GetFeed returns GetFeedResponse.Feed, and is useful for accessing the field via an interface.
func (v *GetFeedResponse) GetFeed() *models.Feed { return v.Feed }

// GetFeedsResponse is returned by GetFeeds on success.
type GetFeedsResponse struct {
	Feeds []models.Feed `json:"feeds"`
}

// GetFeeds returns GetFeedsResponse.Feeds, and is useful for accessing the field via an interface.
func (v *GetFeedsResponse) GetFeeds() []models.Feed { return v.Feeds }

// GetLaneResponse is returned by GetLane on success.
type GetLaneResponse struct {
	Ccip *models.CCIPQueries `json:"ccip"`
}

// GetCcip returns GetLaneResponse.Ccip, and is useful for accessing the field via an interface.
func (v *GetLaneResponse) GetCcip() *models.CCIPQueries { return v.Ccip }

// GetMercuryV03FeedResponse is returned by GetMercuryV03Feed on success.
type GetMercuryV03FeedResponse struct {
	Mercuryv03 models.MercuryV03Queries `json:"mercuryv03"`
}

// GetMercuryv03 returns GetMercuryV03FeedResponse.Mercuryv03, and is useful for accessing the field via an interface.
func (v *GetMercuryV03FeedResponse) GetMercuryv03() models.MercuryV03Queries { return v.Mercuryv03 }

// GetMercuryV03FeedsResponse is returned by GetMercuryV03Feeds on success.
type GetMercuryV03FeedsResponse struct {
	Mercuryv03 models.MercuryV03Queries `json:"mercuryv03"`
}

// GetMercuryv03 returns GetMercuryV03FeedsResponse.Mercuryv03, and is useful for accessing the field via an interface.
func (v *GetMercuryV03FeedsResponse) GetMercuryv03() models.MercuryV03Queries { return v.Mercuryv03 }

// GetNetworksResponse is returned by GetNetworks on success.
type GetNetworksResponse struct {
	Networks []models.Network `json:"networks"`
}

// GetNetworks returns GetNetworksResponse.Networks, and is useful for accessing the field via an interface.
func (v *GetNetworksResponse) GetNetworks() []models.Network { return v.Networks }

// GetNodeOperatorResponse is returned by GetNodeOperator on success.
type GetNodeOperatorResponse struct {
	NodeOperator *models.NodeOperator `json:"nodeOperator"`
}

// GetNodeOperator returns GetNodeOperatorResponse.NodeOperator, and is useful for accessing the field via an interface.
func (v *GetNodeOperatorResponse) GetNodeOperator() *models.NodeOperator { return v.NodeOperator }

// GetNodeOperatorsResponse is returned by GetNodeOperators on success.
type GetNodeOperatorsResponse struct {
	NodeOperators []models.NodeOperator `json:"nodeOperators"`
}

// GetNodeOperators returns GetNodeOperatorsResponse.NodeOperators, and is useful for accessing the field via an interface.
func (v *GetNodeOperatorsResponse) GetNodeOperators() []models.NodeOperator { return v.NodeOperators }

// GetNodeResponse is returned by GetNode on success.
type GetNodeResponse struct {
	Node *models.Node `json:"node"`
}

// GetNode returns GetNodeResponse.Node, and is useful for accessing the field via an interface.
func (v *GetNodeResponse) GetNode() *models.Node { return v.Node }

// GetNodesResponse is returned by GetNodes on success.
type GetNodesResponse struct {
	Nodes []models.Node `json:"nodes"`
}

// GetNodes returns GetNodesResponse.Nodes, and is useful for accessing the field via an interface.
func (v *GetNodesResponse) GetNodes() []models.Node { return v.Nodes }

// GetProfileResponse is returned by GetProfile on success.
type GetProfileResponse struct {
	Profile models.Profile `json:"profile"`
}

// GetProfile returns GetProfileResponse.Profile, and is useful for accessing the field via an interface.
func (v *GetProfileResponse) GetProfile() models.Profile { return v.Profile }

// GetUserResponse is returned by GetUser on success.
type GetUserResponse struct {
	User *models.User `json:"user"`
}

// GetUser returns GetUserResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserResponse) GetUser() *models.User { return v.User }

// GetUsersResponse is returned by GetUsers on success.
type GetUsersResponse struct {
	Users []models.User `json:"users"`
}

// GetUsers returns GetUsersResponse.Users, and is useful for accessing the field via an interface.
func (v *GetUsersResponse) GetUsers() []models.User { return v.Users }

// GetVaultResponse is returned by GetVault on success.
type GetVaultResponse struct {
	Vault models.Vault `json:"vault"`
}

// GetVault returns GetVaultResponse.Vault, and is useful for accessing the field via an interface.
func (v *GetVaultResponse) GetVault() models.Vault { return v.Vault }

// GetWorkflowRunResponse is returned by GetWorkflowRun on success.
type GetWorkflowRunResponse struct {
	WorkflowRun *models.WorkflowRun `json:"workflowRun"`
}

// GetWorkflowRun returns GetWorkflowRunResponse.WorkflowRun, and is useful for accessing the field via an interface.
func (v *GetWorkflowRunResponse) GetWorkflowRun() *models.WorkflowRun { return v.WorkflowRun }

// ImportFeedAggregatorResponse is returned by ImportFeedAggregator on success.
type ImportFeedAggregatorResponse struct {
	ImportFeedAggregator models.ImportFeedAggregatorPayload `json:"importFeedAggregator"`
}

// GetImportFeedAggregator returns ImportFeedAggregatorResponse.ImportFeedAggregator, and is useful for accessing the field via an interface.
func (v *ImportFeedAggregatorResponse) GetImportFeedAggregator() models.ImportFeedAggregatorPayload {
	return v.ImportFeedAggregator
}

// ImportFeedResponse is returned by ImportFeed on success.
type ImportFeedResponse struct {
	ImportFeed models.ImportFeedPayload `json:"importFeed"`
}

// GetImportFeed returns ImportFeedResponse.ImportFeed, and is useful for accessing the field via an interface.
func (v *ImportFeedResponse) GetImportFeed() models.ImportFeedPayload { return v.ImportFeed }

// ImportMercuryV03FeedResponse is returned by ImportMercuryV03Feed on success.
type ImportMercuryV03FeedResponse struct {
	Mercuryv03 models.MercuryV03Mutations `json:"mercuryv03"`
}

// GetMercuryv03 returns ImportMercuryV03FeedResponse.Mercuryv03, and is useful for accessing the field via an interface.
func (v *ImportMercuryV03FeedResponse) GetMercuryv03() models.MercuryV03Mutations {
	return v.Mercuryv03
}

// ImportMercuryV03NetworkStackResponse is returned by ImportMercuryV03NetworkStack on success.
type ImportMercuryV03NetworkStackResponse struct {
	Mercuryv03 models.MercuryV03Mutations `json:"mercuryv03"`
}

// GetMercuryv03 returns ImportMercuryV03NetworkStackResponse.Mercuryv03, and is useful for accessing the field via an interface.
func (v *ImportMercuryV03NetworkStackResponse) GetMercuryv03() models.MercuryV03Mutations {
	return v.Mercuryv03
}

// ListLaneLegsResponse is returned by ListLaneLegs on success.
type ListLaneLegsResponse struct {
	Ccip *models.CCIPQueries `json:"ccip"`
}

// GetCcip returns ListLaneLegsResponse.Ccip, and is useful for accessing the field via an interface.
func (v *ListLaneLegsResponse) GetCcip() *models.CCIPQueries { return v.Ccip }

// ListLanesResponse is returned by ListLanes on success.
type ListLanesResponse struct {
	Ccip *models.CCIPQueries `json:"ccip"`
}

// GetCcip returns ListLanesResponse.Ccip, and is useful for accessing the field via an interface.
func (v *ListLanesResponse) GetCcip() *models.CCIPQueries { return v.Ccip }

// LoginResponse is returned by Login on success.
type LoginResponse struct {
	Login models.LoginPayload `json:"login"`
}

// GetLogin returns LoginResponse.Login, and is useful for accessing the field via an interface.
func (v *LoginResponse) GetLogin() models.LoginPayload { return v.Login }

// LogoutResponse is returned by Logout on success.
type LogoutResponse struct {
	Logout models.LogoutPayload `json:"logout"`
}

// GetLogout returns LogoutResponse.Logout, and is useful for accessing the field via an interface.
func (v *LogoutResponse) GetLogout() models.LogoutPayload { return v.Logout }

// ProposeJobResponse is returned by ProposeJob on success.
type ProposeJobResponse struct {
	ProposeJob models.ProposeJobPayload `json:"proposeJob"`
}

// GetProposeJob returns ProposeJobResponse.ProposeJob, and is useful for accessing the field via an interface.
func (v *ProposeJobResponse) GetProposeJob() models.ProposeJobPayload { return v.ProposeJob }

// SetAllowListTokenPoolResponse is returned by SetAllowListTokenPool on success.
type SetAllowListTokenPoolResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns SetAllowListTokenPoolResponse.Ccip, and is useful for accessing the field via an interface.
func (v *SetAllowListTokenPoolResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// SetupAppResponse is returned by SetupApp on success.
type SetupAppResponse struct {
	SetupApp models.SetupAppPayload `json:"setupApp"`
}

// GetSetupApp returns SetupAppResponse.SetupApp, and is useful for accessing the field via an interface.
func (v *SetupAppResponse) GetSetupApp() models.SetupAppPayload { return v.SetupApp }

// TransferAdminRoleResponse is returned by TransferAdminRole on success.
type TransferAdminRoleResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns TransferAdminRoleResponse.Ccip, and is useful for accessing the field via an interface.
func (v *TransferAdminRoleResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// TransferOwnershipResponse is returned by TransferOwnership on success.
type TransferOwnershipResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns TransferOwnershipResponse.Ccip, and is useful for accessing the field via an interface.
func (v *TransferOwnershipResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// UpdateAggregatorResponse is returned by UpdateAggregator on success.
type UpdateAggregatorResponse struct {
	UpdateAggregator models.UpdateAggregatorPayload `json:"updateAggregator"`
}

// GetUpdateAggregator returns UpdateAggregatorResponse.UpdateAggregator, and is useful for accessing the field via an interface.
func (v *UpdateAggregatorResponse) GetUpdateAggregator() models.UpdateAggregatorPayload {
	return v.UpdateAggregator
}

// UpdateChainResponse is returned by UpdateChain on success.
type UpdateChainResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns UpdateChainResponse.Ccip, and is useful for accessing the field via an interface.
func (v *UpdateChainResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// UpdateLaneResponse is returned by UpdateLane on success.
type UpdateLaneResponse struct {
	Ccip models.CCIPMutations `json:"ccip"`
}

// GetCcip returns UpdateLaneResponse.Ccip, and is useful for accessing the field via an interface.
func (v *UpdateLaneResponse) GetCcip() models.CCIPMutations { return v.Ccip }

// UpdateMercuryV03FeedResponse is returned by UpdateMercuryV03Feed on success.
type UpdateMercuryV03FeedResponse struct {
	Mercuryv03 models.MercuryV03Mutations `json:"mercuryv03"`
}

// GetMercuryv03 returns UpdateMercuryV03FeedResponse.Mercuryv03, and is useful for accessing the field via an interface.
func (v *UpdateMercuryV03FeedResponse) GetMercuryv03() models.MercuryV03Mutations {
	return v.Mercuryv03
}

// __AddChainInput is used internally by genqlient
type __AddChainInput struct {
	Input models.AddChainInput `json:"input"`
}

// GetInput returns __AddChainInput.Input, and is useful for accessing the field via an interface.
func (v *__AddChainInput) GetInput() models.AddChainInput { return v.Input }

// __AddFeedAggregatorInput is used internally by genqlient
type __AddFeedAggregatorInput struct {
	Input models.AddFeedAggregatorInput `json:"input"`
}

// GetInput returns __AddFeedAggregatorInput.Input, and is useful for accessing the field via an interface.
func (v *__AddFeedAggregatorInput) GetInput() models.AddFeedAggregatorInput { return v.Input }

// __AddFeedInput is used internally by genqlient
type __AddFeedInput struct {
	Input models.AddFeedInput `json:"input"`
}

// GetInput returns __AddFeedInput.Input, and is useful for accessing the field via an interface.
func (v *__AddFeedInput) GetInput() models.AddFeedInput { return v.Input }

// __AddLaneInput is used internally by genqlient
type __AddLaneInput struct {
	Input models.AddLaneInput `json:"input"`
}

// GetInput returns __AddLaneInput.Input, and is useful for accessing the field via an interface.
func (v *__AddLaneInput) GetInput() models.AddLaneInput { return v.Input }

// __AddTokenPoolInput is used internally by genqlient
type __AddTokenPoolInput struct {
	Input models.AddTokenPoolInput `json:"input"`
}

// GetInput returns __AddTokenPoolInput.Input, and is useful for accessing the field via an interface.
func (v *__AddTokenPoolInput) GetInput() models.AddTokenPoolInput { return v.Input }

// __AssignNodetoJobInput is used internally by genqlient
type __AssignNodetoJobInput struct {
	Input models.AssignNodeToJobInput `json:"input"`
}

// GetInput returns __AssignNodetoJobInput.Input, and is useful for accessing the field via an interface.
func (v *__AssignNodetoJobInput) GetInput() models.AssignNodeToJobInput { return v.Input }

// __ConfirmLaneUpgradeInput is used internally by genqlient
type __ConfirmLaneUpgradeInput struct {
	Input models.ConfirmLaneUpgradeInput `json:"input"`
}

// GetInput returns __ConfirmLaneUpgradeInput.Input, and is useful for accessing the field via an interface.
func (v *__ConfirmLaneUpgradeInput) GetInput() models.ConfirmLaneUpgradeInput { return v.Input }

// __CreateBootstrapJobInput is used internally by genqlient
type __CreateBootstrapJobInput struct {
	Input models.CreateBootstrapJobInput `json:"input"`
}

// GetInput returns __CreateBootstrapJobInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateBootstrapJobInput) GetInput() models.CreateBootstrapJobInput { return v.Input }

// __CreateNodeInput is used internally by genqlient
type __CreateNodeInput struct {
	Input models.CreateNodeInput `json:"input"`
}

// GetInput returns __CreateNodeInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateNodeInput) GetInput() models.CreateNodeInput { return v.Input }

// __CreateNodeOperatorInput is used internally by genqlient
type __CreateNodeOperatorInput struct {
	Input models.CreateNodeOperatorInput `json:"input"`
}

// GetInput returns __CreateNodeOperatorInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateNodeOperatorInput) GetInput() models.CreateNodeOperatorInput { return v.Input }

// __CreateUserInput is used internally by genqlient
type __CreateUserInput struct {
	Input models.CreateUserInput `json:"input"`
}

// GetInput returns __CreateUserInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateUserInput) GetInput() models.CreateUserInput { return v.Input }

// __CreateVaultInput is used internally by genqlient
type __CreateVaultInput struct {
	Input models.CreateVaultInput `json:"input"`
}

// GetInput returns __CreateVaultInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateVaultInput) GetInput() models.CreateVaultInput { return v.Input }

// __DeployChainInput is used internally by genqlient
type __DeployChainInput struct {
	Input models.CcipDeployChainInput `json:"input"`
}

// GetInput returns __DeployChainInput.Input, and is useful for accessing the field via an interface.
func (v *__DeployChainInput) GetInput() models.CcipDeployChainInput { return v.Input }

// __DeployContractInput is used internally by genqlient
type __DeployContractInput struct {
	Input models.DeployContractInput `json:"input"`
}

// GetInput returns __DeployContractInput.Input, and is useful for accessing the field via an interface.
func (v *__DeployContractInput) GetInput() models.DeployContractInput { return v.Input }

// __DeregisterTestTokenInput is used internally by genqlient
type __DeregisterTestTokenInput struct {
	Input models.DeregisterTestTokenInput `json:"input"`
}

// GetInput returns __DeregisterTestTokenInput.Input, and is useful for accessing the field via an interface.
func (v *__DeregisterTestTokenInput) GetInput() models.DeregisterTestTokenInput { return v.Input }

// __GetAggregatorInput is used internally by genqlient
type __GetAggregatorInput struct {
	Id string `json:"id"`
}

// GetId returns __GetAggregatorInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAggregatorInput) GetId() string { return v.Id }

// __GetAggregatorsInput is used internally by genqlient
type __GetAggregatorsInput struct {
	Filter models.ListAggregatorsFilter `json:"filter"`
}

// GetFilter returns __GetAggregatorsInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetAggregatorsInput) GetFilter() models.ListAggregatorsFilter { return v.Filter }

// __GetChainInput is used internally by genqlient
type __GetChainInput struct {
	Id string `json:"id"`
}

// GetId returns __GetChainInput.Id, and is useful for accessing the field via an interface.
func (v *__GetChainInput) GetId() string { return v.Id }

// __GetChainsInput is used internally by genqlient
type __GetChainsInput struct {
	Filter *models.CCIPChainFilter `json:"filter"`
}

// GetFilter returns __GetChainsInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetChainsInput) GetFilter() *models.CCIPChainFilter { return v.Filter }

// __GetFeedInput is used internally by genqlient
type __GetFeedInput struct {
	Id string `json:"id"`
}

// GetId returns __GetFeedInput.Id, and is useful for accessing the field via an interface.
func (v *__GetFeedInput) GetId() string { return v.Id }

// __GetFeedsInput is used internally by genqlient
type __GetFeedsInput struct {
	Input *models.FeedsInput `json:"input"`
}

// GetInput returns __GetFeedsInput.Input, and is useful for accessing the field via an interface.
func (v *__GetFeedsInput) GetInput() *models.FeedsInput { return v.Input }

// __GetLaneInput is used internally by genqlient
type __GetLaneInput struct {
	Id string `json:"id"`
}

// GetId returns __GetLaneInput.Id, and is useful for accessing the field via an interface.
func (v *__GetLaneInput) GetId() string { return v.Id }

// __GetMercuryV03FeedInput is used internally by genqlient
type __GetMercuryV03FeedInput struct {
	Id string `json:"id"`
}

// GetId returns __GetMercuryV03FeedInput.Id, and is useful for accessing the field via an interface.
func (v *__GetMercuryV03FeedInput) GetId() string { return v.Id }

// __GetNetworksInput is used internally by genqlient
type __GetNetworksInput struct {
	Input *models.NetworksInput `json:"input"`
}

// GetInput returns __GetNetworksInput.Input, and is useful for accessing the field via an interface.
func (v *__GetNetworksInput) GetInput() *models.NetworksInput { return v.Input }

// __GetNodeInput is used internally by genqlient
type __GetNodeInput struct {
	Id string `json:"id"`
}

// GetId returns __GetNodeInput.Id, and is useful for accessing the field via an interface.
func (v *__GetNodeInput) GetId() string { return v.Id }

// __GetNodeOperatorInput is used internally by genqlient
type __GetNodeOperatorInput struct {
	Id string `json:"id"`
}

// GetId returns __GetNodeOperatorInput.Id, and is useful for accessing the field via an interface.
func (v *__GetNodeOperatorInput) GetId() string { return v.Id }

// __GetUserInput is used internally by genqlient
type __GetUserInput struct {
	Id string `json:"id"`
}

// GetId returns __GetUserInput.Id, and is useful for accessing the field via an interface.
func (v *__GetUserInput) GetId() string { return v.Id }

// __GetVaultInput is used internally by genqlient
type __GetVaultInput struct {
	Id string `json:"id"`
}

// GetId returns __GetVaultInput.Id, and is useful for accessing the field via an interface.
func (v *__GetVaultInput) GetId() string { return v.Id }

// __GetWorkflowRunInput is used internally by genqlient
type __GetWorkflowRunInput struct {
	Id string `json:"id"`
}

// GetId returns __GetWorkflowRunInput.Id, and is useful for accessing the field via an interface.
func (v *__GetWorkflowRunInput) GetId() string { return v.Id }

// __ImportFeedAggregatorInput is used internally by genqlient
type __ImportFeedAggregatorInput struct {
	Input models.ImportFeedAggregatorInput `json:"input"`
}

// GetInput returns __ImportFeedAggregatorInput.Input, and is useful for accessing the field via an interface.
func (v *__ImportFeedAggregatorInput) GetInput() models.ImportFeedAggregatorInput { return v.Input }

// __ImportFeedInput is used internally by genqlient
type __ImportFeedInput struct {
	Input models.ImportFeedInput `json:"input"`
}

// GetInput returns __ImportFeedInput.Input, and is useful for accessing the field via an interface.
func (v *__ImportFeedInput) GetInput() models.ImportFeedInput { return v.Input }

// __ImportMercuryV03FeedInput is used internally by genqlient
type __ImportMercuryV03FeedInput struct {
	Input models.ImportMercuryV03FeedInput `json:"input"`
}

// GetInput returns __ImportMercuryV03FeedInput.Input, and is useful for accessing the field via an interface.
func (v *__ImportMercuryV03FeedInput) GetInput() models.ImportMercuryV03FeedInput { return v.Input }

// __ImportMercuryV03NetworkStackInput is used internally by genqlient
type __ImportMercuryV03NetworkStackInput struct {
	Input models.ImportMercuryV03NetworkStackInput `json:"input"`
}

// GetInput returns __ImportMercuryV03NetworkStackInput.Input, and is useful for accessing the field via an interface.
func (v *__ImportMercuryV03NetworkStackInput) GetInput() models.ImportMercuryV03NetworkStackInput {
	return v.Input
}

// __ListLaneLegsInput is used internally by genqlient
type __ListLaneLegsInput struct {
	Filter models.CCIPLaneLegsFilter `json:"filter"`
}

// GetFilter returns __ListLaneLegsInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListLaneLegsInput) GetFilter() models.CCIPLaneLegsFilter { return v.Filter }

// __LoginInput is used internally by genqlient
type __LoginInput struct {
	Input models.LoginInput `json:"input"`
}

// GetInput returns __LoginInput.Input, and is useful for accessing the field via an interface.
func (v *__LoginInput) GetInput() models.LoginInput { return v.Input }

// __ProposeJobInput is used internally by genqlient
type __ProposeJobInput struct {
	Input models.ProposeJobInput `json:"input"`
}

// GetInput returns __ProposeJobInput.Input, and is useful for accessing the field via an interface.
func (v *__ProposeJobInput) GetInput() models.ProposeJobInput { return v.Input }

// __SetAllowListTokenPoolInput is used internally by genqlient
type __SetAllowListTokenPoolInput struct {
	Input models.SetAllowListTokenPoolInput `json:"input"`
}

// GetInput returns __SetAllowListTokenPoolInput.Input, and is useful for accessing the field via an interface.
func (v *__SetAllowListTokenPoolInput) GetInput() models.SetAllowListTokenPoolInput { return v.Input }

// __SetupAppInput is used internally by genqlient
type __SetupAppInput struct {
	Input models.SetupAppInput `json:"input"`
}

// GetInput returns __SetupAppInput.Input, and is useful for accessing the field via an interface.
func (v *__SetupAppInput) GetInput() models.SetupAppInput { return v.Input }

// __TransferAdminRoleInput is used internally by genqlient
type __TransferAdminRoleInput struct {
	Input models.TransferAdminRoleInput `json:"input"`
}

// GetInput returns __TransferAdminRoleInput.Input, and is useful for accessing the field via an interface.
func (v *__TransferAdminRoleInput) GetInput() models.TransferAdminRoleInput { return v.Input }

// __TransferOwnershipInput is used internally by genqlient
type __TransferOwnershipInput struct {
	Input models.TransferOwnershipInput `json:"input"`
}

// GetInput returns __TransferOwnershipInput.Input, and is useful for accessing the field via an interface.
func (v *__TransferOwnershipInput) GetInput() models.TransferOwnershipInput { return v.Input }

// __UpdateAggregatorInput is used internally by genqlient
type __UpdateAggregatorInput struct {
	Input models.UpdateAggregatorInput `json:"input"`
}

// GetInput returns __UpdateAggregatorInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateAggregatorInput) GetInput() models.UpdateAggregatorInput { return v.Input }

// __UpdateChainInput is used internally by genqlient
type __UpdateChainInput struct {
	Input models.UpdateCCIPChainInput `json:"input"`
}

// GetInput returns __UpdateChainInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateChainInput) GetInput() models.UpdateCCIPChainInput { return v.Input }

// __UpdateLaneInput is used internally by genqlient
type __UpdateLaneInput struct {
	Input models.UpdateLaneInput `json:"input"`
}

// GetInput returns __UpdateLaneInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateLaneInput) GetInput() models.UpdateLaneInput { return v.Input }

// __UpdateMercuryV03FeedInput is used internally by genqlient
type __UpdateMercuryV03FeedInput struct {
	Input models.UpdateMercuryV03FeedInput `json:"input"`
}

// GetInput returns __UpdateMercuryV03FeedInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateMercuryV03FeedInput) GetInput() models.UpdateMercuryV03FeedInput { return v.Input }

// The query or mutation executed by AddChain.
const AddChain_Operation = `
mutation AddChain ($input: AddChainInput!) {
	ccip {
		addChain(input: $input) {
			chain {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func AddChain(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.AddChainInput,
) (*AddChainResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddChain",
		Query:  AddChain_Operation,
		Variables: &__AddChainInput{
			Input: input,
		},
	}
	var err_ error

	var data_ AddChainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AddFeed.
const AddFeed_Operation = `
mutation AddFeed ($input: AddFeedInput!) {
	addFeed(input: $input) {
		feed {
			id
			name
			network {
				id
			}
			aggregators {
				id
			}
			proxy {
				id
			}
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func AddFeed(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.AddFeedInput,
) (*AddFeedResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddFeed",
		Query:  AddFeed_Operation,
		Variables: &__AddFeedInput{
			Input: input,
		},
	}
	var err_ error

	var data_ AddFeedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AddFeedAggregator.
const AddFeedAggregator_Operation = `
mutation AddFeedAggregator ($input: AddFeedAggregatorInput!) {
	addFeedAggregator(input: $input) {
		aggregator {
			id
			feed {
				id
			}
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func AddFeedAggregator(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.AddFeedAggregatorInput,
) (*AddFeedAggregatorResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddFeedAggregator",
		Query:  AddFeedAggregator_Operation,
		Variables: &__AddFeedAggregatorInput{
			Input: input,
		},
	}
	var err_ error

	var data_ AddFeedAggregatorResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AddLane.
const AddLane_Operation = `
mutation AddLane ($input: AddLaneInput!) {
	ccip {
		addLane(input: $input) {
			lane {
				id
				legA {
					id
				}
				legB {
					id
				}
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func AddLane(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.AddLaneInput,
) (*AddLaneResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddLane",
		Query:  AddLane_Operation,
		Variables: &__AddLaneInput{
			Input: input,
		},
	}
	var err_ error

	var data_ AddLaneResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AddTokenPool.
const AddTokenPool_Operation = `
mutation AddTokenPool ($input: AddTokenPoolInput!) {
	ccip {
		addTokenPool(input: $input) {
			chain {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func AddTokenPool(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.AddTokenPoolInput,
) (*AddTokenPoolResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddTokenPool",
		Query:  AddTokenPool_Operation,
		Variables: &__AddTokenPoolInput{
			Input: input,
		},
	}
	var err_ error

	var data_ AddTokenPoolResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AssignNodetoJob.
const AssignNodetoJob_Operation = `
mutation AssignNodetoJob ($input: AssignNodeToJobInput!) {
	assignNodeToJob(input: $input) {
		job {
			id
			uuid
			status
			spec
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func AssignNodetoJob(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.AssignNodeToJobInput,
) (*AssignNodetoJobResponse, error) {
	req_ := &graphql.Request{
		OpName: "AssignNodetoJob",
		Query:  AssignNodetoJob_Operation,
		Variables: &__AssignNodetoJobInput{
			Input: input,
		},
	}
	var err_ error

	var data_ AssignNodetoJobResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ConfirmLaneUpgrade.
const ConfirmLaneUpgrade_Operation = `
mutation ConfirmLaneUpgrade ($input: ConfirmLaneUpgradeInput!) {
	ccip {
		confirmLaneUpgrade(input: $input) {
			lane {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func ConfirmLaneUpgrade(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.ConfirmLaneUpgradeInput,
) (*ConfirmLaneUpgradeResponse, error) {
	req_ := &graphql.Request{
		OpName: "ConfirmLaneUpgrade",
		Query:  ConfirmLaneUpgrade_Operation,
		Variables: &__ConfirmLaneUpgradeInput{
			Input: input,
		},
	}
	var err_ error

	var data_ ConfirmLaneUpgradeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateBootstrapJob.
const CreateBootstrapJob_Operation = `
mutation CreateBootstrapJob ($input: CreateBootstrapJobInput!) {
	createBootstrapJob(input: $input) {
		job {
			id
			status
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func CreateBootstrapJob(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.CreateBootstrapJobInput,
) (*CreateBootstrapJobResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateBootstrapJob",
		Query:  CreateBootstrapJob_Operation,
		Variables: &__CreateBootstrapJobInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateBootstrapJobResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateNode.
const CreateNode_Operation = `
mutation CreateNode ($input: CreateNodeInput!) {
	createNode(input: $input) {
		node {
			id
			name
			publicKey
			nodeOperator {
				id
			}
			createdAt
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func CreateNode(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.CreateNodeInput,
) (*CreateNodeResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateNode",
		Query:  CreateNode_Operation,
		Variables: &__CreateNodeInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateNodeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateNodeOperator.
const CreateNodeOperator_Operation = `
mutation CreateNodeOperator ($input: CreateNodeOperatorInput!) {
	createNodeOperator(input: $input) {
		nodeOperator {
			id
			keys
			name
			email
			website
			createdAt
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func CreateNodeOperator(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.CreateNodeOperatorInput,
) (*CreateNodeOperatorResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateNodeOperator",
		Query:  CreateNodeOperator_Operation,
		Variables: &__CreateNodeOperatorInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateNodeOperatorResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateUser.
const CreateUser_Operation = `
mutation CreateUser ($input: CreateUserInput!) {
	createUser(input: $input) {
		user {
			id
			name
			email
			role
			createdAt
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func CreateUser(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.CreateUserInput,
) (*CreateUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateUser",
		Query:  CreateUser_Operation,
		Variables: &__CreateUserInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateVault.
const CreateVault_Operation = `
mutation CreateVault ($input: CreateVaultInput!) {
	createVault(input: $input) {
		vault {
			id
			name
			address
			type
			network {
				id
			}
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func CreateVault(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.CreateVaultInput,
) (*CreateVaultResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateVault",
		Query:  CreateVault_Operation,
		Variables: &__CreateVaultInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateVaultResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeployChain.
const DeployChain_Operation = `
mutation DeployChain ($input: CCIP_DeployChainInput!) {
	ccip {
		deployChain(input: $input) {
			workflowRun {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func DeployChain(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.CcipDeployChainInput,
) (*DeployChainResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeployChain",
		Query:  DeployChain_Operation,
		Variables: &__DeployChainInput{
			Input: input,
		},
	}
	var err_ error

	var data_ DeployChainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeployContract.
const DeployContract_Operation = `
mutation DeployContract ($input: DeployContractInput!) {
	ccip {
		deployContract(input: $input) {
			workflowRun {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func DeployContract(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.DeployContractInput,
) (*DeployContractResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeployContract",
		Query:  DeployContract_Operation,
		Variables: &__DeployContractInput{
			Input: input,
		},
	}
	var err_ error

	var data_ DeployContractResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DeregisterTestToken.
const DeregisterTestToken_Operation = `
mutation DeregisterTestToken ($input: DeregisterTestTokenInput!) {
	ccip {
		deregisterTestToken(input: $input) {
			workflowRun {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func DeregisterTestToken(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.DeregisterTestTokenInput,
) (*DeregisterTestTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "DeregisterTestToken",
		Query:  DeregisterTestToken_Operation,
		Variables: &__DeregisterTestTokenInput{
			Input: input,
		},
	}
	var err_ error

	var data_ DeregisterTestTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAggregator.
const GetAggregator_Operation = `
query GetAggregator ($id: ID!) {
	aggregator(id: $id) {
		id
		name
		contractAddress
		contractType
		ownerAddress
		ownerAddressType
		pendingOwnerAddress
		transferOwnershipStatus
		don {
			id
			jobs {
				id
				status
				nodeOperator {
					id
					name
				}
				isBootstrap
				proposalChanged
				canPropose
			}
		}
		bootstrapMultiaddrs
		feed {
			id
		}
		network {
			id
		}
		category {
			id
			name
			color
		}
		createdAt
	}
}
`

func GetAggregator(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetAggregatorResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAggregator",
		Query:  GetAggregator_Operation,
		Variables: &__GetAggregatorInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetAggregatorResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAggregators.
const GetAggregators_Operation = `
query GetAggregators ($filter: ListAggregatorsFilter!) {
	aggregators(filter: $filter) {
		id
		name
		contractAddress
		contractType
		ownerAddress
		ownerAddressType
		pendingOwnerAddress
		transferOwnershipStatus
		don {
			id
			jobs {
				id
				status
				nodeOperator {
					id
					name
				}
				isBootstrap
				proposalChanged
				canPropose
			}
		}
		bootstrapMultiaddrs
		feed {
			id
		}
		network {
			id
		}
		category {
			id
			name
			color
		}
		createdAt
	}
}
`

func GetAggregators(
	ctx_ context.Context,
	client_ graphql.Client,
	filter models.ListAggregatorsFilter,
) (*GetAggregatorsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAggregators",
		Query:  GetAggregators_Operation,
		Variables: &__GetAggregatorsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ GetAggregatorsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetBuildInfo.
const GetBuildInfo_Operation = `
query GetBuildInfo {
	buildInfo {
		version
	}
}
`

func GetBuildInfo(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetBuildInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetBuildInfo",
		Query:  GetBuildInfo_Operation,
	}
	var err_ error

	var data_ GetBuildInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetCategories.
const GetCategories_Operation = `
query GetCategories {
	categories {
		id
		name
		color
		createdAt
	}
}
`

func GetCategories(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetCategoriesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCategories",
		Query:  GetCategories_Operation,
	}
	var err_ error

	var data_ GetCategoriesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetChain.
const GetChain_Operation = `
query GetChain ($id: ID!) {
	ccip {
		chain(id: $id) {
			id
			supportedTokens {
				token
				address
				price
				priceType
			}
			wrappedNativeToken
			feeTokens
			contracts {
				id
				name
				version
				metadata
				address
			}
			network {
				id
				name
				chainID
				chainType
			}
			displayName
			deployedTemplate
		}
	}
}
`

func GetChain(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetChainResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetChain",
		Query:  GetChain_Operation,
		Variables: &__GetChainInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetChainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetChains.
const GetChains_Operation = `
query GetChains ($filter: CCIPChainFilter) {
	ccip {
		chains(filter: $filter) {
			id
			network {
				id
				chainID
				name
			}
		}
	}
}
`

func GetChains(
	ctx_ context.Context,
	client_ graphql.Client,
	filter *models.CCIPChainFilter,
) (*GetChainsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetChains",
		Query:  GetChains_Operation,
		Variables: &__GetChainsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ GetChainsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetFeed.
const GetFeed_Operation = `
query GetFeed ($id: ID!) {
	feed(id: $id) {
		id
		name
		status
		network {
			id
		}
		proxy {
			id
			contractAddress
		}
		aggregators {
			id
		}
		workflowRuns {
			id
			workflowType
			status
			actions {
				name
				actionType
				run {
					id
					actionType
					status
					tasks {
						name
						run {
							id
							input
							output
							status
						}
					}
				}
			}
			createdAt
		}
		createdAt
	}
}
`

func GetFeed(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetFeedResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetFeed",
		Query:  GetFeed_Operation,
		Variables: &__GetFeedInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetFeedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetFeeds.
const GetFeeds_Operation = `
query GetFeeds ($input: FeedsInput) {
	feeds(input: $input) {
		id
		name
		status
		network {
			id
			chainID
		}
		proxy {
			id
		}
		aggregators {
			id
			name
			contractAddress
			category {
				name
			}
		}
		workflowRuns {
			id
			accountAddress
		}
		createdAt
	}
}
`

func GetFeeds(
	ctx_ context.Context,
	client_ graphql.Client,
	input *models.FeedsInput,
) (*GetFeedsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetFeeds",
		Query:  GetFeeds_Operation,
		Variables: &__GetFeedsInput{
			Input: input,
		},
	}
	var err_ error

	var data_ GetFeedsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLane.
const GetLane_Operation = `
query GetLane ($id: ID!) {
	ccip {
		lane(id: $id) {
			id
			deployedTemplate
			deployedProvisionalTemplate
			status
			legA {
				... LegFields
			}
			legB {
				... LegFields
			}
			legAProvisional {
				... LegFields
			}
			legBProvisional {
				... LegFields
			}
		}
	}
}
fragment LegFields on CCIPLaneLeg {
	id
	source {
		... SourceFields
	}
	destination {
		... SourceFields
	}
	dons {
		... DONFields
	}
}
fragment SourceFields on CCIPEndpoint {
	chain {
		network {
			name
			id
			chainID
		}
	}
	contracts {
		name
		address
	}
}
fragment DONFields on DON {
	id
	executionType
	network {
		id
	}
	jobs {
		id
		uuid
		type
		ocr2PluginType
		status
		nodeOperator {
			id
			name
		}
		node {
			id
		}
		isBootstrap
		spec
		proposalChanged
		canPropose
		canRevoke
		createdAt
	}
}
`

func GetLane(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetLaneResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLane",
		Query:  GetLane_Operation,
		Variables: &__GetLaneInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetLaneResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetMercuryV03Feed.
const GetMercuryV03Feed_Operation = `
query GetMercuryV03Feed ($id: ID!) {
	mercuryv03 {
		feed(id: $id) {
			id
			name
			externalFeedID
			verifiers {
				networkStack {
					id
					verifierProxyAddress
				}
				networkStackType
			}
			reportSchemaVersion
			don {
				id
				jobs {
					id
					status
					spec
					isBootstrap
					canPropose
					canRevoke
					proposalChanged
					nodeOperator {
						id
						name
					}
					node {
						id
						name
					}
				}
			}
			createdAt
			archivedAt
		}
	}
}
`

func GetMercuryV03Feed(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetMercuryV03FeedResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetMercuryV03Feed",
		Query:  GetMercuryV03Feed_Operation,
		Variables: &__GetMercuryV03FeedInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetMercuryV03FeedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetMercuryV03Feeds.
const GetMercuryV03Feeds_Operation = `
query GetMercuryV03Feeds {
	mercuryv03 {
		feeds {
			id
			name
			externalFeedID
			reportSchemaVersion
			archivedAt
		}
	}
}
`

func GetMercuryV03Feeds(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetMercuryV03FeedsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetMercuryV03Feeds",
		Query:  GetMercuryV03Feeds_Operation,
	}
	var err_ error

	var data_ GetMercuryV03FeedsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetNetworks.
const GetNetworks_Operation = `
query GetNetworks ($input: NetworksInput) {
	networks(input: $input) {
		id
		chainID
		chainType
		name
		nativeToken
		archived
		linkContractAddress
		flagsContractAddress
		linkFunding
		billingAdminAccessControllerAddress
		requesterAdminAccessControllerAddress
		iconName
		explorerURL
		vaults {
			id
			name
			address
			type
		}
	}
}
`

func GetNetworks(
	ctx_ context.Context,
	client_ graphql.Client,
	input *models.NetworksInput,
) (*GetNetworksResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetNetworks",
		Query:  GetNetworks_Operation,
		Variables: &__GetNetworksInput{
			Input: input,
		},
	}
	var err_ error

	var data_ GetNetworksResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetNode.
const GetNode_Operation = `
query GetNode ($id: ID!) {
	node(id: $id) {
		id
		name
		publicKey
		nodeOperator {
			id
		}
	}
}
`

func GetNode(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetNodeResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetNode",
		Query:  GetNode_Operation,
		Variables: &__GetNodeInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetNodeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetNodeOperator.
const GetNodeOperator_Operation = `
query GetNodeOperator ($id: ID!) {
	nodeOperator(id: $id) {
		id
		keys
		name
		email
		website
		createdAt
	}
}
`

func GetNodeOperator(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetNodeOperatorResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetNodeOperator",
		Query:  GetNodeOperator_Operation,
		Variables: &__GetNodeOperatorInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetNodeOperatorResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetNodeOperators.
const GetNodeOperators_Operation = `
query GetNodeOperators {
	nodeOperators {
		id
		keys
		name
		email
		website
		metadata {
			nodeCount
			jobCount
		}
		nodes {
			id
			connected
			name
			publicKey
			categories {
				id
				name
			}
			supportedProducts
			chainConfigs {
				network {
					id
				}
				adminAddress
				accountAddress
				ocr1Config {
					ocrKeyBundle {
						configPublicKey
						offchainPublicKey
						onchainSigningAddress
					}
					p2pKeyBundle {
						peerID
					}
				}
				ocr2Config {
					enabled
					isBootstrap
					multiaddr
					ocrKeyBundle {
						bundleID
						configPublicKey
						offchainPublicKey
						onchainSigningAddress
					}
					p2pKeyBundle {
						peerID
						publicKey
					}
					plugins {
						ccipCommit
						ccipExecution
						median
						mercury
					}
				}
			}
		}
		createdAt
	}
}
`

func GetNodeOperators(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetNodeOperatorsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetNodeOperators",
		Query:  GetNodeOperators_Operation,
	}
	var err_ error

	var data_ GetNodeOperatorsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetNodes.
const GetNodes_Operation = `
query GetNodes {
	nodes {
		id
		name
		nodeOperator {
			id
		}
		createdAt
	}
}
`

func GetNodes(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetNodesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetNodes",
		Query:  GetNodes_Operation,
	}
	var err_ error

	var data_ GetNodesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetProfile.
const GetProfile_Operation = `
query GetProfile {
	profile {
		id
		name
		email
		role
		createdAt
	}
}
`

func GetProfile(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetProfileResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetProfile",
		Query:  GetProfile_Operation,
	}
	var err_ error

	var data_ GetProfileResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetUser.
const GetUser_Operation = `
query GetUser ($id: ID!) {
	user(id: $id) {
		id
		name
		email
		role
		disabled
		createdAt
	}
}
`

func GetUser(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUser",
		Query:  GetUser_Operation,
		Variables: &__GetUserInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetUsers.
const GetUsers_Operation = `
query GetUsers {
	users {
		id
		name
		email
		role
		disabled
		createdAt
	}
}
`

func GetUsers(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetUsersResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUsers",
		Query:  GetUsers_Operation,
	}
	var err_ error

	var data_ GetUsersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetVault.
const GetVault_Operation = `
query GetVault ($id: ID!) {
	vault(id: $id) {
		id
		name
		address
		type
		network {
			id
		}
		createdAt
		updatedAt
	}
}
`

func GetVault(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetVaultResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetVault",
		Query:  GetVault_Operation,
		Variables: &__GetVaultInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetVaultResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetWorkflowRun.
const GetWorkflowRun_Operation = `
query GetWorkflowRun ($id: ID!) {
	workflowRun(id: $id) {
		id
		workflowType
		status
		createdAt
		name
	}
}
`

func GetWorkflowRun(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetWorkflowRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetWorkflowRun",
		Query:  GetWorkflowRun_Operation,
		Variables: &__GetWorkflowRunInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetWorkflowRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ImportFeed.
const ImportFeed_Operation = `
mutation ImportFeed ($input: ImportFeedInput!) {
	importFeed(input: $input) {
		feed {
			id
			name
			status
			network {
				id
			}
			proxy {
				id
			}
			aggregators {
				id
				name
				contractAddress
				category {
					name
				}
			}
			workflowRuns {
				id
			}
			createdAt
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func ImportFeed(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.ImportFeedInput,
) (*ImportFeedResponse, error) {
	req_ := &graphql.Request{
		OpName: "ImportFeed",
		Query:  ImportFeed_Operation,
		Variables: &__ImportFeedInput{
			Input: input,
		},
	}
	var err_ error

	var data_ ImportFeedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ImportFeedAggregator.
const ImportFeedAggregator_Operation = `
mutation ImportFeedAggregator ($input: ImportFeedAggregatorInput!) {
	importFeedAggregator(input: $input) {
		aggregator {
			id
			feed {
				id
			}
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func ImportFeedAggregator(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.ImportFeedAggregatorInput,
) (*ImportFeedAggregatorResponse, error) {
	req_ := &graphql.Request{
		OpName: "ImportFeedAggregator",
		Query:  ImportFeedAggregator_Operation,
		Variables: &__ImportFeedAggregatorInput{
			Input: input,
		},
	}
	var err_ error

	var data_ ImportFeedAggregatorResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ImportMercuryV03Feed.
const ImportMercuryV03Feed_Operation = `
mutation ImportMercuryV03Feed ($input: ImportMercuryV03FeedInput!) {
	mercuryv03 {
		importFeed(input: $input) {
			feed {
				id
				name
				externalFeedID
				verifiers {
					networkStack {
						id
						verifierAddress
						verifierProxyAddress
						rewardBankAddress
						feeManagerAddress
						mercuryServerURL
						mercuryServerPubKey
						network {
							id
						}
					}
				}
				createdAt
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func ImportMercuryV03Feed(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.ImportMercuryV03FeedInput,
) (*ImportMercuryV03FeedResponse, error) {
	req_ := &graphql.Request{
		OpName: "ImportMercuryV03Feed",
		Query:  ImportMercuryV03Feed_Operation,
		Variables: &__ImportMercuryV03FeedInput{
			Input: input,
		},
	}
	var err_ error

	var data_ ImportMercuryV03FeedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ImportMercuryV03NetworkStack.
const ImportMercuryV03NetworkStack_Operation = `
mutation ImportMercuryV03NetworkStack ($input: ImportMercuryV03NetworkStackInput!) {
	mercuryv03 {
		importNetworkStack(input: $input) {
			networkStack {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func ImportMercuryV03NetworkStack(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.ImportMercuryV03NetworkStackInput,
) (*ImportMercuryV03NetworkStackResponse, error) {
	req_ := &graphql.Request{
		OpName: "ImportMercuryV03NetworkStack",
		Query:  ImportMercuryV03NetworkStack_Operation,
		Variables: &__ImportMercuryV03NetworkStackInput{
			Input: input,
		},
	}
	var err_ error

	var data_ ImportMercuryV03NetworkStackResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListLaneLegs.
const ListLaneLegs_Operation = `
query ListLaneLegs ($filter: CCIPLaneLegsFilter!) {
	ccip {
		laneLegs(filter: $filter) {
			id
			source {
				chain {
					contracts {
						name
						address
						metadata
					}
				}
				contracts {
					name
					address
					metadata
				}
			}
			destination {
				chain {
					contracts {
						name
						address
						metadata
					}
				}
				contracts {
					name
					address
				}
			}
			supportedTokens
		}
	}
}
`

func ListLaneLegs(
	ctx_ context.Context,
	client_ graphql.Client,
	filter models.CCIPLaneLegsFilter,
) (*ListLaneLegsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListLaneLegs",
		Query:  ListLaneLegs_Operation,
		Variables: &__ListLaneLegsInput{
			Filter: filter,
		},
	}
	var err_ error

	var data_ ListLaneLegsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListLanes.
const ListLanes_Operation = `
query ListLanes {
	ccip {
		lanes {
			id
			archivedAt
			status
			legA {
				id
				source {
					chain {
						network {
							name
							chainID
						}
					}
					contracts {
						name
						address
						deployedAt
						semver
					}
				}
				destination {
					chain {
						network {
							name
							chainID
						}
					}
					contracts {
						name
						address
						deployedAt
						semver
					}
				}
				dons {
					id
					network {
						chainID
					}
					jobs {
						id
						node {
							id
							name
						}
						type
						status
						ocr2PluginType
						nodeOperator {
							id
							keys
							name
						}
					}
				}
			}
			legB {
				id
				source {
					chain {
						network {
							name
							chainID
						}
					}
					contracts {
						name
						address
						deployedAt
						semver
					}
				}
				destination {
					chain {
						network {
							name
							chainID
						}
					}
					contracts {
						name
						address
						deployedAt
						semver
					}
				}
				dons {
					id
					network {
						chainID
					}
					jobs {
						id
						node {
							id
							name
						}
						type
						status
						ocr2PluginType
						nodeOperator {
							id
							keys
							name
						}
					}
				}
			}
			legAProvisional {
				id
				source {
					chain {
						network {
							name
							id
							chainID
						}
					}
					contracts {
						name
						address
						semver
					}
				}
				destination {
					chain {
						network {
							name
							id
						}
					}
					contracts {
						name
						address
						semver
					}
				}
				dons {
					id
					network {
						id
					}
					jobs {
						id
						proposalChanged
						node {
							id
						}
						type
						status
						ocr2PluginType
						nodeOperator {
							id
						}
						spec
					}
				}
			}
			legBProvisional {
				id
				source {
					chain {
						network {
							name
							id
							chainID
						}
					}
					contracts {
						name
						address
						semver
					}
				}
				destination {
					chain {
						network {
							name
							id
						}
					}
					contracts {
						name
						address
						semver
					}
				}
				dons {
					id
					network {
						id
					}
					jobs {
						id
						proposalChanged
						node {
							id
						}
						type
						status
						ocr2PluginType
						nodeOperator {
							id
						}
						spec
					}
				}
			}
		}
	}
}
`

func ListLanes(
	ctx_ context.Context,
	client_ graphql.Client,
) (*ListLanesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListLanes",
		Query:  ListLanes_Operation,
	}
	var err_ error

	var data_ ListLanesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Login.
const Login_Operation = `
mutation Login ($input: LoginInput!) {
	login(input: $input) {
		session {
			id
			token
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func Login(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.LoginInput,
) (*LoginResponse, error) {
	req_ := &graphql.Request{
		OpName: "Login",
		Query:  Login_Operation,
		Variables: &__LoginInput{
			Input: input,
		},
	}
	var err_ error

	var data_ LoginResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Logout.
const Logout_Operation = `
mutation Logout {
	logout {
		session {
			id
		}
	}
}
`

func Logout(
	ctx_ context.Context,
	client_ graphql.Client,
) (*LogoutResponse, error) {
	req_ := &graphql.Request{
		OpName: "Logout",
		Query:  Logout_Operation,
	}
	var err_ error

	var data_ LogoutResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ProposeJob.
const ProposeJob_Operation = `
mutation ProposeJob ($input: ProposeJobInput!) {
	proposeJob(input: $input) {
		job {
			id
			status
			createdAt
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func ProposeJob(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.ProposeJobInput,
) (*ProposeJobResponse, error) {
	req_ := &graphql.Request{
		OpName: "ProposeJob",
		Query:  ProposeJob_Operation,
		Variables: &__ProposeJobInput{
			Input: input,
		},
	}
	var err_ error

	var data_ ProposeJobResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SetAllowListTokenPool.
const SetAllowListTokenPool_Operation = `
mutation SetAllowListTokenPool ($input: SetAllowListTokenPoolInput!) {
	ccip {
		setAllowListTokenPool(input: $input) {
			workflowRun {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func SetAllowListTokenPool(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.SetAllowListTokenPoolInput,
) (*SetAllowListTokenPoolResponse, error) {
	req_ := &graphql.Request{
		OpName: "SetAllowListTokenPool",
		Query:  SetAllowListTokenPool_Operation,
		Variables: &__SetAllowListTokenPoolInput{
			Input: input,
		},
	}
	var err_ error

	var data_ SetAllowListTokenPoolResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SetupApp.
const SetupApp_Operation = `
mutation SetupApp ($input: SetupAppInput!) {
	setupApp(input: $input) {
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func SetupApp(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.SetupAppInput,
) (*SetupAppResponse, error) {
	req_ := &graphql.Request{
		OpName: "SetupApp",
		Query:  SetupApp_Operation,
		Variables: &__SetupAppInput{
			Input: input,
		},
	}
	var err_ error

	var data_ SetupAppResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by TransferAdminRole.
const TransferAdminRole_Operation = `
mutation TransferAdminRole ($input: TransferAdminRoleInput!) {
	ccip {
		transferAdminRole(input: $input) {
			workflowRun {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func TransferAdminRole(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.TransferAdminRoleInput,
) (*TransferAdminRoleResponse, error) {
	req_ := &graphql.Request{
		OpName: "TransferAdminRole",
		Query:  TransferAdminRole_Operation,
		Variables: &__TransferAdminRoleInput{
			Input: input,
		},
	}
	var err_ error

	var data_ TransferAdminRoleResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by TransferOwnership.
const TransferOwnership_Operation = `
mutation TransferOwnership ($input: TransferOwnershipInput!) {
	ccip {
		transferOwnership(input: $input) {
			workflowRun {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func TransferOwnership(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.TransferOwnershipInput,
) (*TransferOwnershipResponse, error) {
	req_ := &graphql.Request{
		OpName: "TransferOwnership",
		Query:  TransferOwnership_Operation,
		Variables: &__TransferOwnershipInput{
			Input: input,
		},
	}
	var err_ error

	var data_ TransferOwnershipResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateAggregator.
const UpdateAggregator_Operation = `
mutation UpdateAggregator ($input: UpdateAggregatorInput!) {
	updateAggregator(input: $input) {
		aggregator {
			id
		}
		errors {
			__typename
			... MutationErrorFragment
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func UpdateAggregator(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.UpdateAggregatorInput,
) (*UpdateAggregatorResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateAggregator",
		Query:  UpdateAggregator_Operation,
		Variables: &__UpdateAggregatorInput{
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateAggregatorResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateChain.
const UpdateChain_Operation = `
mutation UpdateChain ($input: UpdateCCIPChainInput!) {
	ccip {
		updateChain(input: $input) {
			chain {
				id
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func UpdateChain(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.UpdateCCIPChainInput,
) (*UpdateChainResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateChain",
		Query:  UpdateChain_Operation,
		Variables: &__UpdateChainInput{
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateChainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateLane.
const UpdateLane_Operation = `
mutation UpdateLane ($input: UpdateLaneInput!) {
	ccip {
		updateLane(input: $input) {
			lane {
				id
				status
				displayName
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func UpdateLane(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.UpdateLaneInput,
) (*UpdateLaneResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateLane",
		Query:  UpdateLane_Operation,
		Variables: &__UpdateLaneInput{
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateLaneResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateMercuryV03Feed.
const UpdateMercuryV03Feed_Operation = `
mutation UpdateMercuryV03Feed ($input: UpdateMercuryV03FeedInput!) {
	mercuryv03 {
		updateFeed(input: $input) {
			feed {
				id
				verifiers {
					networkStack {
						id
					}
				}
				don {
					id
				}
				updatedAt
			}
			errors {
				__typename
				... MutationErrorFragment
			}
		}
	}
}
fragment MutationErrorFragment on MutationError {
	... on GenericError {
		message
	}
	... on InvalidInputError {
		message
		path
	}
	... on UniqueViolationError {
		message
	}
}
`

func UpdateMercuryV03Feed(
	ctx_ context.Context,
	client_ graphql.Client,
	input models.UpdateMercuryV03FeedInput,
) (*UpdateMercuryV03FeedResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateMercuryV03Feed",
		Query:  UpdateMercuryV03Feed_Operation,
		Variables: &__UpdateMercuryV03FeedInput{
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateMercuryV03FeedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
