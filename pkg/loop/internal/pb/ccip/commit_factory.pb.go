// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: commit_factory.proto

package ccippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NewCommitFactoryRequest is a gRPC adapter to the factory configuration
// [github.com/smartcontractkit/ccip/core/services/ocr2/plugins/ccip/ccipcommit.CommitPluginStaticConfig]
type NewCommitFactoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source
	OnrampReaderServiceId int32  `protobuf:"varint,1,opt,name=onramp_reader_service_id,json=onrampReaderServiceId,proto3" json:"onramp_reader_service_id,omitempty"`
	SourceChainSelector   uint64 `protobuf:"varint,2,opt,name=source_chain_selector,json=sourceChainSelector,proto3" json:"source_chain_selector,omitempty"`
	SourceNative          string `protobuf:"bytes,3,opt,name=source_native,json=sourceNative,proto3" json:"source_native,omitempty"` // Address
	// Dest
	OfframpReaderServiceId  int32  `protobuf:"varint,4,opt,name=offramp_reader_service_id,json=offrampReaderServiceId,proto3" json:"offramp_reader_service_id,omitempty"`
	CommitStoreServiceId    int32  `protobuf:"varint,5,opt,name=commit_store_service_id,json=commitStoreServiceId,proto3" json:"commit_store_service_id,omitempty"`
	DestChainSelector       uint64 `protobuf:"varint,6,opt,name=dest_chain_selector,json=destChainSelector,proto3" json:"dest_chain_selector,omitempty"`
	PriceRegistiryServiceId int32  `protobuf:"varint,7,opt,name=price_registiry_service_id,json=priceRegistiryServiceId,proto3" json:"price_registiry_service_id,omitempty"`
	// Offchain
	PriceGetterServiceId int32 `protobuf:"varint,8,opt,name=price_getter_service_id,json=priceGetterServiceId,proto3" json:"price_getter_service_id,omitempty"` // TODO BCF-2981: there is a metrics collector defined in the corresponding config. what to do with it?
}

func (x *NewCommitFactoryRequest) Reset() {
	*x = NewCommitFactoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_factory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCommitFactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommitFactoryRequest) ProtoMessage() {}

func (x *NewCommitFactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_factory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommitFactoryRequest.ProtoReflect.Descriptor instead.
func (*NewCommitFactoryRequest) Descriptor() ([]byte, []int) {
	return file_commit_factory_proto_rawDescGZIP(), []int{0}
}

func (x *NewCommitFactoryRequest) GetOnrampReaderServiceId() int32 {
	if x != nil {
		return x.OnrampReaderServiceId
	}
	return 0
}

func (x *NewCommitFactoryRequest) GetSourceChainSelector() uint64 {
	if x != nil {
		return x.SourceChainSelector
	}
	return 0
}

func (x *NewCommitFactoryRequest) GetSourceNative() string {
	if x != nil {
		return x.SourceNative
	}
	return ""
}

func (x *NewCommitFactoryRequest) GetOfframpReaderServiceId() int32 {
	if x != nil {
		return x.OfframpReaderServiceId
	}
	return 0
}

func (x *NewCommitFactoryRequest) GetCommitStoreServiceId() int32 {
	if x != nil {
		return x.CommitStoreServiceId
	}
	return 0
}

func (x *NewCommitFactoryRequest) GetDestChainSelector() uint64 {
	if x != nil {
		return x.DestChainSelector
	}
	return 0
}

func (x *NewCommitFactoryRequest) GetPriceRegistiryServiceId() int32 {
	if x != nil {
		return x.PriceRegistiryServiceId
	}
	return 0
}

func (x *NewCommitFactoryRequest) GetPriceGetterServiceId() int32 {
	if x != nil {
		return x.PriceGetterServiceId
	}
	return 0
}

// NewCommitFactoryResponse is a reference to the factory generator service. It is a gRPC proxy mechanism
// for the return value of [github.com/smartcontractkit/ccip/core/services/ocr2/plugins/ccip/ccipcommit.NewCommitReportingPluginFactory]
// because the underlying return value is an interface, which is modeled as a service in gRPC
type NewCommitFactoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitFactoryServiceId int32 `protobuf:"varint,1,opt,name=commit_factory_service_id,json=commitFactoryServiceId,proto3" json:"commit_factory_service_id,omitempty"`
}

func (x *NewCommitFactoryResponse) Reset() {
	*x = NewCommitFactoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_factory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCommitFactoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommitFactoryResponse) ProtoMessage() {}

func (x *NewCommitFactoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_factory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommitFactoryResponse.ProtoReflect.Descriptor instead.
func (*NewCommitFactoryResponse) Descriptor() ([]byte, []int) {
	return file_commit_factory_proto_rawDescGZIP(), []int{1}
}

func (x *NewCommitFactoryResponse) GetCommitFactoryServiceId() int32 {
	if x != nil {
		return x.CommitFactoryServiceId
	}
	return 0
}

var File_commit_factory_proto protoreflect.FileDescriptor

var file_commit_factory_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x22, 0xc1, 0x03,
	0x0a, 0x17, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x72,
	0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6f, 0x6e, 0x72,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6f,
	0x66, 0x66, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x6f, 0x66, 0x66, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x1a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x69, 0x72, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x69, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x55, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x32, 0x8d, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x73, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x6f,
	0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x63,
	0x69, 0x70, 0x3b, 0x63, 0x63, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_commit_factory_proto_rawDescOnce sync.Once
	file_commit_factory_proto_rawDescData = file_commit_factory_proto_rawDesc
)

func file_commit_factory_proto_rawDescGZIP() []byte {
	file_commit_factory_proto_rawDescOnce.Do(func() {
		file_commit_factory_proto_rawDescData = protoimpl.X.CompressGZIP(file_commit_factory_proto_rawDescData)
	})
	return file_commit_factory_proto_rawDescData
}

var file_commit_factory_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_commit_factory_proto_goTypes = []interface{}{
	(*NewCommitFactoryRequest)(nil),  // 0: loop.internal.pb.ccip.NewCommitFactoryRequest
	(*NewCommitFactoryResponse)(nil), // 1: loop.internal.pb.ccip.NewCommitFactoryResponse
}
var file_commit_factory_proto_depIdxs = []int32{
	0, // 0: loop.internal.pb.ccip.CommitFactoryGenerator.NewCommitFactory:input_type -> loop.internal.pb.ccip.NewCommitFactoryRequest
	1, // 1: loop.internal.pb.ccip.CommitFactoryGenerator.NewCommitFactory:output_type -> loop.internal.pb.ccip.NewCommitFactoryResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_commit_factory_proto_init() }
func file_commit_factory_proto_init() {
	if File_commit_factory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commit_factory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCommitFactoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_factory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCommitFactoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commit_factory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commit_factory_proto_goTypes,
		DependencyIndexes: file_commit_factory_proto_depIdxs,
		MessageInfos:      file_commit_factory_proto_msgTypes,
	}.Build()
	File_commit_factory_proto = out.File
	file_commit_factory_proto_rawDesc = nil
	file_commit_factory_proto_goTypes = nil
	file_commit_factory_proto_depIdxs = nil
}
