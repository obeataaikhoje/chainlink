// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: commit_factory.proto

// note: the generate.go file in this dir specifies the import path of the relative proto files

package ccippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommitFactoryGenerator_NewCommitFactory_FullMethodName = "/loop.internal.pb.ccip.CommitFactoryGenerator/NewCommitFactory"
)

// CommitFactoryGeneratorClient is the client API for CommitFactoryGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitFactoryGeneratorClient interface {
	NewCommitFactory(ctx context.Context, in *NewCommitFactoryRequest, opts ...grpc.CallOption) (*NewCommitFactoryResponse, error)
}

type commitFactoryGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitFactoryGeneratorClient(cc grpc.ClientConnInterface) CommitFactoryGeneratorClient {
	return &commitFactoryGeneratorClient{cc}
}

func (c *commitFactoryGeneratorClient) NewCommitFactory(ctx context.Context, in *NewCommitFactoryRequest, opts ...grpc.CallOption) (*NewCommitFactoryResponse, error) {
	out := new(NewCommitFactoryResponse)
	err := c.cc.Invoke(ctx, CommitFactoryGenerator_NewCommitFactory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitFactoryGeneratorServer is the server API for CommitFactoryGenerator service.
// All implementations must embed UnimplementedCommitFactoryGeneratorServer
// for forward compatibility
type CommitFactoryGeneratorServer interface {
	NewCommitFactory(context.Context, *NewCommitFactoryRequest) (*NewCommitFactoryResponse, error)
	mustEmbedUnimplementedCommitFactoryGeneratorServer()
}

// UnimplementedCommitFactoryGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedCommitFactoryGeneratorServer struct {
}

func (UnimplementedCommitFactoryGeneratorServer) NewCommitFactory(context.Context, *NewCommitFactoryRequest) (*NewCommitFactoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCommitFactory not implemented")
}
func (UnimplementedCommitFactoryGeneratorServer) mustEmbedUnimplementedCommitFactoryGeneratorServer() {
}

// UnsafeCommitFactoryGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitFactoryGeneratorServer will
// result in compilation errors.
type UnsafeCommitFactoryGeneratorServer interface {
	mustEmbedUnimplementedCommitFactoryGeneratorServer()
}

func RegisterCommitFactoryGeneratorServer(s grpc.ServiceRegistrar, srv CommitFactoryGeneratorServer) {
	s.RegisterService(&CommitFactoryGenerator_ServiceDesc, srv)
}

func _CommitFactoryGenerator_NewCommitFactory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCommitFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitFactoryGeneratorServer).NewCommitFactory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitFactoryGenerator_NewCommitFactory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitFactoryGeneratorServer).NewCommitFactory(ctx, req.(*NewCommitFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitFactoryGenerator_ServiceDesc is the grpc.ServiceDesc for CommitFactoryGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitFactoryGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.CommitFactoryGenerator",
	HandlerType: (*CommitFactoryGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCommitFactory",
			Handler:    _CommitFactoryGenerator_NewCommitFactory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commit_factory.proto",
}
