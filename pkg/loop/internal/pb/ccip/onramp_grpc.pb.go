// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: onramp.proto

// note: the generate.go file in this dir specifies the import path of the relative proto files

package ccippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OnRampReader_GetSendRequestBetweenSeqNums_FullMethodName = "/loop.internal.pb.ccip.OnRampReader/GetSendRequestBetweenSeqNums"
	OnRampReader_RouterAddress_FullMethodName                = "/loop.internal.pb.ccip.OnRampReader/RouterAddress"
	OnRampReader_Address_FullMethodName                      = "/loop.internal.pb.ccip.OnRampReader/Address"
	OnRampReader_GetDynamicConfig_FullMethodName             = "/loop.internal.pb.ccip.OnRampReader/GetDynamicConfig"
)

// OnRampReaderClient is the client API for OnRampReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnRampReaderClient interface {
	GetSendRequestBetweenSeqNums(ctx context.Context, in *GetSendRequestBetweenSeqNumsRequest, opts ...grpc.CallOption) (*GetSendRequestBetweenSeqNumsResponse, error)
	RouterAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RouterAddressResponse, error)
	Address(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AddressResponse, error)
	GetDynamicConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDynamicConfigResponse, error)
}

type onRampReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewOnRampReaderClient(cc grpc.ClientConnInterface) OnRampReaderClient {
	return &onRampReaderClient{cc}
}

func (c *onRampReaderClient) GetSendRequestBetweenSeqNums(ctx context.Context, in *GetSendRequestBetweenSeqNumsRequest, opts ...grpc.CallOption) (*GetSendRequestBetweenSeqNumsResponse, error) {
	out := new(GetSendRequestBetweenSeqNumsResponse)
	err := c.cc.Invoke(ctx, OnRampReader_GetSendRequestBetweenSeqNums_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onRampReaderClient) RouterAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RouterAddressResponse, error) {
	out := new(RouterAddressResponse)
	err := c.cc.Invoke(ctx, OnRampReader_RouterAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onRampReaderClient) Address(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, OnRampReader_Address_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onRampReaderClient) GetDynamicConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDynamicConfigResponse, error) {
	out := new(GetDynamicConfigResponse)
	err := c.cc.Invoke(ctx, OnRampReader_GetDynamicConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnRampReaderServer is the server API for OnRampReader service.
// All implementations must embed UnimplementedOnRampReaderServer
// for forward compatibility
type OnRampReaderServer interface {
	GetSendRequestBetweenSeqNums(context.Context, *GetSendRequestBetweenSeqNumsRequest) (*GetSendRequestBetweenSeqNumsResponse, error)
	RouterAddress(context.Context, *emptypb.Empty) (*RouterAddressResponse, error)
	Address(context.Context, *emptypb.Empty) (*AddressResponse, error)
	GetDynamicConfig(context.Context, *emptypb.Empty) (*GetDynamicConfigResponse, error)
	mustEmbedUnimplementedOnRampReaderServer()
}

// UnimplementedOnRampReaderServer must be embedded to have forward compatible implementations.
type UnimplementedOnRampReaderServer struct {
}

func (UnimplementedOnRampReaderServer) GetSendRequestBetweenSeqNums(context.Context, *GetSendRequestBetweenSeqNumsRequest) (*GetSendRequestBetweenSeqNumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendRequestBetweenSeqNums not implemented")
}
func (UnimplementedOnRampReaderServer) RouterAddress(context.Context, *emptypb.Empty) (*RouterAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouterAddress not implemented")
}
func (UnimplementedOnRampReaderServer) Address(context.Context, *emptypb.Empty) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (UnimplementedOnRampReaderServer) GetDynamicConfig(context.Context, *emptypb.Empty) (*GetDynamicConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicConfig not implemented")
}
func (UnimplementedOnRampReaderServer) mustEmbedUnimplementedOnRampReaderServer() {}

// UnsafeOnRampReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnRampReaderServer will
// result in compilation errors.
type UnsafeOnRampReaderServer interface {
	mustEmbedUnimplementedOnRampReaderServer()
}

func RegisterOnRampReaderServer(s grpc.ServiceRegistrar, srv OnRampReaderServer) {
	s.RegisterService(&OnRampReader_ServiceDesc, srv)
}

func _OnRampReader_GetSendRequestBetweenSeqNums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendRequestBetweenSeqNumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnRampReaderServer).GetSendRequestBetweenSeqNums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnRampReader_GetSendRequestBetweenSeqNums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnRampReaderServer).GetSendRequestBetweenSeqNums(ctx, req.(*GetSendRequestBetweenSeqNumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnRampReader_RouterAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnRampReaderServer).RouterAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnRampReader_RouterAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnRampReaderServer).RouterAddress(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnRampReader_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnRampReaderServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnRampReader_Address_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnRampReaderServer).Address(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnRampReader_GetDynamicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnRampReaderServer).GetDynamicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnRampReader_GetDynamicConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnRampReaderServer).GetDynamicConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OnRampReader_ServiceDesc is the grpc.ServiceDesc for OnRampReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnRampReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.OnRampReader",
	HandlerType: (*OnRampReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSendRequestBetweenSeqNums",
			Handler:    _OnRampReader_GetSendRequestBetweenSeqNums_Handler,
		},
		{
			MethodName: "RouterAddress",
			Handler:    _OnRampReader_RouterAddress_Handler,
		},
		{
			MethodName: "Address",
			Handler:    _OnRampReader_Address_Handler,
		},
		{
			MethodName: "GetDynamicConfig",
			Handler:    _OnRampReader_GetDynamicConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onramp.proto",
}
