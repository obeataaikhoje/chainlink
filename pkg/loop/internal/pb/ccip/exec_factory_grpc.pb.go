// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: exec_factory.proto

package ccippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName = "/loop.internal.pb.ccip.ExecutionFactoryGenerator/NewExecutionFactory"
)

// ExecutionFactoryGeneratorClient is the client API for ExecutionFactoryGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionFactoryGeneratorClient interface {
	NewExecutionFactory(ctx context.Context, in *NewExecutionFactoryRequest, opts ...grpc.CallOption) (*NewExecutionFactoryResponse, error)
}

type executionFactoryGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionFactoryGeneratorClient(cc grpc.ClientConnInterface) ExecutionFactoryGeneratorClient {
	return &executionFactoryGeneratorClient{cc}
}

func (c *executionFactoryGeneratorClient) NewExecutionFactory(ctx context.Context, in *NewExecutionFactoryRequest, opts ...grpc.CallOption) (*NewExecutionFactoryResponse, error) {
	out := new(NewExecutionFactoryResponse)
	err := c.cc.Invoke(ctx, ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionFactoryGeneratorServer is the server API for ExecutionFactoryGenerator service.
// All implementations must embed UnimplementedExecutionFactoryGeneratorServer
// for forward compatibility
type ExecutionFactoryGeneratorServer interface {
	NewExecutionFactory(context.Context, *NewExecutionFactoryRequest) (*NewExecutionFactoryResponse, error)
	mustEmbedUnimplementedExecutionFactoryGeneratorServer()
}

// UnimplementedExecutionFactoryGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedExecutionFactoryGeneratorServer struct {
}

func (UnimplementedExecutionFactoryGeneratorServer) NewExecutionFactory(context.Context, *NewExecutionFactoryRequest) (*NewExecutionFactoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewExecutionFactory not implemented")
}
func (UnimplementedExecutionFactoryGeneratorServer) mustEmbedUnimplementedExecutionFactoryGeneratorServer() {
}

// UnsafeExecutionFactoryGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionFactoryGeneratorServer will
// result in compilation errors.
type UnsafeExecutionFactoryGeneratorServer interface {
	mustEmbedUnimplementedExecutionFactoryGeneratorServer()
}

func RegisterExecutionFactoryGeneratorServer(s grpc.ServiceRegistrar, srv ExecutionFactoryGeneratorServer) {
	s.RegisterService(&ExecutionFactoryGenerator_ServiceDesc, srv)
}

func _ExecutionFactoryGenerator_NewExecutionFactory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewExecutionFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionFactoryGeneratorServer).NewExecutionFactory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionFactoryGeneratorServer).NewExecutionFactory(ctx, req.(*NewExecutionFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionFactoryGenerator_ServiceDesc is the grpc.ServiceDesc for ExecutionFactoryGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionFactoryGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.ExecutionFactoryGenerator",
	HandlerType: (*ExecutionFactoryGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewExecutionFactory",
			Handler:    _ExecutionFactoryGenerator_NewExecutionFactory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exec_factory.proto",
}

const (
	ExecutionCustomHandlers_NewOnRampReader_FullMethodName        = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewOnRampReader"
	ExecutionCustomHandlers_NewOffRampReader_FullMethodName       = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewOffRampReader"
	ExecutionCustomHandlers_NewPriceRegistryReader_FullMethodName = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewPriceRegistryReader"
	ExecutionCustomHandlers_NewCommitStoreReader_FullMethodName   = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewCommitStoreReader"
	ExecutionCustomHandlers_NewTokenDataReader_FullMethodName     = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewTokenDataReader"
	ExecutionCustomHandlers_Close_FullMethodName                  = "/loop.internal.pb.ccip.ExecutionCustomHandlers/Close"
)

// ExecutionCustomHandlersClient is the client API for ExecutionCustomHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionCustomHandlersClient interface {
	NewOnRampReader(ctx context.Context, in *NewOnRampReaderRequest, opts ...grpc.CallOption) (*NewOnRampReaderResponse, error)
	NewOffRampReader(ctx context.Context, in *NewOffRampReaderRequest, opts ...grpc.CallOption) (*NewOffRampReaderResponse, error)
	NewPriceRegistryReader(ctx context.Context, in *NewPriceRegistryReaderRequest, opts ...grpc.CallOption) (*NewPriceRegistryReaderResponse, error)
	NewCommitStoreReader(ctx context.Context, in *NewCommitStoreReaderRequest, opts ...grpc.CallOption) (*NewCommitStoreReaderResponse, error)
	NewTokenDataReader(ctx context.Context, in *NewTokenDataRequest, opts ...grpc.CallOption) (*NewTokenDataResponse, error)
	// TODO: BCF-2993: Add more custom handlers
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type executionCustomHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionCustomHandlersClient(cc grpc.ClientConnInterface) ExecutionCustomHandlersClient {
	return &executionCustomHandlersClient{cc}
}

func (c *executionCustomHandlersClient) NewOnRampReader(ctx context.Context, in *NewOnRampReaderRequest, opts ...grpc.CallOption) (*NewOnRampReaderResponse, error) {
	out := new(NewOnRampReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewOnRampReader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewOffRampReader(ctx context.Context, in *NewOffRampReaderRequest, opts ...grpc.CallOption) (*NewOffRampReaderResponse, error) {
	out := new(NewOffRampReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewOffRampReader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewPriceRegistryReader(ctx context.Context, in *NewPriceRegistryReaderRequest, opts ...grpc.CallOption) (*NewPriceRegistryReaderResponse, error) {
	out := new(NewPriceRegistryReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewPriceRegistryReader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewCommitStoreReader(ctx context.Context, in *NewCommitStoreReaderRequest, opts ...grpc.CallOption) (*NewCommitStoreReaderResponse, error) {
	out := new(NewCommitStoreReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewCommitStoreReader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewTokenDataReader(ctx context.Context, in *NewTokenDataRequest, opts ...grpc.CallOption) (*NewTokenDataResponse, error) {
	out := new(NewTokenDataResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewTokenDataReader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionCustomHandlersServer is the server API for ExecutionCustomHandlers service.
// All implementations must embed UnimplementedExecutionCustomHandlersServer
// for forward compatibility
type ExecutionCustomHandlersServer interface {
	NewOnRampReader(context.Context, *NewOnRampReaderRequest) (*NewOnRampReaderResponse, error)
	NewOffRampReader(context.Context, *NewOffRampReaderRequest) (*NewOffRampReaderResponse, error)
	NewPriceRegistryReader(context.Context, *NewPriceRegistryReaderRequest) (*NewPriceRegistryReaderResponse, error)
	NewCommitStoreReader(context.Context, *NewCommitStoreReaderRequest) (*NewCommitStoreReaderResponse, error)
	NewTokenDataReader(context.Context, *NewTokenDataRequest) (*NewTokenDataResponse, error)
	// TODO: BCF-2993: Add more custom handlers
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedExecutionCustomHandlersServer()
}

// UnimplementedExecutionCustomHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedExecutionCustomHandlersServer struct {
}

func (UnimplementedExecutionCustomHandlersServer) NewOnRampReader(context.Context, *NewOnRampReaderRequest) (*NewOnRampReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOnRampReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewOffRampReader(context.Context, *NewOffRampReaderRequest) (*NewOffRampReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOffRampReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewPriceRegistryReader(context.Context, *NewPriceRegistryReaderRequest) (*NewPriceRegistryReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPriceRegistryReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewCommitStoreReader(context.Context, *NewCommitStoreReaderRequest) (*NewCommitStoreReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCommitStoreReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewTokenDataReader(context.Context, *NewTokenDataRequest) (*NewTokenDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTokenDataReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) mustEmbedUnimplementedExecutionCustomHandlersServer() {
}

// UnsafeExecutionCustomHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionCustomHandlersServer will
// result in compilation errors.
type UnsafeExecutionCustomHandlersServer interface {
	mustEmbedUnimplementedExecutionCustomHandlersServer()
}

func RegisterExecutionCustomHandlersServer(s grpc.ServiceRegistrar, srv ExecutionCustomHandlersServer) {
	s.RegisterService(&ExecutionCustomHandlers_ServiceDesc, srv)
}

func _ExecutionCustomHandlers_NewOnRampReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOnRampReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewOnRampReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewOnRampReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewOnRampReader(ctx, req.(*NewOnRampReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewOffRampReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOffRampReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewOffRampReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewOffRampReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewOffRampReader(ctx, req.(*NewOffRampReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewPriceRegistryReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPriceRegistryReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewPriceRegistryReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewPriceRegistryReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewPriceRegistryReader(ctx, req.(*NewPriceRegistryReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewCommitStoreReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCommitStoreReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewCommitStoreReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewCommitStoreReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewCommitStoreReader(ctx, req.(*NewCommitStoreReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewTokenDataReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTokenDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewTokenDataReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewTokenDataReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewTokenDataReader(ctx, req.(*NewTokenDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionCustomHandlers_ServiceDesc is the grpc.ServiceDesc for ExecutionCustomHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionCustomHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.ExecutionCustomHandlers",
	HandlerType: (*ExecutionCustomHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOnRampReader",
			Handler:    _ExecutionCustomHandlers_NewOnRampReader_Handler,
		},
		{
			MethodName: "NewOffRampReader",
			Handler:    _ExecutionCustomHandlers_NewOffRampReader_Handler,
		},
		{
			MethodName: "NewPriceRegistryReader",
			Handler:    _ExecutionCustomHandlers_NewPriceRegistryReader_Handler,
		},
		{
			MethodName: "NewCommitStoreReader",
			Handler:    _ExecutionCustomHandlers_NewCommitStoreReader_Handler,
		},
		{
			MethodName: "NewTokenDataReader",
			Handler:    _ExecutionCustomHandlers_NewTokenDataReader_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ExecutionCustomHandlers_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exec_factory.proto",
}
