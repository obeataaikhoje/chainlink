// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: exec_factory.proto

package ccippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName = "/loop.internal.pb.ccip.ExecutionFactoryGenerator/NewExecutionFactory"
)

// ExecutionFactoryGeneratorClient is the client API for ExecutionFactoryGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionFactoryGeneratorClient interface {
	NewExecutionFactory(ctx context.Context, in *NewExecutionFactoryRequest, opts ...grpc.CallOption) (*NewExecutionFactoryResponse, error)
}

type executionFactoryGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionFactoryGeneratorClient(cc grpc.ClientConnInterface) ExecutionFactoryGeneratorClient {
	return &executionFactoryGeneratorClient{cc}
}

func (c *executionFactoryGeneratorClient) NewExecutionFactory(ctx context.Context, in *NewExecutionFactoryRequest, opts ...grpc.CallOption) (*NewExecutionFactoryResponse, error) {
	out := new(NewExecutionFactoryResponse)
	err := c.cc.Invoke(ctx, ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionFactoryGeneratorServer is the server API for ExecutionFactoryGenerator service.
// All implementations must embed UnimplementedExecutionFactoryGeneratorServer
// for forward compatibility
type ExecutionFactoryGeneratorServer interface {
	NewExecutionFactory(context.Context, *NewExecutionFactoryRequest) (*NewExecutionFactoryResponse, error)
	mustEmbedUnimplementedExecutionFactoryGeneratorServer()
}

// UnimplementedExecutionFactoryGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedExecutionFactoryGeneratorServer struct {
}

func (UnimplementedExecutionFactoryGeneratorServer) NewExecutionFactory(context.Context, *NewExecutionFactoryRequest) (*NewExecutionFactoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewExecutionFactory not implemented")
}
func (UnimplementedExecutionFactoryGeneratorServer) mustEmbedUnimplementedExecutionFactoryGeneratorServer() {
}

// UnsafeExecutionFactoryGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionFactoryGeneratorServer will
// result in compilation errors.
type UnsafeExecutionFactoryGeneratorServer interface {
	mustEmbedUnimplementedExecutionFactoryGeneratorServer()
}

func RegisterExecutionFactoryGeneratorServer(s grpc.ServiceRegistrar, srv ExecutionFactoryGeneratorServer) {
	s.RegisterService(&ExecutionFactoryGenerator_ServiceDesc, srv)
}

func _ExecutionFactoryGenerator_NewExecutionFactory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewExecutionFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionFactoryGeneratorServer).NewExecutionFactory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionFactoryGeneratorServer).NewExecutionFactory(ctx, req.(*NewExecutionFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionFactoryGenerator_ServiceDesc is the grpc.ServiceDesc for ExecutionFactoryGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionFactoryGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.ExecutionFactoryGenerator",
	HandlerType: (*ExecutionFactoryGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewExecutionFactory",
			Handler:    _ExecutionFactoryGenerator_NewExecutionFactory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exec_factory.proto",
}
