// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: offramp.proto

package ccippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EncodeExecutionReportRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.EncodeExecutionReport]
type EncodeExecutionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report *ExecutionReport `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *EncodeExecutionReportRequest) Reset() {
	*x = EncodeExecutionReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeExecutionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeExecutionReportRequest) ProtoMessage() {}

func (x *EncodeExecutionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeExecutionReportRequest.ProtoReflect.Descriptor instead.
func (*EncodeExecutionReportRequest) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{0}
}

func (x *EncodeExecutionReportRequest) GetReport() *ExecutionReport {
	if x != nil {
		return x.Report
	}
	return nil
}

// EncodeExecutionReportResponse returns the encoded report. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.EncodeExecutionReport]
type EncodeExecutionReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *EncodeExecutionReportResponse) Reset() {
	*x = EncodeExecutionReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeExecutionReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeExecutionReportResponse) ProtoMessage() {}

func (x *EncodeExecutionReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeExecutionReportResponse.ProtoReflect.Descriptor instead.
func (*EncodeExecutionReportResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{1}
}

func (x *EncodeExecutionReportResponse) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// DecodeExecutionReportRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.DecodeExecutionReport]
type DecodeExecutionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *DecodeExecutionReportRequest) Reset() {
	*x = DecodeExecutionReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeExecutionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeExecutionReportRequest) ProtoMessage() {}

func (x *DecodeExecutionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeExecutionReportRequest.ProtoReflect.Descriptor instead.
func (*DecodeExecutionReportRequest) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{2}
}

func (x *DecodeExecutionReportRequest) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// DecodeExecutionReportResponse returns the decoded report. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.DecodeExecutionReport]
type DecodeExecutionReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report *ExecutionReport `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *DecodeExecutionReportResponse) Reset() {
	*x = DecodeExecutionReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeExecutionReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeExecutionReportResponse) ProtoMessage() {}

func (x *DecodeExecutionReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeExecutionReportResponse.ProtoReflect.Descriptor instead.
func (*DecodeExecutionReportResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{3}
}

func (x *DecodeExecutionReportResponse) GetReport() *ExecutionReport {
	if x != nil {
		return x.Report
	}
	return nil
}

// GetExecutionStateChangesRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetExecutionStateChangesBetweenSeqNums]
type GetExecutionStateChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinSeqNum     uint64 `protobuf:"varint,1,opt,name=min_seq_num,json=minSeqNum,proto3" json:"min_seq_num,omitempty"`
	MaxSeqNum     uint64 `protobuf:"varint,2,opt,name=max_seq_num,json=maxSeqNum,proto3" json:"max_seq_num,omitempty"`
	Confirmations int64  `protobuf:"varint,3,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
}

func (x *GetExecutionStateChangesRequest) Reset() {
	*x = GetExecutionStateChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecutionStateChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionStateChangesRequest) ProtoMessage() {}

func (x *GetExecutionStateChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionStateChangesRequest.ProtoReflect.Descriptor instead.
func (*GetExecutionStateChangesRequest) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{4}
}

func (x *GetExecutionStateChangesRequest) GetMinSeqNum() uint64 {
	if x != nil {
		return x.MinSeqNum
	}
	return 0
}

func (x *GetExecutionStateChangesRequest) GetMaxSeqNum() uint64 {
	if x != nil {
		return x.MaxSeqNum
	}
	return 0
}

func (x *GetExecutionStateChangesRequest) GetConfirmations() int64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

// GetExecutionStateChangesResponse returns the execution state changes. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetExecutionStateChangesBetweenSeqNums]
type GetExecutionStateChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionStateChanges []*ExecutionStateChangeWithTxMeta `protobuf:"bytes,1,rep,name=execution_state_changes,json=executionStateChanges,proto3" json:"execution_state_changes,omitempty"`
}

func (x *GetExecutionStateChangesResponse) Reset() {
	*x = GetExecutionStateChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecutionStateChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionStateChangesResponse) ProtoMessage() {}

func (x *GetExecutionStateChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionStateChangesResponse.ProtoReflect.Descriptor instead.
func (*GetExecutionStateChangesResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{5}
}

func (x *GetExecutionStateChangesResponse) GetExecutionStateChanges() []*ExecutionStateChangeWithTxMeta {
	if x != nil {
		return x.ExecutionStateChanges
	}
	return nil
}

// GetTokenPoolRateLimitsRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetTokenPoolRateLimits]
type GetTokenPoolRateLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenPoolAddress []string `protobuf:"bytes,1,rep,name=token_pool_address,json=tokenPoolAddress,proto3" json:"token_pool_address,omitempty"` // []Address
}

func (x *GetTokenPoolRateLimitsRequest) Reset() {
	*x = GetTokenPoolRateLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenPoolRateLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenPoolRateLimitsRequest) ProtoMessage() {}

func (x *GetTokenPoolRateLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenPoolRateLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetTokenPoolRateLimitsRequest) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{6}
}

func (x *GetTokenPoolRateLimitsRequest) GetTokenPoolAddress() []string {
	if x != nil {
		return x.TokenPoolAddress
	}
	return nil
}

// GetTokenPoolRateLimitsResponse returns the token pool rate limits. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetTokenPoolRateLimits]
type GetTokenPoolRateLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenPoolRateLimits []*TokenPoolRateLimit `protobuf:"bytes,1,rep,name=token_pool_rate_limits,json=tokenPoolRateLimits,proto3" json:"token_pool_rate_limits,omitempty"`
}

func (x *GetTokenPoolRateLimitsResponse) Reset() {
	*x = GetTokenPoolRateLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenPoolRateLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenPoolRateLimitsResponse) ProtoMessage() {}

func (x *GetTokenPoolRateLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenPoolRateLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetTokenPoolRateLimitsResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{7}
}

func (x *GetTokenPoolRateLimitsResponse) GetTokenPoolRateLimits() []*TokenPoolRateLimit {
	if x != nil {
		return x.TokenPoolRateLimits
	}
	return nil
}

// OffRampAddressResponse returns the offramp address. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.Address]
type OffRampAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *OffRampAddressResponse) Reset() {
	*x = OffRampAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffRampAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffRampAddressResponse) ProtoMessage() {}

func (x *OffRampAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffRampAddressResponse.ProtoReflect.Descriptor instead.
func (*OffRampAddressResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{8}
}

func (x *OffRampAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// ChangeConfigRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.ChangeConfig]
type ChangeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig  []byte `protobuf:"bytes,1,opt,name=onchain_config,json=onchainConfig,proto3" json:"onchain_config,omitempty"`
	OffchainConfig []byte `protobuf:"bytes,2,opt,name=offchain_config,json=offchainConfig,proto3" json:"offchain_config,omitempty"`
}

func (x *ChangeConfigRequest) Reset() {
	*x = ChangeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigRequest) ProtoMessage() {}

func (x *ChangeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigRequest.ProtoReflect.Descriptor instead.
func (*ChangeConfigRequest) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{9}
}

func (x *ChangeConfigRequest) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

func (x *ChangeConfigRequest) GetOffchainConfig() []byte {
	if x != nil {
		return x.OffchainConfig
	}
	return nil
}

// ChangeConfigResponse returns the new config addresses. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.ChangeConfig]
type ChangeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfigAddress  string `protobuf:"bytes,1,opt,name=onchain_config_address,json=onchainConfigAddress,proto3" json:"onchain_config_address,omitempty"`    // Address
	OffchainConfigAddress string `protobuf:"bytes,2,opt,name=offchain_config_address,json=offchainConfigAddress,proto3" json:"offchain_config_address,omitempty"` // Address
}

func (x *ChangeConfigResponse) Reset() {
	*x = ChangeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigResponse) ProtoMessage() {}

func (x *ChangeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigResponse.ProtoReflect.Descriptor instead.
func (*ChangeConfigResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{10}
}

func (x *ChangeConfigResponse) GetOnchainConfigAddress() string {
	if x != nil {
		return x.OnchainConfigAddress
	}
	return ""
}

func (x *ChangeConfigResponse) GetOffchainConfigAddress() string {
	if x != nil {
		return x.OffchainConfigAddress
	}
	return ""
}

// OffchainConfigResponse returns the offchain config. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.OffchainConfig]
type OffchainConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *ExecOffchainConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *OffchainConfigResponse) Reset() {
	*x = OffchainConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffchainConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffchainConfigResponse) ProtoMessage() {}

func (x *OffchainConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffchainConfigResponse.ProtoReflect.Descriptor instead.
func (*OffchainConfigResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{11}
}

func (x *OffchainConfigResponse) GetConfig() *ExecOffchainConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// OnchainConfigResponse returns the onchain config. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.OnchainConfig]
type OnchainConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *ExecOnchainConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *OnchainConfigResponse) Reset() {
	*x = OnchainConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnchainConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnchainConfigResponse) ProtoMessage() {}

func (x *OnchainConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnchainConfigResponse.ProtoReflect.Descriptor instead.
func (*OnchainConfigResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{12}
}

func (x *OnchainConfigResponse) GetConfig() *ExecOnchainConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// GasPriceEstimatorResponse returns a reference to the gas price estimator service. It is a gRPC proxying mechanism for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GasPriceEstimator]
// because the underlying return value is an interface, which is modeled as a service in gRPC
type GasPriceEstimatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimatorServiceId int32 `protobuf:"varint,1,opt,name=estimator_service_id,json=estimatorServiceId,proto3" json:"estimator_service_id,omitempty"`
}

func (x *GasPriceEstimatorResponse) Reset() {
	*x = GasPriceEstimatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasPriceEstimatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasPriceEstimatorResponse) ProtoMessage() {}

func (x *GasPriceEstimatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasPriceEstimatorResponse.ProtoReflect.Descriptor instead.
func (*GasPriceEstimatorResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{13}
}

func (x *GasPriceEstimatorResponse) GetEstimatorServiceId() int32 {
	if x != nil {
		return x.EstimatorServiceId
	}
	return 0
}

// GetSenderNonceRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetSenderNonce]
type GetSenderNonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (x *GetSenderNonceRequest) Reset() {
	*x = GetSenderNonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSenderNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSenderNonceRequest) ProtoMessage() {}

func (x *GetSenderNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSenderNonceRequest.ProtoReflect.Descriptor instead.
func (*GetSenderNonceRequest) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{14}
}

func (x *GetSenderNonceRequest) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

// GetSenderNonceResponse returns the sender nonce. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetSenderNonce]
type GetSenderNonceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *GetSenderNonceResponse) Reset() {
	*x = GetSenderNonceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSenderNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSenderNonceResponse) ProtoMessage() {}

func (x *GetSenderNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSenderNonceResponse.ProtoReflect.Descriptor instead.
func (*GetSenderNonceResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{15}
}

func (x *GetSenderNonceResponse) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// CurrentRateLimiterStateResponse returns the current rate limiter state. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.CurrentRateLimiterState]
type CurrentRateLimiterStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateLimiter *TokenPoolRateLimit `protobuf:"bytes,1,opt,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
}

func (x *CurrentRateLimiterStateResponse) Reset() {
	*x = CurrentRateLimiterStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentRateLimiterStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentRateLimiterStateResponse) ProtoMessage() {}

func (x *CurrentRateLimiterStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentRateLimiterStateResponse.ProtoReflect.Descriptor instead.
func (*CurrentRateLimiterStateResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{16}
}

func (x *CurrentRateLimiterStateResponse) GetRateLimiter() *TokenPoolRateLimit {
	if x != nil {
		return x.RateLimiter
	}
	return nil
}

// GetExecutionStateRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetExecutionState]
type GetExecutionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNum uint64 `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
}

func (x *GetExecutionStateRequest) Reset() {
	*x = GetExecutionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecutionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionStateRequest) ProtoMessage() {}

func (x *GetExecutionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionStateRequest.ProtoReflect.Descriptor instead.
func (*GetExecutionStateRequest) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{17}
}

func (x *GetExecutionStateRequest) GetSeqNum() uint64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

// GetExecutionStateResponse returns the execution state. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetExecutionState]
type GetExecutionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionState uint32 `protobuf:"varint,1,opt,name=execution_state,json=executionState,proto3" json:"execution_state,omitempty"` // uint8
}

func (x *GetExecutionStateResponse) Reset() {
	*x = GetExecutionStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecutionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionStateResponse) ProtoMessage() {}

func (x *GetExecutionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionStateResponse.ProtoReflect.Descriptor instead.
func (*GetExecutionStateResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{18}
}

func (x *GetExecutionStateResponse) GetExecutionState() uint32 {
	if x != nil {
		return x.ExecutionState
	}
	return 0
}

// GetStaticConfigResponse returns the static config. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetStaticConfig]
type GetStaticConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *OffRampStaticConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetStaticConfigResponse) Reset() {
	*x = GetStaticConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaticConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaticConfigResponse) ProtoMessage() {}

func (x *GetStaticConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaticConfigResponse.ProtoReflect.Descriptor instead.
func (*GetStaticConfigResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{19}
}

func (x *GetStaticConfigResponse) GetConfig() *OffRampStaticConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// GetSourceToDestTokenMappingResponse returns the source to destination token mapping. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetSourceToDestTokenMapping]
type GetSourceToDestTokenMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenMappings map[string]string `protobuf:"bytes,1,rep,name=token_mappings,json=tokenMappings,proto3" json:"token_mappings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[Address]Address
}

func (x *GetSourceToDestTokenMappingResponse) Reset() {
	*x = GetSourceToDestTokenMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourceToDestTokenMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourceToDestTokenMappingResponse) ProtoMessage() {}

func (x *GetSourceToDestTokenMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourceToDestTokenMappingResponse.ProtoReflect.Descriptor instead.
func (*GetSourceToDestTokenMappingResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{20}
}

func (x *GetSourceToDestTokenMappingResponse) GetTokenMappings() map[string]string {
	if x != nil {
		return x.TokenMappings
	}
	return nil
}

// GetTokensResponse returns the tokens. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader.GetTokens]
type GetTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens *OffRampTokens `protobuf:"bytes,1,opt,name=tokens,proto3" json:"tokens,omitempty"` // []Address
}

func (x *GetTokensResponse) Reset() {
	*x = GetTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensResponse) ProtoMessage() {}

func (x *GetTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensResponse.ProtoReflect.Descriptor instead.
func (*GetTokensResponse) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{21}
}

func (x *GetTokensResponse) GetTokens() *OffRampTokens {
	if x != nil {
		return x.Tokens
	}
	return nil
}

// ExecutionStateChangeWithTxMeta is a gRPC adapter for the struct
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/ExecutionStateChangeWithTxMeta]
type ExecutionStateChangeWithTxMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionStateChange *ExecutionStateChange `protobuf:"bytes,1,opt,name=execution_state_change,json=executionStateChange,proto3" json:"execution_state_change,omitempty"`
	TxMeta               *TxMeta               `protobuf:"bytes,2,opt,name=tx_meta,json=txMeta,proto3" json:"tx_meta,omitempty"`
}

func (x *ExecutionStateChangeWithTxMeta) Reset() {
	*x = ExecutionStateChangeWithTxMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStateChangeWithTxMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStateChangeWithTxMeta) ProtoMessage() {}

func (x *ExecutionStateChangeWithTxMeta) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStateChangeWithTxMeta.ProtoReflect.Descriptor instead.
func (*ExecutionStateChangeWithTxMeta) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{22}
}

func (x *ExecutionStateChangeWithTxMeta) GetExecutionStateChange() *ExecutionStateChange {
	if x != nil {
		return x.ExecutionStateChange
	}
	return nil
}

func (x *ExecutionStateChangeWithTxMeta) GetTxMeta() *TxMeta {
	if x != nil {
		return x.TxMeta
	}
	return nil
}

// ExecutionStateChange is a gRPC adapter for the struct
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/ExecutionStateChange]
type ExecutionStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNum    uint64 `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	Finalized bool   `protobuf:"varint,2,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (x *ExecutionStateChange) Reset() {
	*x = ExecutionStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStateChange) ProtoMessage() {}

func (x *ExecutionStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStateChange.ProtoReflect.Descriptor instead.
func (*ExecutionStateChange) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{23}
}

func (x *ExecutionStateChange) GetSeqNum() uint64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *ExecutionStateChange) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

// ExecOffchainConfig is a gRPC adapter for the struct
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/ExecOffchainConfig]
type ExecOffchainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestOptimisticConfirmations uint32               `protobuf:"varint,1,opt,name=dest_optimistic_confirmations,json=destOptimisticConfirmations,proto3" json:"dest_optimistic_confirmations,omitempty"`
	BatchGasLimit               uint32               `protobuf:"varint,2,opt,name=batch_gas_limit,json=batchGasLimit,proto3" json:"batch_gas_limit,omitempty"`
	RelativeBoostPerWaitHour    float32              `protobuf:"fixed32,3,opt,name=relative_boost_per_wait_hour,json=relativeBoostPerWaitHour,proto3" json:"relative_boost_per_wait_hour,omitempty"`   // float64
	InflightCacheExpirySeconds  *durationpb.Duration `protobuf:"bytes,4,opt,name=inflight_cache_expiry_seconds,json=inflightCacheExpirySeconds,proto3" json:"inflight_cache_expiry_seconds,omitempty"` // config.Duration
	RootSnoozeTimeSeconds       *durationpb.Duration `protobuf:"bytes,5,opt,name=root_snooze_time_seconds,json=rootSnoozeTimeSeconds,proto3" json:"root_snooze_time_seconds,omitempty"`                // config.Duration
}

func (x *ExecOffchainConfig) Reset() {
	*x = ExecOffchainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecOffchainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecOffchainConfig) ProtoMessage() {}

func (x *ExecOffchainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecOffchainConfig.ProtoReflect.Descriptor instead.
func (*ExecOffchainConfig) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{24}
}

func (x *ExecOffchainConfig) GetDestOptimisticConfirmations() uint32 {
	if x != nil {
		return x.DestOptimisticConfirmations
	}
	return 0
}

func (x *ExecOffchainConfig) GetBatchGasLimit() uint32 {
	if x != nil {
		return x.BatchGasLimit
	}
	return 0
}

func (x *ExecOffchainConfig) GetRelativeBoostPerWaitHour() float32 {
	if x != nil {
		return x.RelativeBoostPerWaitHour
	}
	return 0
}

func (x *ExecOffchainConfig) GetInflightCacheExpirySeconds() *durationpb.Duration {
	if x != nil {
		return x.InflightCacheExpirySeconds
	}
	return nil
}

func (x *ExecOffchainConfig) GetRootSnoozeTimeSeconds() *durationpb.Duration {
	if x != nil {
		return x.RootSnoozeTimeSeconds
	}
	return nil
}

// ExecOnchainConfig is a gRPC adapter for the struct
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/ExecOnchainConfig]
type ExecOnchainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionlessExecThresholdSeconds *durationpb.Duration `protobuf:"bytes,1,opt,name=permissionless_exec_threshold_seconds,json=permissionlessExecThresholdSeconds,proto3" json:"permissionless_exec_threshold_seconds,omitempty"` // time.Duration
}

func (x *ExecOnchainConfig) Reset() {
	*x = ExecOnchainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecOnchainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecOnchainConfig) ProtoMessage() {}

func (x *ExecOnchainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecOnchainConfig.ProtoReflect.Descriptor instead.
func (*ExecOnchainConfig) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{25}
}

func (x *ExecOnchainConfig) GetPermissionlessExecThresholdSeconds() *durationpb.Duration {
	if x != nil {
		return x.PermissionlessExecThresholdSeconds
	}
	return nil
}

// OffRampStaticConfig is a gRPC adapter for the struct
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampStaticConfig]
type OffRampStaticConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitString        string `protobuf:"bytes,1,opt,name=commit_string,json=commitString,proto3" json:"commit_string,omitempty"` // Address
	ChainSelector       uint64 `protobuf:"varint,2,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	SourceChainSelector uint64 `protobuf:"varint,3,opt,name=source_chain_selector,json=sourceChainSelector,proto3" json:"source_chain_selector,omitempty"`
	OnRamp              string `protobuf:"bytes,4,opt,name=on_ramp,json=onRamp,proto3" json:"on_ramp,omitempty"`               // Address
	PrevOnRamp          string `protobuf:"bytes,5,opt,name=prev_on_ramp,json=prevOnRamp,proto3" json:"prev_on_ramp,omitempty"` // Address
	ArmProxy            string `protobuf:"bytes,6,opt,name=arm_proxy,json=armProxy,proto3" json:"arm_proxy,omitempty"`         // Address
}

func (x *OffRampStaticConfig) Reset() {
	*x = OffRampStaticConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffRampStaticConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffRampStaticConfig) ProtoMessage() {}

func (x *OffRampStaticConfig) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffRampStaticConfig.ProtoReflect.Descriptor instead.
func (*OffRampStaticConfig) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{26}
}

func (x *OffRampStaticConfig) GetCommitString() string {
	if x != nil {
		return x.CommitString
	}
	return ""
}

func (x *OffRampStaticConfig) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

func (x *OffRampStaticConfig) GetSourceChainSelector() uint64 {
	if x != nil {
		return x.SourceChainSelector
	}
	return 0
}

func (x *OffRampStaticConfig) GetOnRamp() string {
	if x != nil {
		return x.OnRamp
	}
	return ""
}

func (x *OffRampStaticConfig) GetPrevOnRamp() string {
	if x != nil {
		return x.PrevOnRamp
	}
	return ""
}

func (x *OffRampStaticConfig) GetArmProxy() string {
	if x != nil {
		return x.ArmProxy
	}
	return ""
}

// OffRampTokens is a gRPC adapter for the struct
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampTokens]
type OffRampTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationTokens []string          `protobuf:"bytes,1,rep,name=destination_tokens,json=destinationTokens,proto3" json:"destination_tokens,omitempty"`                                                                                   // []Address
	SourceTokens      []string          `protobuf:"bytes,2,rep,name=source_tokens,json=sourceTokens,proto3" json:"source_tokens,omitempty"`                                                                                                  // []Address
	DestinationPool   map[string]string `protobuf:"bytes,3,rep,name=destination_pool,json=destinationPool,proto3" json:"destination_pool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[Address]Address
}

func (x *OffRampTokens) Reset() {
	*x = OffRampTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offramp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffRampTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffRampTokens) ProtoMessage() {}

func (x *OffRampTokens) ProtoReflect() protoreflect.Message {
	mi := &file_offramp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffRampTokens.ProtoReflect.Descriptor instead.
func (*OffRampTokens) Descriptor() ([]byte, []int) {
	return file_offramp_proto_rawDescGZIP(), []int{27}
}

func (x *OffRampTokens) GetDestinationTokens() []string {
	if x != nil {
		return x.DestinationTokens
	}
	return nil
}

func (x *OffRampTokens) GetSourceTokens() []string {
	if x != nil {
		return x.SourceTokens
	}
	return nil
}

func (x *OffRampTokens) GetDestinationPool() map[string]string {
	if x != nil {
		return x.DestinationPool
	}
	return nil
}

var File_offramp_proto protoreflect.FileDescriptor

var file_offramp_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x72, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5e, 0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x37, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x5f, 0x0a, 0x1d, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0x4d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x13,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x22, 0x32, 0x0a, 0x16, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x84,
	0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5b, 0x0a, 0x16, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x59, 0x0a, 0x15, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63,
	0x63, 0x69, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4d, 0x0a,
	0x19, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x6f, 0x0a, 0x1f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x33, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x22, 0x44, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4f, 0x66, 0x66, 0x52,
	0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x74, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x63, 0x63, 0x69, 0x70, 0x2e, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x1e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x61, 0x0a,
	0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x54, 0x78, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x06, 0x74, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0xf2, 0x02, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63,
	0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42,
	0x0a, 0x1d, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x64, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x5c, 0x0a, 0x1d, 0x69, 0x6e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x69, 0x6e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x18, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x6e, 0x6f, 0x6f, 0x7a,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a,
	0x11, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x6c, 0x0a, 0x25, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0xed, 0x01, 0x0a, 0x13, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6e, 0x52, 0x61, 0x6d,
	0x70, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x6e, 0x52,
	0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x22, 0x8d, 0x02, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x42, 0x0a, 0x14,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x32, 0x87, 0x0d, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x63, 0x63, 0x69, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x36, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63,
	0x63, 0x69, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x4f, 0x66,
	0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x11, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63,
	0x63, 0x69, 0x70, 0x2e, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x36, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x3a, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63,
	0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44,
	0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c,
	0x6f, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f,
	0x63, 0x63, 0x69, 0x70, 0x3b, 0x63, 0x63, 0x69, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_offramp_proto_rawDescOnce sync.Once
	file_offramp_proto_rawDescData = file_offramp_proto_rawDesc
)

func file_offramp_proto_rawDescGZIP() []byte {
	file_offramp_proto_rawDescOnce.Do(func() {
		file_offramp_proto_rawDescData = protoimpl.X.CompressGZIP(file_offramp_proto_rawDescData)
	})
	return file_offramp_proto_rawDescData
}

var file_offramp_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_offramp_proto_goTypes = []interface{}{
	(*EncodeExecutionReportRequest)(nil),        // 0: loop.internal.pb.ccip.EncodeExecutionReportRequest
	(*EncodeExecutionReportResponse)(nil),       // 1: loop.internal.pb.ccip.EncodeExecutionReportResponse
	(*DecodeExecutionReportRequest)(nil),        // 2: loop.internal.pb.ccip.DecodeExecutionReportRequest
	(*DecodeExecutionReportResponse)(nil),       // 3: loop.internal.pb.ccip.DecodeExecutionReportResponse
	(*GetExecutionStateChangesRequest)(nil),     // 4: loop.internal.pb.ccip.GetExecutionStateChangesRequest
	(*GetExecutionStateChangesResponse)(nil),    // 5: loop.internal.pb.ccip.GetExecutionStateChangesResponse
	(*GetTokenPoolRateLimitsRequest)(nil),       // 6: loop.internal.pb.ccip.GetTokenPoolRateLimitsRequest
	(*GetTokenPoolRateLimitsResponse)(nil),      // 7: loop.internal.pb.ccip.GetTokenPoolRateLimitsResponse
	(*OffRampAddressResponse)(nil),              // 8: loop.internal.pb.ccip.OffRampAddressResponse
	(*ChangeConfigRequest)(nil),                 // 9: loop.internal.pb.ccip.ChangeConfigRequest
	(*ChangeConfigResponse)(nil),                // 10: loop.internal.pb.ccip.ChangeConfigResponse
	(*OffchainConfigResponse)(nil),              // 11: loop.internal.pb.ccip.OffchainConfigResponse
	(*OnchainConfigResponse)(nil),               // 12: loop.internal.pb.ccip.OnchainConfigResponse
	(*GasPriceEstimatorResponse)(nil),           // 13: loop.internal.pb.ccip.GasPriceEstimatorResponse
	(*GetSenderNonceRequest)(nil),               // 14: loop.internal.pb.ccip.GetSenderNonceRequest
	(*GetSenderNonceResponse)(nil),              // 15: loop.internal.pb.ccip.GetSenderNonceResponse
	(*CurrentRateLimiterStateResponse)(nil),     // 16: loop.internal.pb.ccip.CurrentRateLimiterStateResponse
	(*GetExecutionStateRequest)(nil),            // 17: loop.internal.pb.ccip.GetExecutionStateRequest
	(*GetExecutionStateResponse)(nil),           // 18: loop.internal.pb.ccip.GetExecutionStateResponse
	(*GetStaticConfigResponse)(nil),             // 19: loop.internal.pb.ccip.GetStaticConfigResponse
	(*GetSourceToDestTokenMappingResponse)(nil), // 20: loop.internal.pb.ccip.GetSourceToDestTokenMappingResponse
	(*GetTokensResponse)(nil),                   // 21: loop.internal.pb.ccip.GetTokensResponse
	(*ExecutionStateChangeWithTxMeta)(nil),      // 22: loop.internal.pb.ccip.ExecutionStateChangeWithTxMeta
	(*ExecutionStateChange)(nil),                // 23: loop.internal.pb.ccip.ExecutionStateChange
	(*ExecOffchainConfig)(nil),                  // 24: loop.internal.pb.ccip.ExecOffchainConfig
	(*ExecOnchainConfig)(nil),                   // 25: loop.internal.pb.ccip.ExecOnchainConfig
	(*OffRampStaticConfig)(nil),                 // 26: loop.internal.pb.ccip.OffRampStaticConfig
	(*OffRampTokens)(nil),                       // 27: loop.internal.pb.ccip.OffRampTokens
	nil,                                         // 28: loop.internal.pb.ccip.GetSourceToDestTokenMappingResponse.TokenMappingsEntry
	nil,                                         // 29: loop.internal.pb.ccip.OffRampTokens.DestinationPoolEntry
	(*ExecutionReport)(nil),                     // 30: loop.internal.pb.ccip.ExecutionReport
	(*TokenPoolRateLimit)(nil),                  // 31: loop.internal.pb.ccip.TokenPoolRateLimit
	(*TxMeta)(nil),                              // 32: loop.internal.pb.ccip.TxMeta
	(*durationpb.Duration)(nil),                 // 33: google.protobuf.Duration
	(*emptypb.Empty)(nil),                       // 34: google.protobuf.Empty
}
var file_offramp_proto_depIdxs = []int32{
	30, // 0: loop.internal.pb.ccip.EncodeExecutionReportRequest.report:type_name -> loop.internal.pb.ccip.ExecutionReport
	30, // 1: loop.internal.pb.ccip.DecodeExecutionReportResponse.report:type_name -> loop.internal.pb.ccip.ExecutionReport
	22, // 2: loop.internal.pb.ccip.GetExecutionStateChangesResponse.execution_state_changes:type_name -> loop.internal.pb.ccip.ExecutionStateChangeWithTxMeta
	31, // 3: loop.internal.pb.ccip.GetTokenPoolRateLimitsResponse.token_pool_rate_limits:type_name -> loop.internal.pb.ccip.TokenPoolRateLimit
	24, // 4: loop.internal.pb.ccip.OffchainConfigResponse.config:type_name -> loop.internal.pb.ccip.ExecOffchainConfig
	25, // 5: loop.internal.pb.ccip.OnchainConfigResponse.config:type_name -> loop.internal.pb.ccip.ExecOnchainConfig
	31, // 6: loop.internal.pb.ccip.CurrentRateLimiterStateResponse.rate_limiter:type_name -> loop.internal.pb.ccip.TokenPoolRateLimit
	26, // 7: loop.internal.pb.ccip.GetStaticConfigResponse.config:type_name -> loop.internal.pb.ccip.OffRampStaticConfig
	28, // 8: loop.internal.pb.ccip.GetSourceToDestTokenMappingResponse.token_mappings:type_name -> loop.internal.pb.ccip.GetSourceToDestTokenMappingResponse.TokenMappingsEntry
	27, // 9: loop.internal.pb.ccip.GetTokensResponse.tokens:type_name -> loop.internal.pb.ccip.OffRampTokens
	23, // 10: loop.internal.pb.ccip.ExecutionStateChangeWithTxMeta.execution_state_change:type_name -> loop.internal.pb.ccip.ExecutionStateChange
	32, // 11: loop.internal.pb.ccip.ExecutionStateChangeWithTxMeta.tx_meta:type_name -> loop.internal.pb.ccip.TxMeta
	33, // 12: loop.internal.pb.ccip.ExecOffchainConfig.inflight_cache_expiry_seconds:type_name -> google.protobuf.Duration
	33, // 13: loop.internal.pb.ccip.ExecOffchainConfig.root_snooze_time_seconds:type_name -> google.protobuf.Duration
	33, // 14: loop.internal.pb.ccip.ExecOnchainConfig.permissionless_exec_threshold_seconds:type_name -> google.protobuf.Duration
	29, // 15: loop.internal.pb.ccip.OffRampTokens.destination_pool:type_name -> loop.internal.pb.ccip.OffRampTokens.DestinationPoolEntry
	0,  // 16: loop.internal.pb.ccip.OffRampReader.EncodeExecutionReport:input_type -> loop.internal.pb.ccip.EncodeExecutionReportRequest
	2,  // 17: loop.internal.pb.ccip.OffRampReader.DecodeExecutionReport:input_type -> loop.internal.pb.ccip.DecodeExecutionReportRequest
	4,  // 18: loop.internal.pb.ccip.OffRampReader.GetExecutionStateChanges:input_type -> loop.internal.pb.ccip.GetExecutionStateChangesRequest
	6,  // 19: loop.internal.pb.ccip.OffRampReader.GetTookenPoolRateLimits:input_type -> loop.internal.pb.ccip.GetTokenPoolRateLimitsRequest
	34, // 20: loop.internal.pb.ccip.OffRampReader.Address:input_type -> google.protobuf.Empty
	9,  // 21: loop.internal.pb.ccip.OffRampReader.ChangeConfig:input_type -> loop.internal.pb.ccip.ChangeConfigRequest
	34, // 22: loop.internal.pb.ccip.OffRampReader.OffchainConfig:input_type -> google.protobuf.Empty
	34, // 23: loop.internal.pb.ccip.OffRampReader.OnchainConfig:input_type -> google.protobuf.Empty
	34, // 24: loop.internal.pb.ccip.OffRampReader.GasPriceEstimator:input_type -> google.protobuf.Empty
	14, // 25: loop.internal.pb.ccip.OffRampReader.GetSenderNonce:input_type -> loop.internal.pb.ccip.GetSenderNonceRequest
	34, // 26: loop.internal.pb.ccip.OffRampReader.CurrentRateLimiterState:input_type -> google.protobuf.Empty
	17, // 27: loop.internal.pb.ccip.OffRampReader.GetExecutionState:input_type -> loop.internal.pb.ccip.GetExecutionStateRequest
	34, // 28: loop.internal.pb.ccip.OffRampReader.GetStaticConfig:input_type -> google.protobuf.Empty
	34, // 29: loop.internal.pb.ccip.OffRampReader.GetSourceToDestTokenMapping:input_type -> google.protobuf.Empty
	34, // 30: loop.internal.pb.ccip.OffRampReader.GetTokens:input_type -> google.protobuf.Empty
	1,  // 31: loop.internal.pb.ccip.OffRampReader.EncodeExecutionReport:output_type -> loop.internal.pb.ccip.EncodeExecutionReportResponse
	3,  // 32: loop.internal.pb.ccip.OffRampReader.DecodeExecutionReport:output_type -> loop.internal.pb.ccip.DecodeExecutionReportResponse
	5,  // 33: loop.internal.pb.ccip.OffRampReader.GetExecutionStateChanges:output_type -> loop.internal.pb.ccip.GetExecutionStateChangesResponse
	7,  // 34: loop.internal.pb.ccip.OffRampReader.GetTookenPoolRateLimits:output_type -> loop.internal.pb.ccip.GetTokenPoolRateLimitsResponse
	8,  // 35: loop.internal.pb.ccip.OffRampReader.Address:output_type -> loop.internal.pb.ccip.OffRampAddressResponse
	10, // 36: loop.internal.pb.ccip.OffRampReader.ChangeConfig:output_type -> loop.internal.pb.ccip.ChangeConfigResponse
	11, // 37: loop.internal.pb.ccip.OffRampReader.OffchainConfig:output_type -> loop.internal.pb.ccip.OffchainConfigResponse
	12, // 38: loop.internal.pb.ccip.OffRampReader.OnchainConfig:output_type -> loop.internal.pb.ccip.OnchainConfigResponse
	13, // 39: loop.internal.pb.ccip.OffRampReader.GasPriceEstimator:output_type -> loop.internal.pb.ccip.GasPriceEstimatorResponse
	15, // 40: loop.internal.pb.ccip.OffRampReader.GetSenderNonce:output_type -> loop.internal.pb.ccip.GetSenderNonceResponse
	16, // 41: loop.internal.pb.ccip.OffRampReader.CurrentRateLimiterState:output_type -> loop.internal.pb.ccip.CurrentRateLimiterStateResponse
	18, // 42: loop.internal.pb.ccip.OffRampReader.GetExecutionState:output_type -> loop.internal.pb.ccip.GetExecutionStateResponse
	19, // 43: loop.internal.pb.ccip.OffRampReader.GetStaticConfig:output_type -> loop.internal.pb.ccip.GetStaticConfigResponse
	20, // 44: loop.internal.pb.ccip.OffRampReader.GetSourceToDestTokenMapping:output_type -> loop.internal.pb.ccip.GetSourceToDestTokenMappingResponse
	21, // 45: loop.internal.pb.ccip.OffRampReader.GetTokens:output_type -> loop.internal.pb.ccip.GetTokensResponse
	31, // [31:46] is the sub-list for method output_type
	16, // [16:31] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_offramp_proto_init() }
func file_offramp_proto_init() {
	if File_offramp_proto != nil {
		return
	}
	file_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_offramp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeExecutionReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeExecutionReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeExecutionReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeExecutionReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecutionStateChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecutionStateChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenPoolRateLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenPoolRateLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffRampAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffchainConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnchainConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasPriceEstimatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSenderNonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSenderNonceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentRateLimiterStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecutionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecutionStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaticConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourceToDestTokenMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStateChangeWithTxMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecOffchainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecOnchainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffRampStaticConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offramp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffRampTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offramp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_offramp_proto_goTypes,
		DependencyIndexes: file_offramp_proto_depIdxs,
		MessageInfos:      file_offramp_proto_msgTypes,
	}.Build()
	File_offramp_proto = out.File
	file_offramp_proto_rawDesc = nil
	file_offramp_proto_goTypes = nil
	file_offramp_proto_depIdxs = nil
}
