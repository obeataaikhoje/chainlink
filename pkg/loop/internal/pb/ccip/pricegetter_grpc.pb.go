// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pricegetter.proto

package ccippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PriceGetter_TokenPricesUSD_FullMethodName    = "/loop.internal.pb.ccip.PriceGetter/TokenPricesUSD"
	PriceGetter_IsTokenConfigured_FullMethodName = "/loop.internal.pb.ccip.PriceGetter/IsTokenConfigured"
	PriceGetter_Close_FullMethodName             = "/loop.internal.pb.ccip.PriceGetter/Close"
)

// PriceGetterClient is the client API for PriceGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceGetterClient interface {
	TokenPricesUSD(ctx context.Context, in *TokenPricesRequest, opts ...grpc.CallOption) (*TokenPricesResponse, error)
	IsTokenConfigured(ctx context.Context, in *TokenConfiguredRequest, opts ...grpc.CallOption) (*TokenConfiguredResponse, error)
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type priceGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceGetterClient(cc grpc.ClientConnInterface) PriceGetterClient {
	return &priceGetterClient{cc}
}

func (c *priceGetterClient) TokenPricesUSD(ctx context.Context, in *TokenPricesRequest, opts ...grpc.CallOption) (*TokenPricesResponse, error) {
	out := new(TokenPricesResponse)
	err := c.cc.Invoke(ctx, PriceGetter_TokenPricesUSD_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceGetterClient) IsTokenConfigured(ctx context.Context, in *TokenConfiguredRequest, opts ...grpc.CallOption) (*TokenConfiguredResponse, error) {
	out := new(TokenConfiguredResponse)
	err := c.cc.Invoke(ctx, PriceGetter_IsTokenConfigured_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceGetterClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PriceGetter_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceGetterServer is the server API for PriceGetter service.
// All implementations must embed UnimplementedPriceGetterServer
// for forward compatibility
type PriceGetterServer interface {
	TokenPricesUSD(context.Context, *TokenPricesRequest) (*TokenPricesResponse, error)
	IsTokenConfigured(context.Context, *TokenConfiguredRequest) (*TokenConfiguredResponse, error)
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedPriceGetterServer()
}

// UnimplementedPriceGetterServer must be embedded to have forward compatible implementations.
type UnimplementedPriceGetterServer struct {
}

func (UnimplementedPriceGetterServer) TokenPricesUSD(context.Context, *TokenPricesRequest) (*TokenPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPricesUSD not implemented")
}
func (UnimplementedPriceGetterServer) IsTokenConfigured(context.Context, *TokenConfiguredRequest) (*TokenConfiguredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTokenConfigured not implemented")
}
func (UnimplementedPriceGetterServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedPriceGetterServer) mustEmbedUnimplementedPriceGetterServer() {}

// UnsafePriceGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceGetterServer will
// result in compilation errors.
type UnsafePriceGetterServer interface {
	mustEmbedUnimplementedPriceGetterServer()
}

func RegisterPriceGetterServer(s grpc.ServiceRegistrar, srv PriceGetterServer) {
	s.RegisterService(&PriceGetter_ServiceDesc, srv)
}

func _PriceGetter_TokenPricesUSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceGetterServer).TokenPricesUSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceGetter_TokenPricesUSD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceGetterServer).TokenPricesUSD(ctx, req.(*TokenPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceGetter_IsTokenConfigured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenConfiguredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceGetterServer).IsTokenConfigured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceGetter_IsTokenConfigured_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceGetterServer).IsTokenConfigured(ctx, req.(*TokenConfiguredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceGetter_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceGetterServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceGetter_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceGetterServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceGetter_ServiceDesc is the grpc.ServiceDesc for PriceGetter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceGetter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.PriceGetter",
	HandlerType: (*PriceGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenPricesUSD",
			Handler:    _PriceGetter_TokenPricesUSD_Handler,
		},
		{
			MethodName: "IsTokenConfigured",
			Handler:    _PriceGetter_IsTokenConfigured_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _PriceGetter_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pricegetter.proto",
}
