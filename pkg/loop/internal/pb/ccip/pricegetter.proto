syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/ccip;ccippb";


package loop.internal.pb.ccip;
import "relayer.proto";
import "google/protobuf/empty.proto";


// PriceGetter is a service that returns the price of a token in USD. It is a gRPC service adapter for the interface
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/PriceGetter]
service PriceGetter {
    rpc IsTokenConfigured(TokenConfiguredRequest) returns (TokenConfiguredResponse) {}
    rpc TokenPricesUSD(TokenPricesRequest) returns (TokenPricesResponse) {}
    rpc Close(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

// TokenConfiguredRequest is a request for if a token address is configured to be able to get a price. It is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/PriceGetter.IsTokenConfigured]]
message TokenConfiguredRequest {
    string token = 1; // Address
}

// TokenConfiguredResponse is a response for if a token address is configured to be able to get a price. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/PriceGetter.IsTokenConfigured]]
message TokenConfiguredResponse {
    bool isConfigured = 1; // bool
}

// TokenPricesRequest is a request for the price of a token in USD. It is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/PriceGetter.TokenPricesUSD]]
message TokenPricesRequest {
    repeated string tokens = 1; // []Address
}

// TokenPricesResponse is a response for the price of a token in USD. It is a gRPC adapter for the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader]
message TokenPricesResponse {
    map<string, BigInt> prices = 1; // map[Address]price
}
