// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: contract_transmitter.proto

package ocr3pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContractTransmitter_Transmit_FullMethodName    = "/loop.internal.pb.ocr3.ContractTransmitter/Transmit"
	ContractTransmitter_FromAccount_FullMethodName = "/loop.internal.pb.ocr3.ContractTransmitter/FromAccount"
)

// ContractTransmitterClient is the client API for ContractTransmitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractTransmitterClient interface {
	Transmit(ctx context.Context, in *TransmitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FromAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FromAccountReply, error)
}

type contractTransmitterClient struct {
	cc grpc.ClientConnInterface
}

func NewContractTransmitterClient(cc grpc.ClientConnInterface) ContractTransmitterClient {
	return &contractTransmitterClient{cc}
}

func (c *contractTransmitterClient) Transmit(ctx context.Context, in *TransmitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ContractTransmitter_Transmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractTransmitterClient) FromAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FromAccountReply, error) {
	out := new(FromAccountReply)
	err := c.cc.Invoke(ctx, ContractTransmitter_FromAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractTransmitterServer is the server API for ContractTransmitter service.
// All implementations must embed UnimplementedContractTransmitterServer
// for forward compatibility
type ContractTransmitterServer interface {
	Transmit(context.Context, *TransmitRequest) (*emptypb.Empty, error)
	FromAccount(context.Context, *emptypb.Empty) (*FromAccountReply, error)
	mustEmbedUnimplementedContractTransmitterServer()
}

// UnimplementedContractTransmitterServer must be embedded to have forward compatible implementations.
type UnimplementedContractTransmitterServer struct {
}

func (UnimplementedContractTransmitterServer) Transmit(context.Context, *TransmitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedContractTransmitterServer) FromAccount(context.Context, *emptypb.Empty) (*FromAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FromAccount not implemented")
}
func (UnimplementedContractTransmitterServer) mustEmbedUnimplementedContractTransmitterServer() {}

// UnsafeContractTransmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractTransmitterServer will
// result in compilation errors.
type UnsafeContractTransmitterServer interface {
	mustEmbedUnimplementedContractTransmitterServer()
}

func RegisterContractTransmitterServer(s grpc.ServiceRegistrar, srv ContractTransmitterServer) {
	s.RegisterService(&ContractTransmitter_ServiceDesc, srv)
}

func _ContractTransmitter_Transmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractTransmitterServer).Transmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractTransmitter_Transmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractTransmitterServer).Transmit(ctx, req.(*TransmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractTransmitter_FromAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractTransmitterServer).FromAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractTransmitter_FromAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractTransmitterServer).FromAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractTransmitter_ServiceDesc is the grpc.ServiceDesc for ContractTransmitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractTransmitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ocr3.ContractTransmitter",
	HandlerType: (*ContractTransmitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transmit",
			Handler:    _ContractTransmitter_Transmit_Handler,
		},
		{
			MethodName: "FromAccount",
			Handler:    _ContractTransmitter_FromAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract_transmitter.proto",
}
