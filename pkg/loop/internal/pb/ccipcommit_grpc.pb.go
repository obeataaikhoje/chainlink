// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ccipcommit.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PluginCCIPCommit_NewCCIPCommitFactory_FullMethodName = "/loop.PluginCCIPCommit/NewCCIPCommitFactory"
)

// PluginCCIPCommitClient is the client API for PluginCCIPCommit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginCCIPCommitClient interface {
	NewCCIPCommitFactory(ctx context.Context, in *NewCCIPCommitFactoryRequest, opts ...grpc.CallOption) (*NewCCIPCommitFactoryReply, error)
}

type pluginCCIPCommitClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginCCIPCommitClient(cc grpc.ClientConnInterface) PluginCCIPCommitClient {
	return &pluginCCIPCommitClient{cc}
}

func (c *pluginCCIPCommitClient) NewCCIPCommitFactory(ctx context.Context, in *NewCCIPCommitFactoryRequest, opts ...grpc.CallOption) (*NewCCIPCommitFactoryReply, error) {
	out := new(NewCCIPCommitFactoryReply)
	err := c.cc.Invoke(ctx, PluginCCIPCommit_NewCCIPCommitFactory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginCCIPCommitServer is the server API for PluginCCIPCommit service.
// All implementations must embed UnimplementedPluginCCIPCommitServer
// for forward compatibility
type PluginCCIPCommitServer interface {
	NewCCIPCommitFactory(context.Context, *NewCCIPCommitFactoryRequest) (*NewCCIPCommitFactoryReply, error)
	mustEmbedUnimplementedPluginCCIPCommitServer()
}

// UnimplementedPluginCCIPCommitServer must be embedded to have forward compatible implementations.
type UnimplementedPluginCCIPCommitServer struct {
}

func (UnimplementedPluginCCIPCommitServer) NewCCIPCommitFactory(context.Context, *NewCCIPCommitFactoryRequest) (*NewCCIPCommitFactoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCCIPCommitFactory not implemented")
}
func (UnimplementedPluginCCIPCommitServer) mustEmbedUnimplementedPluginCCIPCommitServer() {}

// UnsafePluginCCIPCommitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginCCIPCommitServer will
// result in compilation errors.
type UnsafePluginCCIPCommitServer interface {
	mustEmbedUnimplementedPluginCCIPCommitServer()
}

func RegisterPluginCCIPCommitServer(s grpc.ServiceRegistrar, srv PluginCCIPCommitServer) {
	s.RegisterService(&PluginCCIPCommit_ServiceDesc, srv)
}

func _PluginCCIPCommit_NewCCIPCommitFactory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCCIPCommitFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCCIPCommitServer).NewCCIPCommitFactory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginCCIPCommit_NewCCIPCommitFactory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCCIPCommitServer).NewCCIPCommitFactory(ctx, req.(*NewCCIPCommitFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginCCIPCommit_ServiceDesc is the grpc.ServiceDesc for PluginCCIPCommit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginCCIPCommit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.PluginCCIPCommit",
	HandlerType: (*PluginCCIPCommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCCIPCommitFactory",
			Handler:    _PluginCCIPCommit_NewCCIPCommitFactory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ccipcommit.proto",
}
