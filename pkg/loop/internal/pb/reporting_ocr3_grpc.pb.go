// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: reporting_ocr3.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OCR3ReportingPluginFactory_NewReportingPlugin_FullMethodName = "/loop.OCR3ReportingPluginFactory/NewReportingPlugin"
)

// OCR3ReportingPluginFactoryClient is the client API for OCR3ReportingPluginFactory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OCR3ReportingPluginFactoryClient interface {
	NewReportingPlugin(ctx context.Context, in *OCR3NewReportingPluginRequest, opts ...grpc.CallOption) (*OCR3NewReportingPluginReply, error)
}

type oCR3ReportingPluginFactoryClient struct {
	cc grpc.ClientConnInterface
}

func NewOCR3ReportingPluginFactoryClient(cc grpc.ClientConnInterface) OCR3ReportingPluginFactoryClient {
	return &oCR3ReportingPluginFactoryClient{cc}
}

func (c *oCR3ReportingPluginFactoryClient) NewReportingPlugin(ctx context.Context, in *OCR3NewReportingPluginRequest, opts ...grpc.CallOption) (*OCR3NewReportingPluginReply, error) {
	out := new(OCR3NewReportingPluginReply)
	err := c.cc.Invoke(ctx, OCR3ReportingPluginFactory_NewReportingPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OCR3ReportingPluginFactoryServer is the server API for OCR3ReportingPluginFactory service.
// All implementations must embed UnimplementedOCR3ReportingPluginFactoryServer
// for forward compatibility
type OCR3ReportingPluginFactoryServer interface {
	NewReportingPlugin(context.Context, *OCR3NewReportingPluginRequest) (*OCR3NewReportingPluginReply, error)
	mustEmbedUnimplementedOCR3ReportingPluginFactoryServer()
}

// UnimplementedOCR3ReportingPluginFactoryServer must be embedded to have forward compatible implementations.
type UnimplementedOCR3ReportingPluginFactoryServer struct {
}

func (UnimplementedOCR3ReportingPluginFactoryServer) NewReportingPlugin(context.Context, *OCR3NewReportingPluginRequest) (*OCR3NewReportingPluginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewReportingPlugin not implemented")
}
func (UnimplementedOCR3ReportingPluginFactoryServer) mustEmbedUnimplementedOCR3ReportingPluginFactoryServer() {
}

// UnsafeOCR3ReportingPluginFactoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OCR3ReportingPluginFactoryServer will
// result in compilation errors.
type UnsafeOCR3ReportingPluginFactoryServer interface {
	mustEmbedUnimplementedOCR3ReportingPluginFactoryServer()
}

func RegisterOCR3ReportingPluginFactoryServer(s grpc.ServiceRegistrar, srv OCR3ReportingPluginFactoryServer) {
	s.RegisterService(&OCR3ReportingPluginFactory_ServiceDesc, srv)
}

func _OCR3ReportingPluginFactory_NewReportingPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3NewReportingPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginFactoryServer).NewReportingPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPluginFactory_NewReportingPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginFactoryServer).NewReportingPlugin(ctx, req.(*OCR3NewReportingPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OCR3ReportingPluginFactory_ServiceDesc is the grpc.ServiceDesc for OCR3ReportingPluginFactory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCR3ReportingPluginFactory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.OCR3ReportingPluginFactory",
	HandlerType: (*OCR3ReportingPluginFactoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewReportingPlugin",
			Handler:    _OCR3ReportingPluginFactory_NewReportingPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporting_ocr3.proto",
}

const (
	OCR3ReportingPlugin_Query_FullMethodName                        = "/loop.OCR3ReportingPlugin/Query"
	OCR3ReportingPlugin_Observation_FullMethodName                  = "/loop.OCR3ReportingPlugin/Observation"
	OCR3ReportingPlugin_ValidateObservation_FullMethodName          = "/loop.OCR3ReportingPlugin/ValidateObservation"
	OCR3ReportingPlugin_ObservationQuorum_FullMethodName            = "/loop.OCR3ReportingPlugin/ObservationQuorum"
	OCR3ReportingPlugin_Outcome_FullMethodName                      = "/loop.OCR3ReportingPlugin/Outcome"
	OCR3ReportingPlugin_Reports_FullMethodName                      = "/loop.OCR3ReportingPlugin/Reports"
	OCR3ReportingPlugin_ShouldAcceptAttestedReport_FullMethodName   = "/loop.OCR3ReportingPlugin/ShouldAcceptAttestedReport"
	OCR3ReportingPlugin_ShouldTransmitAcceptedReport_FullMethodName = "/loop.OCR3ReportingPlugin/ShouldTransmitAcceptedReport"
	OCR3ReportingPlugin_Close_FullMethodName                        = "/loop.OCR3ReportingPlugin/Close"
)

// OCR3ReportingPluginClient is the client API for OCR3ReportingPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OCR3ReportingPluginClient interface {
	Query(ctx context.Context, in *OCR3QueryRequest, opts ...grpc.CallOption) (*OCR3QueryReply, error)
	Observation(ctx context.Context, in *OCR3ObservationRequest, opts ...grpc.CallOption) (*OCR3ObservationReply, error)
	ValidateObservation(ctx context.Context, in *OCR3ValidateObservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObservationQuorum(ctx context.Context, in *OCR3ObservationQuorumRequest, opts ...grpc.CallOption) (*OCR3ObservationQuorumReply, error)
	Outcome(ctx context.Context, in *OCR3OutcomeRequest, opts ...grpc.CallOption) (*OCR3OutcomeReply, error)
	Reports(ctx context.Context, in *OCR3ReportsRequest, opts ...grpc.CallOption) (*OCR3ReportsReply, error)
	ShouldAcceptAttestedReport(ctx context.Context, in *OCR3ShouldAcceptAttestedReportRequest, opts ...grpc.CallOption) (*OCR3ShouldAcceptAttestedReportReply, error)
	ShouldTransmitAcceptedReport(ctx context.Context, in *OCR3ShouldTransmitAcceptedReportRequest, opts ...grpc.CallOption) (*OCR3ShouldTransmitAcceptedReportReply, error)
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oCR3ReportingPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewOCR3ReportingPluginClient(cc grpc.ClientConnInterface) OCR3ReportingPluginClient {
	return &oCR3ReportingPluginClient{cc}
}

func (c *oCR3ReportingPluginClient) Query(ctx context.Context, in *OCR3QueryRequest, opts ...grpc.CallOption) (*OCR3QueryReply, error) {
	out := new(OCR3QueryReply)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCR3ReportingPluginClient) Observation(ctx context.Context, in *OCR3ObservationRequest, opts ...grpc.CallOption) (*OCR3ObservationReply, error) {
	out := new(OCR3ObservationReply)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_Observation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCR3ReportingPluginClient) ValidateObservation(ctx context.Context, in *OCR3ValidateObservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_ValidateObservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCR3ReportingPluginClient) ObservationQuorum(ctx context.Context, in *OCR3ObservationQuorumRequest, opts ...grpc.CallOption) (*OCR3ObservationQuorumReply, error) {
	out := new(OCR3ObservationQuorumReply)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_ObservationQuorum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCR3ReportingPluginClient) Outcome(ctx context.Context, in *OCR3OutcomeRequest, opts ...grpc.CallOption) (*OCR3OutcomeReply, error) {
	out := new(OCR3OutcomeReply)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_Outcome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCR3ReportingPluginClient) Reports(ctx context.Context, in *OCR3ReportsRequest, opts ...grpc.CallOption) (*OCR3ReportsReply, error) {
	out := new(OCR3ReportsReply)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_Reports_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCR3ReportingPluginClient) ShouldAcceptAttestedReport(ctx context.Context, in *OCR3ShouldAcceptAttestedReportRequest, opts ...grpc.CallOption) (*OCR3ShouldAcceptAttestedReportReply, error) {
	out := new(OCR3ShouldAcceptAttestedReportReply)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_ShouldAcceptAttestedReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCR3ReportingPluginClient) ShouldTransmitAcceptedReport(ctx context.Context, in *OCR3ShouldTransmitAcceptedReportRequest, opts ...grpc.CallOption) (*OCR3ShouldTransmitAcceptedReportReply, error) {
	out := new(OCR3ShouldTransmitAcceptedReportReply)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_ShouldTransmitAcceptedReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCR3ReportingPluginClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OCR3ReportingPlugin_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OCR3ReportingPluginServer is the server API for OCR3ReportingPlugin service.
// All implementations must embed UnimplementedOCR3ReportingPluginServer
// for forward compatibility
type OCR3ReportingPluginServer interface {
	Query(context.Context, *OCR3QueryRequest) (*OCR3QueryReply, error)
	Observation(context.Context, *OCR3ObservationRequest) (*OCR3ObservationReply, error)
	ValidateObservation(context.Context, *OCR3ValidateObservationRequest) (*emptypb.Empty, error)
	ObservationQuorum(context.Context, *OCR3ObservationQuorumRequest) (*OCR3ObservationQuorumReply, error)
	Outcome(context.Context, *OCR3OutcomeRequest) (*OCR3OutcomeReply, error)
	Reports(context.Context, *OCR3ReportsRequest) (*OCR3ReportsReply, error)
	ShouldAcceptAttestedReport(context.Context, *OCR3ShouldAcceptAttestedReportRequest) (*OCR3ShouldAcceptAttestedReportReply, error)
	ShouldTransmitAcceptedReport(context.Context, *OCR3ShouldTransmitAcceptedReportRequest) (*OCR3ShouldTransmitAcceptedReportReply, error)
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedOCR3ReportingPluginServer()
}

// UnimplementedOCR3ReportingPluginServer must be embedded to have forward compatible implementations.
type UnimplementedOCR3ReportingPluginServer struct {
}

func (UnimplementedOCR3ReportingPluginServer) Query(context.Context, *OCR3QueryRequest) (*OCR3QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) Observation(context.Context, *OCR3ObservationRequest) (*OCR3ObservationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observation not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) ValidateObservation(context.Context, *OCR3ValidateObservationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateObservation not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) ObservationQuorum(context.Context, *OCR3ObservationQuorumRequest) (*OCR3ObservationQuorumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObservationQuorum not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) Outcome(context.Context, *OCR3OutcomeRequest) (*OCR3OutcomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Outcome not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) Reports(context.Context, *OCR3ReportsRequest) (*OCR3ReportsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reports not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) ShouldAcceptAttestedReport(context.Context, *OCR3ShouldAcceptAttestedReportRequest) (*OCR3ShouldAcceptAttestedReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldAcceptAttestedReport not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) ShouldTransmitAcceptedReport(context.Context, *OCR3ShouldTransmitAcceptedReportRequest) (*OCR3ShouldTransmitAcceptedReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldTransmitAcceptedReport not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedOCR3ReportingPluginServer) mustEmbedUnimplementedOCR3ReportingPluginServer() {}

// UnsafeOCR3ReportingPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OCR3ReportingPluginServer will
// result in compilation errors.
type UnsafeOCR3ReportingPluginServer interface {
	mustEmbedUnimplementedOCR3ReportingPluginServer()
}

func RegisterOCR3ReportingPluginServer(s grpc.ServiceRegistrar, srv OCR3ReportingPluginServer) {
	s.RegisterService(&OCR3ReportingPlugin_ServiceDesc, srv)
}

func _OCR3ReportingPlugin_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).Query(ctx, req.(*OCR3QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCR3ReportingPlugin_Observation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3ObservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).Observation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_Observation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).Observation(ctx, req.(*OCR3ObservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCR3ReportingPlugin_ValidateObservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3ValidateObservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).ValidateObservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_ValidateObservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).ValidateObservation(ctx, req.(*OCR3ValidateObservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCR3ReportingPlugin_ObservationQuorum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3ObservationQuorumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).ObservationQuorum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_ObservationQuorum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).ObservationQuorum(ctx, req.(*OCR3ObservationQuorumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCR3ReportingPlugin_Outcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3OutcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).Outcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_Outcome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).Outcome(ctx, req.(*OCR3OutcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCR3ReportingPlugin_Reports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3ReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).Reports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_Reports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).Reports(ctx, req.(*OCR3ReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCR3ReportingPlugin_ShouldAcceptAttestedReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3ShouldAcceptAttestedReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).ShouldAcceptAttestedReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_ShouldAcceptAttestedReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).ShouldAcceptAttestedReport(ctx, req.(*OCR3ShouldAcceptAttestedReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCR3ReportingPlugin_ShouldTransmitAcceptedReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCR3ShouldTransmitAcceptedReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).ShouldTransmitAcceptedReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_ShouldTransmitAcceptedReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).ShouldTransmitAcceptedReport(ctx, req.(*OCR3ShouldTransmitAcceptedReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCR3ReportingPlugin_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCR3ReportingPluginServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCR3ReportingPlugin_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCR3ReportingPluginServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OCR3ReportingPlugin_ServiceDesc is the grpc.ServiceDesc for OCR3ReportingPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCR3ReportingPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.OCR3ReportingPlugin",
	HandlerType: (*OCR3ReportingPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _OCR3ReportingPlugin_Query_Handler,
		},
		{
			MethodName: "Observation",
			Handler:    _OCR3ReportingPlugin_Observation_Handler,
		},
		{
			MethodName: "ValidateObservation",
			Handler:    _OCR3ReportingPlugin_ValidateObservation_Handler,
		},
		{
			MethodName: "ObservationQuorum",
			Handler:    _OCR3ReportingPlugin_ObservationQuorum_Handler,
		},
		{
			MethodName: "Outcome",
			Handler:    _OCR3ReportingPlugin_Outcome_Handler,
		},
		{
			MethodName: "Reports",
			Handler:    _OCR3ReportingPlugin_Reports_Handler,
		},
		{
			MethodName: "ShouldAcceptAttestedReport",
			Handler:    _OCR3ReportingPlugin_ShouldAcceptAttestedReport_Handler,
		},
		{
			MethodName: "ShouldTransmitAcceptedReport",
			Handler:    _OCR3ReportingPlugin_ShouldTransmitAcceptedReport_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _OCR3ReportingPlugin_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporting_ocr3.proto",
}
