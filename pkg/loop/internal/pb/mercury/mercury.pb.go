// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: mercury.proto

// the generate file in this dir specifies the import path of the relative proto files
// TODO: is there a better, more explicit to reference relayer.proto, which is really in the parent dir?
// naive attempt: import "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/relayer.proto"; and `../relayer.proto` did not work

package mercury_pb

import (
	pb "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NewMecuryFactoryRequest has arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/NewFactory].
type NewMecuryV3FactoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryProviderID  uint32 `protobuf:"varint,1,opt,name=mercuryProviderID,proto3" json:"mercuryProviderID,omitempty"`
	DataSourceV3ID     uint32 `protobuf:"varint,2,opt,name=dataSourceV3ID,proto3" json:"dataSourceV3ID,omitempty"` // id of the data source server for this factory instance
	OnChainConfigID    uint32 `protobuf:"varint,3,opt,name=onChainConfigID,proto3" json:"onChainConfigID,omitempty"`
	ReportingCodecV3ID uint32 `protobuf:"varint,4,opt,name=reportingCodecV3ID,proto3" json:"reportingCodecV3ID,omitempty"`
	LoggerID           uint32 `protobuf:"varint,5,opt,name=loggerID,proto3" json:"loggerID,omitempty"` // TODO: how to get a logger to the factory? is this analogous to the errorLogID in the median? i would think not...
}

func (x *NewMecuryV3FactoryRequest) Reset() {
	*x = NewMecuryV3FactoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMecuryV3FactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMecuryV3FactoryRequest) ProtoMessage() {}

func (x *NewMecuryV3FactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMecuryV3FactoryRequest.ProtoReflect.Descriptor instead.
func (*NewMecuryV3FactoryRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{0}
}

func (x *NewMecuryV3FactoryRequest) GetMercuryProviderID() uint32 {
	if x != nil {
		return x.MercuryProviderID
	}
	return 0
}

func (x *NewMecuryV3FactoryRequest) GetDataSourceV3ID() uint32 {
	if x != nil {
		return x.DataSourceV3ID
	}
	return 0
}

func (x *NewMecuryV3FactoryRequest) GetOnChainConfigID() uint32 {
	if x != nil {
		return x.OnChainConfigID
	}
	return 0
}

func (x *NewMecuryV3FactoryRequest) GetReportingCodecV3ID() uint32 {
	if x != nil {
		return x.ReportingCodecV3ID
	}
	return 0
}

func (x *NewMecuryV3FactoryRequest) GetLoggerID() uint32 {
	if x != nil {
		return x.LoggerID
	}
	return 0
}

// NewMedianFactoryRequest has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/loop.Relayer.NewMedianFactory].
type NewMecuryV3FactoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryV3FactoryID uint32 `protobuf:"varint,1,opt,name=mercuryV3FactoryID,proto3" json:"mercuryV3FactoryID,omitempty"`
}

func (x *NewMecuryV3FactoryReply) Reset() {
	*x = NewMecuryV3FactoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMecuryV3FactoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMecuryV3FactoryReply) ProtoMessage() {}

func (x *NewMecuryV3FactoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMecuryV3FactoryReply.ProtoReflect.Descriptor instead.
func (*NewMecuryV3FactoryReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{1}
}

func (x *NewMecuryV3FactoryReply) GetMercuryV3FactoryID() uint32 {
	if x != nil {
		return x.MercuryV3FactoryID
	}
	return 0
}

type NewMecuryV1FactoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryProviderID  uint32 `protobuf:"varint,1,opt,name=mercuryProviderID,proto3" json:"mercuryProviderID,omitempty"`
	DataSourceV1ID     uint32 `protobuf:"varint,2,opt,name=dataSourceV1ID,proto3" json:"dataSourceV1ID,omitempty"` // id of the data source server for this factory instance
	OnChainConfigID    uint32 `protobuf:"varint,3,opt,name=onChainConfigID,proto3" json:"onChainConfigID,omitempty"`
	ReportingCodecV1ID uint32 `protobuf:"varint,4,opt,name=reportingCodecV1ID,proto3" json:"reportingCodecV1ID,omitempty"`
	LoggerID           uint32 `protobuf:"varint,5,opt,name=loggerID,proto3" json:"loggerID,omitempty"` // TODO: how to get a logger to the factory? is this analogous to the errorLogID in the median? i would think not...
}

func (x *NewMecuryV1FactoryRequest) Reset() {
	*x = NewMecuryV1FactoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMecuryV1FactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMecuryV1FactoryRequest) ProtoMessage() {}

func (x *NewMecuryV1FactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMecuryV1FactoryRequest.ProtoReflect.Descriptor instead.
func (*NewMecuryV1FactoryRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{2}
}

func (x *NewMecuryV1FactoryRequest) GetMercuryProviderID() uint32 {
	if x != nil {
		return x.MercuryProviderID
	}
	return 0
}

func (x *NewMecuryV1FactoryRequest) GetDataSourceV1ID() uint32 {
	if x != nil {
		return x.DataSourceV1ID
	}
	return 0
}

func (x *NewMecuryV1FactoryRequest) GetOnChainConfigID() uint32 {
	if x != nil {
		return x.OnChainConfigID
	}
	return 0
}

func (x *NewMecuryV1FactoryRequest) GetReportingCodecV1ID() uint32 {
	if x != nil {
		return x.ReportingCodecV1ID
	}
	return 0
}

func (x *NewMecuryV1FactoryRequest) GetLoggerID() uint32 {
	if x != nil {
		return x.LoggerID
	}
	return 0
}

// NewMedianFactoryRequest has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/loop.Relayer.NewMedianFactory].
type NewMecuryV1FactoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryV1FactoryID uint32 `protobuf:"varint,1,opt,name=mercuryV1FactoryID,proto3" json:"mercuryV1FactoryID,omitempty"`
}

func (x *NewMecuryV1FactoryReply) Reset() {
	*x = NewMecuryV1FactoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMecuryV1FactoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMecuryV1FactoryReply) ProtoMessage() {}

func (x *NewMecuryV1FactoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMecuryV1FactoryReply.ProtoReflect.Descriptor instead.
func (*NewMecuryV1FactoryReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{3}
}

func (x *NewMecuryV1FactoryReply) GetMercuryV1FactoryID() uint32 {
	if x != nil {
		return x.MercuryV1FactoryID
	}
	return 0
}

type NewMecuryV2FactoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryProviderID  uint32 `protobuf:"varint,1,opt,name=mercuryProviderID,proto3" json:"mercuryProviderID,omitempty"`
	DataSourceV2ID     uint32 `protobuf:"varint,2,opt,name=dataSourceV2ID,proto3" json:"dataSourceV2ID,omitempty"` // id of the data source server for this factory instance
	OnChainConfigID    uint32 `protobuf:"varint,3,opt,name=onChainConfigID,proto3" json:"onChainConfigID,omitempty"`
	ReportingCodecV2ID uint32 `protobuf:"varint,4,opt,name=reportingCodecV2ID,proto3" json:"reportingCodecV2ID,omitempty"`
	LoggerID           uint32 `protobuf:"varint,5,opt,name=loggerID,proto3" json:"loggerID,omitempty"` // TODO: how to get a logger to the factory? is this analogous to the errorLogID in the median? i would think not...
}

func (x *NewMecuryV2FactoryRequest) Reset() {
	*x = NewMecuryV2FactoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMecuryV2FactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMecuryV2FactoryRequest) ProtoMessage() {}

func (x *NewMecuryV2FactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMecuryV2FactoryRequest.ProtoReflect.Descriptor instead.
func (*NewMecuryV2FactoryRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{4}
}

func (x *NewMecuryV2FactoryRequest) GetMercuryProviderID() uint32 {
	if x != nil {
		return x.MercuryProviderID
	}
	return 0
}

func (x *NewMecuryV2FactoryRequest) GetDataSourceV2ID() uint32 {
	if x != nil {
		return x.DataSourceV2ID
	}
	return 0
}

func (x *NewMecuryV2FactoryRequest) GetOnChainConfigID() uint32 {
	if x != nil {
		return x.OnChainConfigID
	}
	return 0
}

func (x *NewMecuryV2FactoryRequest) GetReportingCodecV2ID() uint32 {
	if x != nil {
		return x.ReportingCodecV2ID
	}
	return 0
}

func (x *NewMecuryV2FactoryRequest) GetLoggerID() uint32 {
	if x != nil {
		return x.LoggerID
	}
	return 0
}

// NewMedianFactoryRequest has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/loop.Relayer.NewMedianFactory].
type NewMecuryV2FactoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryV2FactoryID uint32 `protobuf:"varint,1,opt,name=mercuryV2FactoryID,proto3" json:"mercuryV2FactoryID,omitempty"`
}

func (x *NewMecuryV2FactoryReply) Reset() {
	*x = NewMecuryV2FactoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMecuryV2FactoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMecuryV2FactoryReply) ProtoMessage() {}

func (x *NewMecuryV2FactoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMecuryV2FactoryReply.ProtoReflect.Descriptor instead.
func (*NewMecuryV2FactoryReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{5}
}

func (x *NewMecuryV2FactoryReply) GetMercuryV2FactoryID() uint32 {
	if x != nil {
		return x.MercuryV2FactoryID
	}
	return 0
}

// OnchainConfig is a gRPC adapter for the OnchainConfig struct [pkg/types/mercury/v3/OnchainConfig].
type OnchainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *pb.BigInt `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"` // TODO: WARNING this is a pointer in OnchainConfigCodec
	Max *pb.BigInt `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"` // TODO: WARNING this is a pointer in OnchainConfigCodec
}

func (x *OnchainConfig) Reset() {
	*x = OnchainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnchainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnchainConfig) ProtoMessage() {}

func (x *OnchainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnchainConfig.ProtoReflect.Descriptor instead.
func (*OnchainConfig) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{6}
}

func (x *OnchainConfig) GetMin() *pb.BigInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OnchainConfig) GetMax() *pb.BigInt {
	if x != nil {
		return x.Max
	}
	return nil
}

// EncodeOnchainConfigRequest has arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/OnchainConfigCodec.Encode].
type EncodeOnchainConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig *OnchainConfig `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
}

func (x *EncodeOnchainConfigRequest) Reset() {
	*x = EncodeOnchainConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeOnchainConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeOnchainConfigRequest) ProtoMessage() {}

func (x *EncodeOnchainConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeOnchainConfigRequest.ProtoReflect.Descriptor instead.
func (*EncodeOnchainConfigRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{7}
}

func (x *EncodeOnchainConfigRequest) GetOnchainConfig() *OnchainConfig {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// EncodeOnchainConfigReply has return arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/OnchainConfigCodec.Encode].
type EncodeOnchainConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig []byte `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
}

func (x *EncodeOnchainConfigReply) Reset() {
	*x = EncodeOnchainConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeOnchainConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeOnchainConfigReply) ProtoMessage() {}

func (x *EncodeOnchainConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeOnchainConfigReply.ProtoReflect.Descriptor instead.
func (*EncodeOnchainConfigReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{8}
}

func (x *EncodeOnchainConfigReply) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// DecodeOnchainConfigRequest has arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/OnchainConfigCodec.Decode].
type DecodeOnchainConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig []byte `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
}

func (x *DecodeOnchainConfigRequest) Reset() {
	*x = DecodeOnchainConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeOnchainConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeOnchainConfigRequest) ProtoMessage() {}

func (x *DecodeOnchainConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeOnchainConfigRequest.ProtoReflect.Descriptor instead.
func (*DecodeOnchainConfigRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{9}
}

func (x *DecodeOnchainConfigRequest) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// DecodeOnchainConfigReply has return arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/OnchainConfigCodec.Decode].
type DecodeOnchainConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig *OnchainConfig `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
}

func (x *DecodeOnchainConfigReply) Reset() {
	*x = DecodeOnchainConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeOnchainConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeOnchainConfigReply) ProtoMessage() {}

func (x *DecodeOnchainConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeOnchainConfigReply.ProtoReflect.Descriptor instead.
func (*DecodeOnchainConfigReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{10}
}

func (x *DecodeOnchainConfigReply) GetOnchainConfig() *OnchainConfig {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// ReportFields is a gRPC adapter for the ReportFields struct [pkg/types/mercury/v3/ReportFields].
type ReportFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidFromTimestamp uint32     `protobuf:"varint,1,opt,name=validFromTimestamp,proto3" json:"validFromTimestamp,omitempty"` // TODO: use google.protobuf.Timestamp? uint32 is the base type in ReportFields [pkg/types/mercury/v3/ReportFields]
	Timestamp          uint32     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                   // same as above
	NativeFee          *pb.BigInt `protobuf:"bytes,3,opt,name=nativeFee,proto3" json:"nativeFee,omitempty"`                    // TODO: WARNING this is a pointer in ReportFields
	LinkFee            *pb.BigInt `protobuf:"bytes,4,opt,name=linkFee,proto3" json:"linkFee,omitempty"`                        // TODO: WARNING this is a pointer in ReportFields
	ExpiresAt          uint32     `protobuf:"varint,5,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`                   // TODO: timestamp?
	BenchmarkPrice     *pb.BigInt `protobuf:"bytes,6,opt,name=benchmarkPrice,proto3" json:"benchmarkPrice,omitempty"`          // TODO: WARNING this is a pointer in ReportFields
	Bid                *pb.BigInt `protobuf:"bytes,7,opt,name=bid,proto3" json:"bid,omitempty"`                                // TODO: WARNING this is a pointer in ReportFields
	Ask                *pb.BigInt `protobuf:"bytes,8,opt,name=ask,proto3" json:"ask,omitempty"`                                // TODO: WARNING this is a pointer in ReportFields
}

func (x *ReportFields) Reset() {
	*x = ReportFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFields) ProtoMessage() {}

func (x *ReportFields) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFields.ProtoReflect.Descriptor instead.
func (*ReportFields) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{11}
}

func (x *ReportFields) GetValidFromTimestamp() uint32 {
	if x != nil {
		return x.ValidFromTimestamp
	}
	return 0
}

func (x *ReportFields) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ReportFields) GetNativeFee() *pb.BigInt {
	if x != nil {
		return x.NativeFee
	}
	return nil
}

func (x *ReportFields) GetLinkFee() *pb.BigInt {
	if x != nil {
		return x.LinkFee
	}
	return nil
}

func (x *ReportFields) GetExpiresAt() uint32 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *ReportFields) GetBenchmarkPrice() *pb.BigInt {
	if x != nil {
		return x.BenchmarkPrice
	}
	return nil
}

func (x *ReportFields) GetBid() *pb.BigInt {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *ReportFields) GetAsk() *pb.BigInt {
	if x != nil {
		return x.Ask
	}
	return nil
}

// BuildReportRequest has arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/ReportCodec.BuildReport].
type BuildReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportFields *ReportFields `protobuf:"bytes,1,opt,name=reportFields,proto3" json:"reportFields,omitempty"`
}

func (x *BuildReportRequest) Reset() {
	*x = BuildReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReportRequest) ProtoMessage() {}

func (x *BuildReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReportRequest.ProtoReflect.Descriptor instead.
func (*BuildReportRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{12}
}

func (x *BuildReportRequest) GetReportFields() *ReportFields {
	if x != nil {
		return x.ReportFields
	}
	return nil
}

// BuildReportReply has return arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/ReportCodec.BuildReport].
type BuildReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *BuildReportReply) Reset() {
	*x = BuildReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReportReply) ProtoMessage() {}

func (x *BuildReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReportReply.ProtoReflect.Descriptor instead.
func (*BuildReportReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{13}
}

func (x *BuildReportReply) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// MaxReportLengthRequest has arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/ReportCodec.MaxReportLength].
type MaxReportLengthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOracles uint64 `protobuf:"varint,1,opt,name=numOracles,proto3" json:"numOracles,omitempty"` // TODO: WARNING this is a int in ReportCodec interface
}

func (x *MaxReportLengthRequest) Reset() {
	*x = MaxReportLengthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxReportLengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxReportLengthRequest) ProtoMessage() {}

func (x *MaxReportLengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxReportLengthRequest.ProtoReflect.Descriptor instead.
func (*MaxReportLengthRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{14}
}

func (x *MaxReportLengthRequest) GetNumOracles() uint64 {
	if x != nil {
		return x.NumOracles
	}
	return 0
}

// MaxReportLengthReply has return arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/ReportCodec.MaxReportLength].
type MaxReportLengthReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxReportLength uint64 `protobuf:"varint,1,opt,name=maxReportLength,proto3" json:"maxReportLength,omitempty"` //TODO: WARNING this is a int in ReportCodec interface
}

func (x *MaxReportLengthReply) Reset() {
	*x = MaxReportLengthReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxReportLengthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxReportLengthReply) ProtoMessage() {}

func (x *MaxReportLengthReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxReportLengthReply.ProtoReflect.Descriptor instead.
func (*MaxReportLengthReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{15}
}

func (x *MaxReportLengthReply) GetMaxReportLength() uint64 {
	if x != nil {
		return x.MaxReportLength
	}
	return 0
}

// ObservationTimestampFromReportRequest has arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/ReportCodec.ObservationTimestampFromReport].
type ObservationTimestampFromReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *ObservationTimestampFromReportRequest) Reset() {
	*x = ObservationTimestampFromReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationTimestampFromReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationTimestampFromReportRequest) ProtoMessage() {}

func (x *ObservationTimestampFromReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationTimestampFromReportRequest.ProtoReflect.Descriptor instead.
func (*ObservationTimestampFromReportRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{16}
}

func (x *ObservationTimestampFromReportRequest) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// ObservationTimestampFromReportReply has return arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/ReportCodec.ObservationTimestampFromReport].
type ObservationTimestampFromReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // TODO: WARNING this is a uint32 in ReportCodec interface
}

func (x *ObservationTimestampFromReportReply) Reset() {
	*x = ObservationTimestampFromReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationTimestampFromReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationTimestampFromReportReply) ProtoMessage() {}

func (x *ObservationTimestampFromReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationTimestampFromReportReply.ProtoReflect.Descriptor instead.
func (*ObservationTimestampFromReportReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{17}
}

func (x *ObservationTimestampFromReportReply) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// ReportFieldsV1 is gRPC wrapper for struct [github.com/smartcontractkit/chainlink-data-streams/mercury/v1/ReportFields].
type ReportFieldsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp             uint32     `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`          // TODO: timestamp?
	BenchmarkPrice        *pb.BigInt `protobuf:"bytes,2,opt,name=benchmarkPrice,proto3" json:"benchmarkPrice,omitempty"` // TODO: WARNING this is a pointer in ReportFields
	Bid                   *pb.BigInt `protobuf:"bytes,3,opt,name=bid,proto3" json:"bid,omitempty"`                       // TODO: WARNING this is a pointer in ReportFields
	Ask                   *pb.BigInt `protobuf:"bytes,4,opt,name=ask,proto3" json:"ask,omitempty"`                       // TODO: WARNING this is a pointer in ReportFields
	CurrentBlockNum       int64      `protobuf:"varint,5,opt,name=currentBlockNum,proto3" json:"currentBlockNum,omitempty"`
	CurrentBlockHash      []byte     `protobuf:"bytes,6,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
	ValidFromBlockNum     int64      `protobuf:"varint,7,opt,name=validFromBlockNum,proto3" json:"validFromBlockNum,omitempty"`
	CurrentBlockTimestamp uint64     `protobuf:"varint,8,opt,name=currentBlockTimestamp,proto3" json:"currentBlockTimestamp,omitempty"` // TODO: timestamp?
}

func (x *ReportFieldsV1) Reset() {
	*x = ReportFieldsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFieldsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFieldsV1) ProtoMessage() {}

func (x *ReportFieldsV1) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFieldsV1.ProtoReflect.Descriptor instead.
func (*ReportFieldsV1) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{18}
}

func (x *ReportFieldsV1) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ReportFieldsV1) GetBenchmarkPrice() *pb.BigInt {
	if x != nil {
		return x.BenchmarkPrice
	}
	return nil
}

func (x *ReportFieldsV1) GetBid() *pb.BigInt {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *ReportFieldsV1) GetAsk() *pb.BigInt {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *ReportFieldsV1) GetCurrentBlockNum() int64 {
	if x != nil {
		return x.CurrentBlockNum
	}
	return 0
}

func (x *ReportFieldsV1) GetCurrentBlockHash() []byte {
	if x != nil {
		return x.CurrentBlockHash
	}
	return nil
}

func (x *ReportFieldsV1) GetValidFromBlockNum() int64 {
	if x != nil {
		return x.ValidFromBlockNum
	}
	return 0
}

func (x *ReportFieldsV1) GetCurrentBlockTimestamp() uint64 {
	if x != nil {
		return x.CurrentBlockTimestamp
	}
	return 0
}

// BuildReportRequestV1 is gRPC adapter for [github.com/smartcontractkit/chainlink-data-streams/mercury/v1/ReportCodec.BuildReport].
type BuildReportRequestV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportFields *ReportFieldsV1 `protobuf:"bytes,1,opt,name=reportFields,proto3" json:"reportFields,omitempty"`
}

func (x *BuildReportRequestV1) Reset() {
	*x = BuildReportRequestV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildReportRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReportRequestV1) ProtoMessage() {}

func (x *BuildReportRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReportRequestV1.ProtoReflect.Descriptor instead.
func (*BuildReportRequestV1) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{19}
}

func (x *BuildReportRequestV1) GetReportFields() *ReportFieldsV1 {
	if x != nil {
		return x.ReportFields
	}
	return nil
}

// BuildReportReplyV1 has return arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v1/ReportCodec.BuildReport].
type BuildReportReplyV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *BuildReportReplyV1) Reset() {
	*x = BuildReportReplyV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildReportReplyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReportReplyV1) ProtoMessage() {}

func (x *BuildReportReplyV1) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReportReplyV1.ProtoReflect.Descriptor instead.
func (*BuildReportReplyV1) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{20}
}

func (x *BuildReportReplyV1) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// CurrentBlockNumFromReportRequest is gRPC adapter for [github.com/smartcontractkit/chainlink-data-streams/mercury/v1/ReportCodec.CurrentBlockNumFromReport].
type CurrentBlockNumFromReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *CurrentBlockNumFromReportRequest) Reset() {
	*x = CurrentBlockNumFromReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentBlockNumFromReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentBlockNumFromReportRequest) ProtoMessage() {}

func (x *CurrentBlockNumFromReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentBlockNumFromReportRequest.ProtoReflect.Descriptor instead.
func (*CurrentBlockNumFromReportRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{21}
}

func (x *CurrentBlockNumFromReportRequest) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// CurrentBlockNumFromReportResponse is gRPC adapter for [github.com/smartcontractkit/chainlink-data-streams/mercury/v1/ReportCodec.CurrentBlockNumFromReport].
type CurrentBlockNumFromReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentBlockNum int64 `protobuf:"varint,1,opt,name=currentBlockNum,proto3" json:"currentBlockNum,omitempty"`
}

func (x *CurrentBlockNumFromReportResponse) Reset() {
	*x = CurrentBlockNumFromReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentBlockNumFromReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentBlockNumFromReportResponse) ProtoMessage() {}

func (x *CurrentBlockNumFromReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentBlockNumFromReportResponse.ProtoReflect.Descriptor instead.
func (*CurrentBlockNumFromReportResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{22}
}

func (x *CurrentBlockNumFromReportResponse) GetCurrentBlockNum() int64 {
	if x != nil {
		return x.CurrentBlockNum
	}
	return 0
}

// ReportFieldsV2 is gRPC wrapper for struct [github.com/smartcontractkit/chainlink-data-streams/mercury/v2/ReportFields].
type ReportFieldsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidFromTimestamp uint32     `protobuf:"varint,1,opt,name=validFromTimestamp,proto3" json:"validFromTimestamp,omitempty"` // TODO: timestamp?
	Timestamp          uint32     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                   // TODO: timestamp?
	NativeFee          *pb.BigInt `protobuf:"bytes,3,opt,name=nativeFee,proto3" json:"nativeFee,omitempty"`                    // TODO: WARNING this is a pointer in ReportFields
	LinkFee            *pb.BigInt `protobuf:"bytes,4,opt,name=linkFee,proto3" json:"linkFee,omitempty"`                        // TODO: WARNING this is a pointer in ReportFields
	ExpiresAt          uint32     `protobuf:"varint,5,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`                   // TODO: timestamp?
	BenchmarkPrice     *pb.BigInt `protobuf:"bytes,6,opt,name=benchmarkPrice,proto3" json:"benchmarkPrice,omitempty"`          // TODO: WARNING this is a pointer in ReportFields
}

func (x *ReportFieldsV2) Reset() {
	*x = ReportFieldsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFieldsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFieldsV2) ProtoMessage() {}

func (x *ReportFieldsV2) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFieldsV2.ProtoReflect.Descriptor instead.
func (*ReportFieldsV2) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{23}
}

func (x *ReportFieldsV2) GetValidFromTimestamp() uint32 {
	if x != nil {
		return x.ValidFromTimestamp
	}
	return 0
}

func (x *ReportFieldsV2) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ReportFieldsV2) GetNativeFee() *pb.BigInt {
	if x != nil {
		return x.NativeFee
	}
	return nil
}

func (x *ReportFieldsV2) GetLinkFee() *pb.BigInt {
	if x != nil {
		return x.LinkFee
	}
	return nil
}

func (x *ReportFieldsV2) GetExpiresAt() uint32 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *ReportFieldsV2) GetBenchmarkPrice() *pb.BigInt {
	if x != nil {
		return x.BenchmarkPrice
	}
	return nil
}

// BuildReportRequestV2 is gRPC adapter for [github.com/smartcontractkit/chainlink-data-streams/mercury/v2/ReportCodec.BuildReport].
type BuildReportRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportFields *ReportFieldsV2 `protobuf:"bytes,1,opt,name=reportFields,proto3" json:"reportFields,omitempty"`
}

func (x *BuildReportRequestV2) Reset() {
	*x = BuildReportRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildReportRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReportRequestV2) ProtoMessage() {}

func (x *BuildReportRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReportRequestV2.ProtoReflect.Descriptor instead.
func (*BuildReportRequestV2) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{24}
}

func (x *BuildReportRequestV2) GetReportFields() *ReportFieldsV2 {
	if x != nil {
		return x.ReportFields
	}
	return nil
}

// BuildReportReplyV2 has return arguments for [github.com/smartcontractkit/chainlink-data-streams/mercury/v2/ReportCodec.BuildReport].
type BuildReportReplyV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *BuildReportReplyV2) Reset() {
	*x = BuildReportReplyV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildReportReplyV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReportReplyV2) ProtoMessage() {}

func (x *BuildReportReplyV2) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReportReplyV2.ProtoReflect.Descriptor instead.
func (*BuildReportReplyV2) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{25}
}

func (x *BuildReportReplyV2) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// FetchInitialMaxFinalizedBlockNumberRequest is gRPC adapter for [pkg/types/mercury/MercuryServerFetcher.FetchInitialMaxFinalizedBlockNumber].
type FetchInitialMaxFinalizedBlockNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchInitialMaxFinalizedBlockNumberRequest) Reset() {
	*x = FetchInitialMaxFinalizedBlockNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchInitialMaxFinalizedBlockNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchInitialMaxFinalizedBlockNumberRequest) ProtoMessage() {}

func (x *FetchInitialMaxFinalizedBlockNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchInitialMaxFinalizedBlockNumberRequest.ProtoReflect.Descriptor instead.
func (*FetchInitialMaxFinalizedBlockNumberRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{26}
}

// FetchInitialMaxFinalizedBlockNumberReply is gRPC adapter for [pkg/types/mercury/MercuryServerFetcher.FetchInitialMaxFinalizedBlockNumber].
type FetchInitialMaxFinalizedBlockNumberReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialMaxFinalizedBlockNumber int64 `protobuf:"varint,1,opt,name=initialMaxFinalizedBlockNumber,proto3" json:"initialMaxFinalizedBlockNumber,omitempty"` // TODO: WARNING this is a pointer in MercuryServerFetcher interface
}

func (x *FetchInitialMaxFinalizedBlockNumberReply) Reset() {
	*x = FetchInitialMaxFinalizedBlockNumberReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchInitialMaxFinalizedBlockNumberReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchInitialMaxFinalizedBlockNumberReply) ProtoMessage() {}

func (x *FetchInitialMaxFinalizedBlockNumberReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchInitialMaxFinalizedBlockNumberReply.ProtoReflect.Descriptor instead.
func (*FetchInitialMaxFinalizedBlockNumberReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{27}
}

func (x *FetchInitialMaxFinalizedBlockNumberReply) GetInitialMaxFinalizedBlockNumber() int64 {
	if x != nil {
		return x.InitialMaxFinalizedBlockNumber
	}
	return 0
}

// LatestPriceRequest is gRPC adapter for [pkg/types/mercury/MercuryServerFetcher.LatestPrice].
type LatestPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedID []byte `protobuf:"bytes,1,opt,name=feedID,proto3" json:"feedID,omitempty"` // WARNING: this must be [32]byte in MercuryServerFetcher interface
}

func (x *LatestPriceRequest) Reset() {
	*x = LatestPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestPriceRequest) ProtoMessage() {}

func (x *LatestPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestPriceRequest.ProtoReflect.Descriptor instead.
func (*LatestPriceRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{28}
}

func (x *LatestPriceRequest) GetFeedID() []byte {
	if x != nil {
		return x.FeedID
	}
	return nil
}

// LatestPriceReply is gRPC adapter for [pkg/types/mercury/MercuryServerFetcher.LatestPrice].
type LatestPriceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestPrice *pb.BigInt `protobuf:"bytes,1,opt,name=latestPrice,proto3" json:"latestPrice,omitempty"` // TODO: WARNING this is a pointer in MercuryServerFetcher interface
}

func (x *LatestPriceReply) Reset() {
	*x = LatestPriceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestPriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestPriceReply) ProtoMessage() {}

func (x *LatestPriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestPriceReply.ProtoReflect.Descriptor instead.
func (*LatestPriceReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{29}
}

func (x *LatestPriceReply) GetLatestPrice() *pb.BigInt {
	if x != nil {
		return x.LatestPrice
	}
	return nil
}

// LatestTimestampRequest is gRPC adapter for [pkg/types/mercury/MercuryServerFetcher.LatestTimestamp].
type LatestTimestampRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LatestTimestampRequest) Reset() {
	*x = LatestTimestampRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestTimestampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTimestampRequest) ProtoMessage() {}

func (x *LatestTimestampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTimestampRequest.ProtoReflect.Descriptor instead.
func (*LatestTimestampRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{30}
}

// LatestTimestampReply is gRPC adapter for [pkg/types/mercury/MercuryServerFetcher.LatestTimestamp].
type LatestTimestampReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestTimestamp int64 `protobuf:"varint,1,opt,name=latestTimestamp,proto3" json:"latestTimestamp,omitempty"`
}

func (x *LatestTimestampReply) Reset() {
	*x = LatestTimestampReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestTimestampReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTimestampReply) ProtoMessage() {}

func (x *LatestTimestampReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTimestampReply.ProtoReflect.Descriptor instead.
func (*LatestTimestampReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{31}
}

func (x *LatestTimestampReply) GetLatestTimestamp() int64 {
	if x != nil {
		return x.LatestTimestamp
	}
	return 0
}

// Head is gRPC adapter for the Head struct [pkg/types/mercury/MercuryChainReader].
type Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number    uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Head) Reset() {
	*x = Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{32}
}

func (x *Head) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Head) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Head) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// LatestHeadsRequest is gRPC adapter for input arguments to [pkg/types/mercury/MercuryChainReader.LatestHeads].
type LatestHeadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumHeads int64 `protobuf:"varint,1,opt,name=numHeads,proto3" json:"numHeads,omitempty"`
}

func (x *LatestHeadsRequest) Reset() {
	*x = LatestHeadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestHeadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestHeadsRequest) ProtoMessage() {}

func (x *LatestHeadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestHeadsRequest.ProtoReflect.Descriptor instead.
func (*LatestHeadsRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{33}
}

func (x *LatestHeadsRequest) GetNumHeads() int64 {
	if x != nil {
		return x.NumHeads
	}
	return 0
}

// LatestHeadsReply is gRPC adapter for return arguments to [pkg/types/mercury/MercuryChainReader.LatestHeads].
type LatestHeadsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heads []*Head `protobuf:"bytes,1,rep,name=heads,proto3" json:"heads,omitempty"`
}

func (x *LatestHeadsReply) Reset() {
	*x = LatestHeadsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestHeadsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestHeadsReply) ProtoMessage() {}

func (x *LatestHeadsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestHeadsReply.ProtoReflect.Descriptor instead.
func (*LatestHeadsReply) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{34}
}

func (x *LatestHeadsReply) GetHeads() []*Head {
	if x != nil {
		return x.Heads
	}
	return nil
}

var File_mercury_proto protoreflect.FileDescriptor

var file_mercury_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x1a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x4e, 0x65, 0x77,
	0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x33, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x33, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x33, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x56, 0x33, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x49, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56,
	0x33, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0xe7, 0x01,
	0x0a, 0x19, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x31, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x31, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x31, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x31, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x4d, 0x65,
	0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x44, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79,
	0x56, 0x32, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x32, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x56, 0x32, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x32, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x17,
	0x4e, 0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x0d, 0x4f, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67,
	0x49, 0x6e, 0x74, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67,
	0x49, 0x6e, 0x74, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x6b, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x40, 0x0a, 0x18, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x42, 0x0a, 0x1a, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x69, 0x0a, 0x18, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc4, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x03, 0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x03, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x22, 0x60, 0x0a,
	0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x2a, 0x0a, 0x10, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x38, 0x0a, 0x16, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3f, 0x0a, 0x25, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x0a, 0x23, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xde, 0x02,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x31,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34,
	0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52,
	0x03, 0x62, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52,
	0x03, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x64,
	0x0a, 0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x56, 0x31, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x56, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x3a, 0x0a, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4d,
	0x0a, 0x21, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x86, 0x02,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x32,
	0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a,
	0x0a, 0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52,
	0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6c, 0x69,
	0x6e, 0x6b, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x46,
	0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x12, 0x34, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x64, 0x0a, 0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x4c,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x56, 0x32, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x12,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x56, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2c, 0x0a, 0x2a, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x28, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x12,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x10, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e,
	0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x18,
	0x0a, 0x16, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x14, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x50, 0x0a, 0x04, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x30, 0x0a, 0x12,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x73, 0x22, 0x48,
	0x0a, 0x10, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x68, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x05, 0x68, 0x65, 0x61, 0x64, 0x73, 0x32, 0x93, 0x03, 0x0a, 0x0e, 0x4d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x7f, 0x0a, 0x13, 0x4e,
	0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4e, 0x65,
	0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x13,
	0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4e,
	0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x13, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e,
	0x4e, 0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x80,
	0x02, 0x0a, 0x12, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x74, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x06, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x32, 0x94, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x12, 0x69, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0f,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x30, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x8e, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x31, 0x12, 0x6d, 0x0a, 0x0b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x1a, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x56, 0x31, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0f, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x96, 0x01, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x9a, 0x03, 0x0a, 0x0d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x32, 0x12, 0x6d, 0x0a, 0x0b, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x56, 0x32, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0f, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0xa2, 0x01, 0x0a, 0x1e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xac, 0x03, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0xb1, 0x01, 0x0a, 0x23, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x0f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x30, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x7f, 0x0a, 0x12, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0b, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x3b, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x5f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mercury_proto_rawDescOnce sync.Once
	file_mercury_proto_rawDescData = file_mercury_proto_rawDesc
)

func file_mercury_proto_rawDescGZIP() []byte {
	file_mercury_proto_rawDescOnce.Do(func() {
		file_mercury_proto_rawDescData = protoimpl.X.CompressGZIP(file_mercury_proto_rawDescData)
	})
	return file_mercury_proto_rawDescData
}

var file_mercury_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_mercury_proto_goTypes = []interface{}{
	(*NewMecuryV3FactoryRequest)(nil),                  // 0: loop.internal.pb.mercury.NewMecuryV3FactoryRequest
	(*NewMecuryV3FactoryReply)(nil),                    // 1: loop.internal.pb.mercury.NewMecuryV3FactoryReply
	(*NewMecuryV1FactoryRequest)(nil),                  // 2: loop.internal.pb.mercury.NewMecuryV1FactoryRequest
	(*NewMecuryV1FactoryReply)(nil),                    // 3: loop.internal.pb.mercury.NewMecuryV1FactoryReply
	(*NewMecuryV2FactoryRequest)(nil),                  // 4: loop.internal.pb.mercury.NewMecuryV2FactoryRequest
	(*NewMecuryV2FactoryReply)(nil),                    // 5: loop.internal.pb.mercury.NewMecuryV2FactoryReply
	(*OnchainConfig)(nil),                              // 6: loop.internal.pb.mercury.OnchainConfig
	(*EncodeOnchainConfigRequest)(nil),                 // 7: loop.internal.pb.mercury.EncodeOnchainConfigRequest
	(*EncodeOnchainConfigReply)(nil),                   // 8: loop.internal.pb.mercury.EncodeOnchainConfigReply
	(*DecodeOnchainConfigRequest)(nil),                 // 9: loop.internal.pb.mercury.DecodeOnchainConfigRequest
	(*DecodeOnchainConfigReply)(nil),                   // 10: loop.internal.pb.mercury.DecodeOnchainConfigReply
	(*ReportFields)(nil),                               // 11: loop.internal.pb.mercury.ReportFields
	(*BuildReportRequest)(nil),                         // 12: loop.internal.pb.mercury.BuildReportRequest
	(*BuildReportReply)(nil),                           // 13: loop.internal.pb.mercury.BuildReportReply
	(*MaxReportLengthRequest)(nil),                     // 14: loop.internal.pb.mercury.MaxReportLengthRequest
	(*MaxReportLengthReply)(nil),                       // 15: loop.internal.pb.mercury.MaxReportLengthReply
	(*ObservationTimestampFromReportRequest)(nil),      // 16: loop.internal.pb.mercury.ObservationTimestampFromReportRequest
	(*ObservationTimestampFromReportReply)(nil),        // 17: loop.internal.pb.mercury.ObservationTimestampFromReportReply
	(*ReportFieldsV1)(nil),                             // 18: loop.internal.pb.mercury.ReportFieldsV1
	(*BuildReportRequestV1)(nil),                       // 19: loop.internal.pb.mercury.BuildReportRequestV1
	(*BuildReportReplyV1)(nil),                         // 20: loop.internal.pb.mercury.BuildReportReplyV1
	(*CurrentBlockNumFromReportRequest)(nil),           // 21: loop.internal.pb.mercury.CurrentBlockNumFromReportRequest
	(*CurrentBlockNumFromReportResponse)(nil),          // 22: loop.internal.pb.mercury.CurrentBlockNumFromReportResponse
	(*ReportFieldsV2)(nil),                             // 23: loop.internal.pb.mercury.ReportFieldsV2
	(*BuildReportRequestV2)(nil),                       // 24: loop.internal.pb.mercury.BuildReportRequestV2
	(*BuildReportReplyV2)(nil),                         // 25: loop.internal.pb.mercury.BuildReportReplyV2
	(*FetchInitialMaxFinalizedBlockNumberRequest)(nil), // 26: loop.internal.pb.mercury.FetchInitialMaxFinalizedBlockNumberRequest
	(*FetchInitialMaxFinalizedBlockNumberReply)(nil),   // 27: loop.internal.pb.mercury.FetchInitialMaxFinalizedBlockNumberReply
	(*LatestPriceRequest)(nil),                         // 28: loop.internal.pb.mercury.LatestPriceRequest
	(*LatestPriceReply)(nil),                           // 29: loop.internal.pb.mercury.LatestPriceReply
	(*LatestTimestampRequest)(nil),                     // 30: loop.internal.pb.mercury.LatestTimestampRequest
	(*LatestTimestampReply)(nil),                       // 31: loop.internal.pb.mercury.LatestTimestampReply
	(*Head)(nil),                                       // 32: loop.internal.pb.mercury.Head
	(*LatestHeadsRequest)(nil),                         // 33: loop.internal.pb.mercury.LatestHeadsRequest
	(*LatestHeadsReply)(nil),                           // 34: loop.internal.pb.mercury.LatestHeadsReply
	(*pb.BigInt)(nil),                                  // 35: loop.BigInt
}
var file_mercury_proto_depIdxs = []int32{
	35, // 0: loop.internal.pb.mercury.OnchainConfig.min:type_name -> loop.BigInt
	35, // 1: loop.internal.pb.mercury.OnchainConfig.max:type_name -> loop.BigInt
	6,  // 2: loop.internal.pb.mercury.EncodeOnchainConfigRequest.onchainConfig:type_name -> loop.internal.pb.mercury.OnchainConfig
	6,  // 3: loop.internal.pb.mercury.DecodeOnchainConfigReply.onchainConfig:type_name -> loop.internal.pb.mercury.OnchainConfig
	35, // 4: loop.internal.pb.mercury.ReportFields.nativeFee:type_name -> loop.BigInt
	35, // 5: loop.internal.pb.mercury.ReportFields.linkFee:type_name -> loop.BigInt
	35, // 6: loop.internal.pb.mercury.ReportFields.benchmarkPrice:type_name -> loop.BigInt
	35, // 7: loop.internal.pb.mercury.ReportFields.bid:type_name -> loop.BigInt
	35, // 8: loop.internal.pb.mercury.ReportFields.ask:type_name -> loop.BigInt
	11, // 9: loop.internal.pb.mercury.BuildReportRequest.reportFields:type_name -> loop.internal.pb.mercury.ReportFields
	35, // 10: loop.internal.pb.mercury.ReportFieldsV1.benchmarkPrice:type_name -> loop.BigInt
	35, // 11: loop.internal.pb.mercury.ReportFieldsV1.bid:type_name -> loop.BigInt
	35, // 12: loop.internal.pb.mercury.ReportFieldsV1.ask:type_name -> loop.BigInt
	18, // 13: loop.internal.pb.mercury.BuildReportRequestV1.reportFields:type_name -> loop.internal.pb.mercury.ReportFieldsV1
	35, // 14: loop.internal.pb.mercury.ReportFieldsV2.nativeFee:type_name -> loop.BigInt
	35, // 15: loop.internal.pb.mercury.ReportFieldsV2.linkFee:type_name -> loop.BigInt
	35, // 16: loop.internal.pb.mercury.ReportFieldsV2.benchmarkPrice:type_name -> loop.BigInt
	23, // 17: loop.internal.pb.mercury.BuildReportRequestV2.reportFields:type_name -> loop.internal.pb.mercury.ReportFieldsV2
	35, // 18: loop.internal.pb.mercury.LatestPriceReply.latestPrice:type_name -> loop.BigInt
	32, // 19: loop.internal.pb.mercury.LatestHeadsReply.heads:type_name -> loop.internal.pb.mercury.Head
	2,  // 20: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV1Factory:input_type -> loop.internal.pb.mercury.NewMecuryV1FactoryRequest
	4,  // 21: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV2Factory:input_type -> loop.internal.pb.mercury.NewMecuryV2FactoryRequest
	0,  // 22: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV3Factory:input_type -> loop.internal.pb.mercury.NewMecuryV3FactoryRequest
	7,  // 23: loop.internal.pb.mercury.OnChainConfigCodec.Encode:input_type -> loop.internal.pb.mercury.EncodeOnchainConfigRequest
	9,  // 24: loop.internal.pb.mercury.OnChainConfigCodec.Decode:input_type -> loop.internal.pb.mercury.DecodeOnchainConfigRequest
	12, // 25: loop.internal.pb.mercury.ReportCodec.BuildReport:input_type -> loop.internal.pb.mercury.BuildReportRequest
	14, // 26: loop.internal.pb.mercury.ReportCodec.MaxReportLength:input_type -> loop.internal.pb.mercury.MaxReportLengthRequest
	16, // 27: loop.internal.pb.mercury.ReportCodec.ObservationTimestampFromReport:input_type -> loop.internal.pb.mercury.ObservationTimestampFromReportRequest
	19, // 28: loop.internal.pb.mercury.ReportCodecV1.BuildReport:input_type -> loop.internal.pb.mercury.BuildReportRequestV1
	14, // 29: loop.internal.pb.mercury.ReportCodecV1.MaxReportLength:input_type -> loop.internal.pb.mercury.MaxReportLengthRequest
	21, // 30: loop.internal.pb.mercury.ReportCodecV1.CurrentBlockNumFromReport:input_type -> loop.internal.pb.mercury.CurrentBlockNumFromReportRequest
	24, // 31: loop.internal.pb.mercury.ReportCodecV2.BuildReport:input_type -> loop.internal.pb.mercury.BuildReportRequestV2
	14, // 32: loop.internal.pb.mercury.ReportCodecV2.MaxReportLength:input_type -> loop.internal.pb.mercury.MaxReportLengthRequest
	16, // 33: loop.internal.pb.mercury.ReportCodecV2.ObservationTimestampFromReport:input_type -> loop.internal.pb.mercury.ObservationTimestampFromReportRequest
	26, // 34: loop.internal.pb.mercury.MercuryServerFetcher.FetchInitialMaxFinalizedBlockNumber:input_type -> loop.internal.pb.mercury.FetchInitialMaxFinalizedBlockNumberRequest
	28, // 35: loop.internal.pb.mercury.MercuryServerFetcher.LatestPrice:input_type -> loop.internal.pb.mercury.LatestPriceRequest
	30, // 36: loop.internal.pb.mercury.MercuryServerFetcher.LatestTimestamp:input_type -> loop.internal.pb.mercury.LatestTimestampRequest
	33, // 37: loop.internal.pb.mercury.MercuryChainReader.LatestHeads:input_type -> loop.internal.pb.mercury.LatestHeadsRequest
	3,  // 38: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV1Factory:output_type -> loop.internal.pb.mercury.NewMecuryV1FactoryReply
	5,  // 39: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV2Factory:output_type -> loop.internal.pb.mercury.NewMecuryV2FactoryReply
	1,  // 40: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV3Factory:output_type -> loop.internal.pb.mercury.NewMecuryV3FactoryReply
	8,  // 41: loop.internal.pb.mercury.OnChainConfigCodec.Encode:output_type -> loop.internal.pb.mercury.EncodeOnchainConfigReply
	10, // 42: loop.internal.pb.mercury.OnChainConfigCodec.Decode:output_type -> loop.internal.pb.mercury.DecodeOnchainConfigReply
	13, // 43: loop.internal.pb.mercury.ReportCodec.BuildReport:output_type -> loop.internal.pb.mercury.BuildReportReply
	15, // 44: loop.internal.pb.mercury.ReportCodec.MaxReportLength:output_type -> loop.internal.pb.mercury.MaxReportLengthReply
	17, // 45: loop.internal.pb.mercury.ReportCodec.ObservationTimestampFromReport:output_type -> loop.internal.pb.mercury.ObservationTimestampFromReportReply
	20, // 46: loop.internal.pb.mercury.ReportCodecV1.BuildReport:output_type -> loop.internal.pb.mercury.BuildReportReplyV1
	15, // 47: loop.internal.pb.mercury.ReportCodecV1.MaxReportLength:output_type -> loop.internal.pb.mercury.MaxReportLengthReply
	22, // 48: loop.internal.pb.mercury.ReportCodecV1.CurrentBlockNumFromReport:output_type -> loop.internal.pb.mercury.CurrentBlockNumFromReportResponse
	25, // 49: loop.internal.pb.mercury.ReportCodecV2.BuildReport:output_type -> loop.internal.pb.mercury.BuildReportReplyV2
	15, // 50: loop.internal.pb.mercury.ReportCodecV2.MaxReportLength:output_type -> loop.internal.pb.mercury.MaxReportLengthReply
	17, // 51: loop.internal.pb.mercury.ReportCodecV2.ObservationTimestampFromReport:output_type -> loop.internal.pb.mercury.ObservationTimestampFromReportReply
	27, // 52: loop.internal.pb.mercury.MercuryServerFetcher.FetchInitialMaxFinalizedBlockNumber:output_type -> loop.internal.pb.mercury.FetchInitialMaxFinalizedBlockNumberReply
	29, // 53: loop.internal.pb.mercury.MercuryServerFetcher.LatestPrice:output_type -> loop.internal.pb.mercury.LatestPriceReply
	31, // 54: loop.internal.pb.mercury.MercuryServerFetcher.LatestTimestamp:output_type -> loop.internal.pb.mercury.LatestTimestampReply
	34, // 55: loop.internal.pb.mercury.MercuryChainReader.LatestHeads:output_type -> loop.internal.pb.mercury.LatestHeadsReply
	38, // [38:56] is the sub-list for method output_type
	20, // [20:38] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_mercury_proto_init() }
func file_mercury_proto_init() {
	if File_mercury_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mercury_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMecuryV3FactoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMecuryV3FactoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMecuryV1FactoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMecuryV1FactoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMecuryV2FactoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMecuryV2FactoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnchainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeOnchainConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeOnchainConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeOnchainConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeOnchainConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxReportLengthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxReportLengthReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationTimestampFromReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationTimestampFromReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFieldsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildReportRequestV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildReportReplyV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentBlockNumFromReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentBlockNumFromReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFieldsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildReportRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildReportReplyV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchInitialMaxFinalizedBlockNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchInitialMaxFinalizedBlockNumberReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestPriceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestTimestampRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestTimestampReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestHeadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestHeadsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mercury_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_mercury_proto_goTypes,
		DependencyIndexes: file_mercury_proto_depIdxs,
		MessageInfos:      file_mercury_proto_msgTypes,
	}.Build()
	File_mercury_proto = out.File
	file_mercury_proto_rawDesc = nil
	file_mercury_proto_goTypes = nil
	file_mercury_proto_depIdxs = nil
}
