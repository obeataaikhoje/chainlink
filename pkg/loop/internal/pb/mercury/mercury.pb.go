// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: mercury.proto

// note: the generate.go file in this dir specifies the import path of the relative proto files

package mercurypb

import (
	pb "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb"
	v1 "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury/v1"
	v2 "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury/v2"
	v3 "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NewMercuryV3FactoryRequest is a grpc wrapper for the input to  [github.com/smartcontractkit/chainlink-data-streams/mercury/v3/NewFactory].
type NewMercuryV3FactoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryProviderID uint32 `protobuf:"varint,1,opt,name=mercuryProviderID,proto3" json:"mercuryProviderID,omitempty"`
	DataSourceV3ID    uint32 `protobuf:"varint,2,opt,name=dataSourceV3ID,proto3" json:"dataSourceV3ID,omitempty"` // id of the data source server for this factory instance
	ErrorLogID        uint32 `protobuf:"varint,3,opt,name=errorLogID,proto3" json:"errorLogID,omitempty"`
}

func (x *NewMercuryV3FactoryRequest) Reset() {
	*x = NewMercuryV3FactoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMercuryV3FactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryV3FactoryRequest) ProtoMessage() {}

func (x *NewMercuryV3FactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryV3FactoryRequest.ProtoReflect.Descriptor instead.
func (*NewMercuryV3FactoryRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{0}
}

func (x *NewMercuryV3FactoryRequest) GetMercuryProviderID() uint32 {
	if x != nil {
		return x.MercuryProviderID
	}
	return 0
}

func (x *NewMercuryV3FactoryRequest) GetDataSourceV3ID() uint32 {
	if x != nil {
		return x.DataSourceV3ID
	}
	return 0
}

func (x *NewMercuryV3FactoryRequest) GetErrorLogID() uint32 {
	if x != nil {
		return x.ErrorLogID
	}
	return 0
}

// NewMercuryV3FactoryResponse tracks the factory identifier used for brokering connecitons.
type NewMercuryV3FactoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryV3FactoryID uint32 `protobuf:"varint,1,opt,name=mercuryV3FactoryID,proto3" json:"mercuryV3FactoryID,omitempty"`
}

func (x *NewMercuryV3FactoryResponse) Reset() {
	*x = NewMercuryV3FactoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMercuryV3FactoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryV3FactoryResponse) ProtoMessage() {}

func (x *NewMercuryV3FactoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryV3FactoryResponse.ProtoReflect.Descriptor instead.
func (*NewMercuryV3FactoryResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{1}
}

func (x *NewMercuryV3FactoryResponse) GetMercuryV3FactoryID() uint32 {
	if x != nil {
		return x.MercuryV3FactoryID
	}
	return 0
}

// NewMercuryV1FactoryRequest is a grpc wrapper for the input to  [github.com/smartcontractkit/chainlink-data-streams/mercury/v1/NewFactory].
type NewMercuryV1FactoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryProviderID uint32 `protobuf:"varint,1,opt,name=mercuryProviderID,proto3" json:"mercuryProviderID,omitempty"`
	DataSourceV1ID    uint32 `protobuf:"varint,2,opt,name=dataSourceV1ID,proto3" json:"dataSourceV1ID,omitempty"` // id of the data source server for this factory instance
	ErrorLogID        uint32 `protobuf:"varint,3,opt,name=errorLogID,proto3" json:"errorLogID,omitempty"`
}

func (x *NewMercuryV1FactoryRequest) Reset() {
	*x = NewMercuryV1FactoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMercuryV1FactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryV1FactoryRequest) ProtoMessage() {}

func (x *NewMercuryV1FactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryV1FactoryRequest.ProtoReflect.Descriptor instead.
func (*NewMercuryV1FactoryRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{2}
}

func (x *NewMercuryV1FactoryRequest) GetMercuryProviderID() uint32 {
	if x != nil {
		return x.MercuryProviderID
	}
	return 0
}

func (x *NewMercuryV1FactoryRequest) GetDataSourceV1ID() uint32 {
	if x != nil {
		return x.DataSourceV1ID
	}
	return 0
}

func (x *NewMercuryV1FactoryRequest) GetErrorLogID() uint32 {
	if x != nil {
		return x.ErrorLogID
	}
	return 0
}

// NewMercuryV1FactoryResponse tracks the factory identifier used for brokering connecitons.
type NewMercuryV1FactoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryV1FactoryID uint32 `protobuf:"varint,1,opt,name=mercuryV1FactoryID,proto3" json:"mercuryV1FactoryID,omitempty"`
}

func (x *NewMercuryV1FactoryResponse) Reset() {
	*x = NewMercuryV1FactoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMercuryV1FactoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryV1FactoryResponse) ProtoMessage() {}

func (x *NewMercuryV1FactoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryV1FactoryResponse.ProtoReflect.Descriptor instead.
func (*NewMercuryV1FactoryResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{3}
}

func (x *NewMercuryV1FactoryResponse) GetMercuryV1FactoryID() uint32 {
	if x != nil {
		return x.MercuryV1FactoryID
	}
	return 0
}

// NewMercuryV2FactoryRequest is a grpc wrapper for the input to  [github.com/smartcontractkit/chainlink-data-streams/mercury/v2/NewFactory].
type NewMercuryV2FactoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryProviderID uint32 `protobuf:"varint,1,opt,name=mercuryProviderID,proto3" json:"mercuryProviderID,omitempty"`
	DataSourceV2ID    uint32 `protobuf:"varint,2,opt,name=dataSourceV2ID,proto3" json:"dataSourceV2ID,omitempty"` // id of the data source server for this factory instance
	ErrorLogID        uint32 `protobuf:"varint,3,opt,name=errorLogID,proto3" json:"errorLogID,omitempty"`
}

func (x *NewMercuryV2FactoryRequest) Reset() {
	*x = NewMercuryV2FactoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMercuryV2FactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryV2FactoryRequest) ProtoMessage() {}

func (x *NewMercuryV2FactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryV2FactoryRequest.ProtoReflect.Descriptor instead.
func (*NewMercuryV2FactoryRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{4}
}

func (x *NewMercuryV2FactoryRequest) GetMercuryProviderID() uint32 {
	if x != nil {
		return x.MercuryProviderID
	}
	return 0
}

func (x *NewMercuryV2FactoryRequest) GetDataSourceV2ID() uint32 {
	if x != nil {
		return x.DataSourceV2ID
	}
	return 0
}

func (x *NewMercuryV2FactoryRequest) GetErrorLogID() uint32 {
	if x != nil {
		return x.ErrorLogID
	}
	return 0
}

// NewMercuryV2FactoryResponse tracks the factory identifier used for brokering connecitons.
type NewMercuryV2FactoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryV2FactoryID uint32 `protobuf:"varint,1,opt,name=mercuryV2FactoryID,proto3" json:"mercuryV2FactoryID,omitempty"`
}

func (x *NewMercuryV2FactoryResponse) Reset() {
	*x = NewMercuryV2FactoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMercuryV2FactoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryV2FactoryResponse) ProtoMessage() {}

func (x *NewMercuryV2FactoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryV2FactoryResponse.ProtoReflect.Descriptor instead.
func (*NewMercuryV2FactoryResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{5}
}

func (x *NewMercuryV2FactoryResponse) GetMercuryV2FactoryID() uint32 {
	if x != nil {
		return x.MercuryV2FactoryID
	}
	return 0
}

// OnchainConfig is a gRPC adapter for the OnchainConfig struct [pkg/types/mercury/OnchainConfig].
type OnchainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *pb.BigInt `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max *pb.BigInt `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *OnchainConfig) Reset() {
	*x = OnchainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnchainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnchainConfig) ProtoMessage() {}

func (x *OnchainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnchainConfig.ProtoReflect.Descriptor instead.
func (*OnchainConfig) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{6}
}

func (x *OnchainConfig) GetMin() *pb.BigInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OnchainConfig) GetMax() *pb.BigInt {
	if x != nil {
		return x.Max
	}
	return nil
}

// EncodeOnchainConfigRequest is gRPC adapter for the inputs arguments of [pkg/types/mercury/OnchainConfig.Encode].
type EncodeOnchainConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig *OnchainConfig `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
}

func (x *EncodeOnchainConfigRequest) Reset() {
	*x = EncodeOnchainConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeOnchainConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeOnchainConfigRequest) ProtoMessage() {}

func (x *EncodeOnchainConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeOnchainConfigRequest.ProtoReflect.Descriptor instead.
func (*EncodeOnchainConfigRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{7}
}

func (x *EncodeOnchainConfigRequest) GetOnchainConfig() *OnchainConfig {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// EncodeOnchainConfigResponse is gRPC adapter for the return values of [pkg/types/mercury/OnchainConfig.Encode].
type EncodeOnchainConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig []byte `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
}

func (x *EncodeOnchainConfigResponse) Reset() {
	*x = EncodeOnchainConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeOnchainConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeOnchainConfigResponse) ProtoMessage() {}

func (x *EncodeOnchainConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeOnchainConfigResponse.ProtoReflect.Descriptor instead.
func (*EncodeOnchainConfigResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{8}
}

func (x *EncodeOnchainConfigResponse) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// DecodeOnchainConfigRequest is gRPC adapter for the inputs arguments of [pkg/types/mercury/OnchainConfig.Decode].
type DecodeOnchainConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig []byte `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
}

func (x *DecodeOnchainConfigRequest) Reset() {
	*x = DecodeOnchainConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeOnchainConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeOnchainConfigRequest) ProtoMessage() {}

func (x *DecodeOnchainConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeOnchainConfigRequest.ProtoReflect.Descriptor instead.
func (*DecodeOnchainConfigRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{9}
}

func (x *DecodeOnchainConfigRequest) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// DecodeOnchainConfigResponse has is gRPC adapter for the return values of [pkg/types/mercury/OnchainConfig.Decode].
type DecodeOnchainConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnchainConfig *OnchainConfig `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
}

func (x *DecodeOnchainConfigResponse) Reset() {
	*x = DecodeOnchainConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeOnchainConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeOnchainConfigResponse) ProtoMessage() {}

func (x *DecodeOnchainConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeOnchainConfigResponse.ProtoReflect.Descriptor instead.
func (*DecodeOnchainConfigResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{10}
}

func (x *DecodeOnchainConfigResponse) GetOnchainConfig() *OnchainConfig {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// FetchInitialMaxFinalizedBlockNumberRequest is gRPC adapter for [pkg/types/mercury/ServerFetcher.FetchInitialMaxFinalizedBlockNumber].
type FetchInitialMaxFinalizedBlockNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchInitialMaxFinalizedBlockNumberRequest) Reset() {
	*x = FetchInitialMaxFinalizedBlockNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchInitialMaxFinalizedBlockNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchInitialMaxFinalizedBlockNumberRequest) ProtoMessage() {}

func (x *FetchInitialMaxFinalizedBlockNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchInitialMaxFinalizedBlockNumberRequest.ProtoReflect.Descriptor instead.
func (*FetchInitialMaxFinalizedBlockNumberRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{11}
}

// FetchInitialMaxFinalizedBlockNumberResponse is gRPC adapter for [pkg/types/mercury/ServerFetcher.FetchInitialMaxFinalizedBlockNumber].
type FetchInitialMaxFinalizedBlockNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialMaxFinalizedBlockNumber int64 `protobuf:"varint,1,opt,name=initialMaxFinalizedBlockNumber,proto3" json:"initialMaxFinalizedBlockNumber,omitempty"`
}

func (x *FetchInitialMaxFinalizedBlockNumberResponse) Reset() {
	*x = FetchInitialMaxFinalizedBlockNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchInitialMaxFinalizedBlockNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchInitialMaxFinalizedBlockNumberResponse) ProtoMessage() {}

func (x *FetchInitialMaxFinalizedBlockNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchInitialMaxFinalizedBlockNumberResponse.ProtoReflect.Descriptor instead.
func (*FetchInitialMaxFinalizedBlockNumberResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{12}
}

func (x *FetchInitialMaxFinalizedBlockNumberResponse) GetInitialMaxFinalizedBlockNumber() int64 {
	if x != nil {
		return x.InitialMaxFinalizedBlockNumber
	}
	return 0
}

// LatestPriceRequest is gRPC adapter for [pkg/types/mercury/ServerFetcher.LatestPrice].
type LatestPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedID []byte `protobuf:"bytes,1,opt,name=feedID,proto3" json:"feedID,omitempty"` // WARNING: this must be [32]byte in ServerFetcher interface
}

func (x *LatestPriceRequest) Reset() {
	*x = LatestPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestPriceRequest) ProtoMessage() {}

func (x *LatestPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestPriceRequest.ProtoReflect.Descriptor instead.
func (*LatestPriceRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{13}
}

func (x *LatestPriceRequest) GetFeedID() []byte {
	if x != nil {
		return x.FeedID
	}
	return nil
}

// LatestPriceResponse is gRPC adapter for [pkg/types/mercury/ServerFetcher.LatestPrice].
type LatestPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestPrice *pb.BigInt `protobuf:"bytes,1,opt,name=latestPrice,proto3" json:"latestPrice,omitempty"`
}

func (x *LatestPriceResponse) Reset() {
	*x = LatestPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestPriceResponse) ProtoMessage() {}

func (x *LatestPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestPriceResponse.ProtoReflect.Descriptor instead.
func (*LatestPriceResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{14}
}

func (x *LatestPriceResponse) GetLatestPrice() *pb.BigInt {
	if x != nil {
		return x.LatestPrice
	}
	return nil
}

// LatestTimestampRequest is gRPC adapter for [pkg/types/mercury/ServerFetcher.LatestTimestamp].
type LatestTimestampRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LatestTimestampRequest) Reset() {
	*x = LatestTimestampRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestTimestampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTimestampRequest) ProtoMessage() {}

func (x *LatestTimestampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTimestampRequest.ProtoReflect.Descriptor instead.
func (*LatestTimestampRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{15}
}

// LatestTimestampResponse is gRPC adapter for [pkg/types/mercury/ServerFetcher.LatestTimestamp].
type LatestTimestampResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestTimestamp int64 `protobuf:"varint,1,opt,name=latestTimestamp,proto3" json:"latestTimestamp,omitempty"`
}

func (x *LatestTimestampResponse) Reset() {
	*x = LatestTimestampResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestTimestampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTimestampResponse) ProtoMessage() {}

func (x *LatestTimestampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTimestampResponse.ProtoReflect.Descriptor instead.
func (*LatestTimestampResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{16}
}

func (x *LatestTimestampResponse) GetLatestTimestamp() int64 {
	if x != nil {
		return x.LatestTimestamp
	}
	return 0
}

// Head is gRPC adapter for the Head struct [pkg/types/mercury/MercuryChainReader].
type Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number    uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Head) Reset() {
	*x = Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{17}
}

func (x *Head) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Head) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Head) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// LatestHeadsRequest is gRPC adapter for input arguments to [pkg/types/mercury/MercuryChainReader.LatestHeads].
type LatestHeadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumHeads int64 `protobuf:"varint,1,opt,name=numHeads,proto3" json:"numHeads,omitempty"`
}

func (x *LatestHeadsRequest) Reset() {
	*x = LatestHeadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestHeadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestHeadsRequest) ProtoMessage() {}

func (x *LatestHeadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestHeadsRequest.ProtoReflect.Descriptor instead.
func (*LatestHeadsRequest) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{18}
}

func (x *LatestHeadsRequest) GetNumHeads() int64 {
	if x != nil {
		return x.NumHeads
	}
	return 0
}

// LatestHeadsResponse is gRPC adapter for return arguments to [pkg/types/mercury/MercuryChainReader.LatestHeads].
type LatestHeadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heads []*Head `protobuf:"bytes,1,rep,name=heads,proto3" json:"heads,omitempty"`
}

func (x *LatestHeadsResponse) Reset() {
	*x = LatestHeadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mercury_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestHeadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestHeadsResponse) ProtoMessage() {}

func (x *LatestHeadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestHeadsResponse.ProtoReflect.Descriptor instead.
func (*LatestHeadsResponse) Descriptor() ([]byte, []int) {
	return file_mercury_proto_rawDescGZIP(), []int{19}
}

func (x *LatestHeadsResponse) GetHeads() []*Head {
	if x != nil {
		return x.Heads
	}
	return nil
}

var File_mercury_proto protoreflect.FileDescriptor

var file_mercury_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x1a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x33, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x76, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x33,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x33, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x1b, 0x4e, 0x65, 0x77, 0x4d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x4e, 0x65, 0x77, 0x4d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x31, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x31, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x1b,
	0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x92, 0x01, 0x0a, 0x1a,
	0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x44,
	0x22, 0x4d, 0x0a, 0x1b, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22,
	0x4f, 0x0a, 0x0d, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x22, 0x6b, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d,
	0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x43, 0x0a,
	0x1b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x42, 0x0a, 0x1a, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6c, 0x0a, 0x1b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x2c, 0x0a, 0x2a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x75, 0x0a, 0x2b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x12, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x13, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x18,
	0x0a, 0x16, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x17, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x50, 0x0a,
	0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x30, 0x0a, 0x12, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x73, 0x22, 0x4b, 0x0a, 0x13, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x68, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x52, 0x05, 0x68, 0x65, 0x61, 0x64, 0x73, 0x32, 0xa5,
	0x03, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56,
	0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x31, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77,
	0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x32, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x84, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x56, 0x33, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x56, 0x33, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x86, 0x02, 0x0a, 0x12, 0x4f, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x77, 0x0a,
	0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0xb1, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56,
	0x33, 0x12, 0x72, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x1e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xa2, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x56, 0x31, 0x12, 0x72, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0f, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x33, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb1, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x32, 0x12, 0x72, 0x0a, 0x0b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab,
	0x01, 0x0a, 0x1e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x42, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xae, 0x03, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0xb4,
	0x01, 0x0a, 0x23, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61,
	0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x82, 0x01,
	0x0a, 0x12, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x55, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69,
	0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x3b,
	0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mercury_proto_rawDescOnce sync.Once
	file_mercury_proto_rawDescData = file_mercury_proto_rawDesc
)

func file_mercury_proto_rawDescGZIP() []byte {
	file_mercury_proto_rawDescOnce.Do(func() {
		file_mercury_proto_rawDescData = protoimpl.X.CompressGZIP(file_mercury_proto_rawDescData)
	})
	return file_mercury_proto_rawDescData
}

var file_mercury_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_mercury_proto_goTypes = []interface{}{
	(*NewMercuryV3FactoryRequest)(nil),                  // 0: loop.internal.pb.mercury.NewMercuryV3FactoryRequest
	(*NewMercuryV3FactoryResponse)(nil),                 // 1: loop.internal.pb.mercury.NewMercuryV3FactoryResponse
	(*NewMercuryV1FactoryRequest)(nil),                  // 2: loop.internal.pb.mercury.NewMercuryV1FactoryRequest
	(*NewMercuryV1FactoryResponse)(nil),                 // 3: loop.internal.pb.mercury.NewMercuryV1FactoryResponse
	(*NewMercuryV2FactoryRequest)(nil),                  // 4: loop.internal.pb.mercury.NewMercuryV2FactoryRequest
	(*NewMercuryV2FactoryResponse)(nil),                 // 5: loop.internal.pb.mercury.NewMercuryV2FactoryResponse
	(*OnchainConfig)(nil),                               // 6: loop.internal.pb.mercury.OnchainConfig
	(*EncodeOnchainConfigRequest)(nil),                  // 7: loop.internal.pb.mercury.EncodeOnchainConfigRequest
	(*EncodeOnchainConfigResponse)(nil),                 // 8: loop.internal.pb.mercury.EncodeOnchainConfigResponse
	(*DecodeOnchainConfigRequest)(nil),                  // 9: loop.internal.pb.mercury.DecodeOnchainConfigRequest
	(*DecodeOnchainConfigResponse)(nil),                 // 10: loop.internal.pb.mercury.DecodeOnchainConfigResponse
	(*FetchInitialMaxFinalizedBlockNumberRequest)(nil),  // 11: loop.internal.pb.mercury.FetchInitialMaxFinalizedBlockNumberRequest
	(*FetchInitialMaxFinalizedBlockNumberResponse)(nil), // 12: loop.internal.pb.mercury.FetchInitialMaxFinalizedBlockNumberResponse
	(*LatestPriceRequest)(nil),                          // 13: loop.internal.pb.mercury.LatestPriceRequest
	(*LatestPriceResponse)(nil),                         // 14: loop.internal.pb.mercury.LatestPriceResponse
	(*LatestTimestampRequest)(nil),                      // 15: loop.internal.pb.mercury.LatestTimestampRequest
	(*LatestTimestampResponse)(nil),                     // 16: loop.internal.pb.mercury.LatestTimestampResponse
	(*Head)(nil),                                        // 17: loop.internal.pb.mercury.Head
	(*LatestHeadsRequest)(nil),                          // 18: loop.internal.pb.mercury.LatestHeadsRequest
	(*LatestHeadsResponse)(nil),                         // 19: loop.internal.pb.mercury.LatestHeadsResponse
	(*pb.BigInt)(nil),                                   // 20: loop.BigInt
	(*v3.BuildReportRequest)(nil),                       // 21: loop.internal.pb.mercury.v3.BuildReportRequest
	(*v3.MaxReportLengthRequest)(nil),                   // 22: loop.internal.pb.mercury.v3.MaxReportLengthRequest
	(*v3.ObservationTimestampFromReportRequest)(nil),    // 23: loop.internal.pb.mercury.v3.ObservationTimestampFromReportRequest
	(*v1.BuildReportRequest)(nil),                       // 24: loop.internal.pb.mercury.v1.BuildReportRequest
	(*v1.MaxReportLengthRequest)(nil),                   // 25: loop.internal.pb.mercury.v1.MaxReportLengthRequest
	(*v1.CurrentBlockNumFromReportRequest)(nil),         // 26: loop.internal.pb.mercury.v1.CurrentBlockNumFromReportRequest
	(*v2.BuildReportRequest)(nil),                       // 27: loop.internal.pb.mercury.v2.BuildReportRequest
	(*v2.MaxReportLengthRequest)(nil),                   // 28: loop.internal.pb.mercury.v2.MaxReportLengthRequest
	(*v2.ObservationTimestampFromReportRequest)(nil),    // 29: loop.internal.pb.mercury.v2.ObservationTimestampFromReportRequest
	(*v3.BuildReportResponse)(nil),                      // 30: loop.internal.pb.mercury.v3.BuildReportResponse
	(*v3.MaxReportLengthResponse)(nil),                  // 31: loop.internal.pb.mercury.v3.MaxReportLengthResponse
	(*v3.ObservationTimestampFromReportResponse)(nil),   // 32: loop.internal.pb.mercury.v3.ObservationTimestampFromReportResponse
	(*v1.BuildReportResponse)(nil),                      // 33: loop.internal.pb.mercury.v1.BuildReportResponse
	(*v1.MaxReportLengthResponse)(nil),                  // 34: loop.internal.pb.mercury.v1.MaxReportLengthResponse
	(*v1.CurrentBlockNumFromReportResponse)(nil),        // 35: loop.internal.pb.mercury.v1.CurrentBlockNumFromReportResponse
	(*v2.BuildReportResponse)(nil),                      // 36: loop.internal.pb.mercury.v2.BuildReportResponse
	(*v2.MaxReportLengthResponse)(nil),                  // 37: loop.internal.pb.mercury.v2.MaxReportLengthResponse
	(*v2.ObservationTimestampFromReportResponse)(nil),   // 38: loop.internal.pb.mercury.v2.ObservationTimestampFromReportResponse
}
var file_mercury_proto_depIdxs = []int32{
	20, // 0: loop.internal.pb.mercury.OnchainConfig.min:type_name -> loop.BigInt
	20, // 1: loop.internal.pb.mercury.OnchainConfig.max:type_name -> loop.BigInt
	6,  // 2: loop.internal.pb.mercury.EncodeOnchainConfigRequest.onchainConfig:type_name -> loop.internal.pb.mercury.OnchainConfig
	6,  // 3: loop.internal.pb.mercury.DecodeOnchainConfigResponse.onchainConfig:type_name -> loop.internal.pb.mercury.OnchainConfig
	20, // 4: loop.internal.pb.mercury.LatestPriceResponse.latestPrice:type_name -> loop.BigInt
	17, // 5: loop.internal.pb.mercury.LatestHeadsResponse.heads:type_name -> loop.internal.pb.mercury.Head
	2,  // 6: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV1Factory:input_type -> loop.internal.pb.mercury.NewMercuryV1FactoryRequest
	4,  // 7: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV2Factory:input_type -> loop.internal.pb.mercury.NewMercuryV2FactoryRequest
	0,  // 8: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV3Factory:input_type -> loop.internal.pb.mercury.NewMercuryV3FactoryRequest
	7,  // 9: loop.internal.pb.mercury.OnchainConfigCodec.Encode:input_type -> loop.internal.pb.mercury.EncodeOnchainConfigRequest
	9,  // 10: loop.internal.pb.mercury.OnchainConfigCodec.Decode:input_type -> loop.internal.pb.mercury.DecodeOnchainConfigRequest
	21, // 11: loop.internal.pb.mercury.ReportCodecV3.BuildReport:input_type -> loop.internal.pb.mercury.v3.BuildReportRequest
	22, // 12: loop.internal.pb.mercury.ReportCodecV3.MaxReportLength:input_type -> loop.internal.pb.mercury.v3.MaxReportLengthRequest
	23, // 13: loop.internal.pb.mercury.ReportCodecV3.ObservationTimestampFromReport:input_type -> loop.internal.pb.mercury.v3.ObservationTimestampFromReportRequest
	24, // 14: loop.internal.pb.mercury.ReportCodecV1.BuildReport:input_type -> loop.internal.pb.mercury.v1.BuildReportRequest
	25, // 15: loop.internal.pb.mercury.ReportCodecV1.MaxReportLength:input_type -> loop.internal.pb.mercury.v1.MaxReportLengthRequest
	26, // 16: loop.internal.pb.mercury.ReportCodecV1.CurrentBlockNumFromReport:input_type -> loop.internal.pb.mercury.v1.CurrentBlockNumFromReportRequest
	27, // 17: loop.internal.pb.mercury.ReportCodecV2.BuildReport:input_type -> loop.internal.pb.mercury.v2.BuildReportRequest
	28, // 18: loop.internal.pb.mercury.ReportCodecV2.MaxReportLength:input_type -> loop.internal.pb.mercury.v2.MaxReportLengthRequest
	29, // 19: loop.internal.pb.mercury.ReportCodecV2.ObservationTimestampFromReport:input_type -> loop.internal.pb.mercury.v2.ObservationTimestampFromReportRequest
	11, // 20: loop.internal.pb.mercury.ServerFetcher.FetchInitialMaxFinalizedBlockNumber:input_type -> loop.internal.pb.mercury.FetchInitialMaxFinalizedBlockNumberRequest
	13, // 21: loop.internal.pb.mercury.ServerFetcher.LatestPrice:input_type -> loop.internal.pb.mercury.LatestPriceRequest
	15, // 22: loop.internal.pb.mercury.ServerFetcher.LatestTimestamp:input_type -> loop.internal.pb.mercury.LatestTimestampRequest
	18, // 23: loop.internal.pb.mercury.MercuryChainReader.LatestHeads:input_type -> loop.internal.pb.mercury.LatestHeadsRequest
	3,  // 24: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV1Factory:output_type -> loop.internal.pb.mercury.NewMercuryV1FactoryResponse
	5,  // 25: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV2Factory:output_type -> loop.internal.pb.mercury.NewMercuryV2FactoryResponse
	1,  // 26: loop.internal.pb.mercury.MercuryAdapter.NewMercuryV3Factory:output_type -> loop.internal.pb.mercury.NewMercuryV3FactoryResponse
	8,  // 27: loop.internal.pb.mercury.OnchainConfigCodec.Encode:output_type -> loop.internal.pb.mercury.EncodeOnchainConfigResponse
	10, // 28: loop.internal.pb.mercury.OnchainConfigCodec.Decode:output_type -> loop.internal.pb.mercury.DecodeOnchainConfigResponse
	30, // 29: loop.internal.pb.mercury.ReportCodecV3.BuildReport:output_type -> loop.internal.pb.mercury.v3.BuildReportResponse
	31, // 30: loop.internal.pb.mercury.ReportCodecV3.MaxReportLength:output_type -> loop.internal.pb.mercury.v3.MaxReportLengthResponse
	32, // 31: loop.internal.pb.mercury.ReportCodecV3.ObservationTimestampFromReport:output_type -> loop.internal.pb.mercury.v3.ObservationTimestampFromReportResponse
	33, // 32: loop.internal.pb.mercury.ReportCodecV1.BuildReport:output_type -> loop.internal.pb.mercury.v1.BuildReportResponse
	34, // 33: loop.internal.pb.mercury.ReportCodecV1.MaxReportLength:output_type -> loop.internal.pb.mercury.v1.MaxReportLengthResponse
	35, // 34: loop.internal.pb.mercury.ReportCodecV1.CurrentBlockNumFromReport:output_type -> loop.internal.pb.mercury.v1.CurrentBlockNumFromReportResponse
	36, // 35: loop.internal.pb.mercury.ReportCodecV2.BuildReport:output_type -> loop.internal.pb.mercury.v2.BuildReportResponse
	37, // 36: loop.internal.pb.mercury.ReportCodecV2.MaxReportLength:output_type -> loop.internal.pb.mercury.v2.MaxReportLengthResponse
	38, // 37: loop.internal.pb.mercury.ReportCodecV2.ObservationTimestampFromReport:output_type -> loop.internal.pb.mercury.v2.ObservationTimestampFromReportResponse
	12, // 38: loop.internal.pb.mercury.ServerFetcher.FetchInitialMaxFinalizedBlockNumber:output_type -> loop.internal.pb.mercury.FetchInitialMaxFinalizedBlockNumberResponse
	14, // 39: loop.internal.pb.mercury.ServerFetcher.LatestPrice:output_type -> loop.internal.pb.mercury.LatestPriceResponse
	16, // 40: loop.internal.pb.mercury.ServerFetcher.LatestTimestamp:output_type -> loop.internal.pb.mercury.LatestTimestampResponse
	19, // 41: loop.internal.pb.mercury.MercuryChainReader.LatestHeads:output_type -> loop.internal.pb.mercury.LatestHeadsResponse
	24, // [24:42] is the sub-list for method output_type
	6,  // [6:24] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_mercury_proto_init() }
func file_mercury_proto_init() {
	if File_mercury_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mercury_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMercuryV3FactoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMercuryV3FactoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMercuryV1FactoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMercuryV1FactoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMercuryV2FactoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMercuryV2FactoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnchainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeOnchainConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeOnchainConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeOnchainConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeOnchainConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchInitialMaxFinalizedBlockNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchInitialMaxFinalizedBlockNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestTimestampRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestTimestampResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestHeadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mercury_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestHeadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mercury_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_mercury_proto_goTypes,
		DependencyIndexes: file_mercury_proto_depIdxs,
		MessageInfos:      file_mercury_proto_msgTypes,
	}.Build()
	File_mercury_proto = out.File
	file_mercury_proto_rawDesc = nil
	file_mercury_proto_goTypes = nil
	file_mercury_proto_depIdxs = nil
}
