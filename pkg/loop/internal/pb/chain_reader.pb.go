// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: chain_reader.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComparisonOperator int32

const (
	ComparisonOperator_Eq  ComparisonOperator = 0
	ComparisonOperator_Neq ComparisonOperator = 1
	ComparisonOperator_Gt  ComparisonOperator = 2
	ComparisonOperator_Lt  ComparisonOperator = 3
	ComparisonOperator_Gte ComparisonOperator = 4
	ComparisonOperator_Lte ComparisonOperator = 5
)

// Enum value maps for ComparisonOperator.
var (
	ComparisonOperator_name = map[int32]string{
		0: "Eq",
		1: "Neq",
		2: "Gt",
		3: "Lt",
		4: "Gte",
		5: "Lte",
	}
	ComparisonOperator_value = map[string]int32{
		"Eq":  0,
		"Neq": 1,
		"Gt":  2,
		"Lt":  3,
		"Gte": 4,
		"Lte": 5,
	}
)

func (x ComparisonOperator) Enum() *ComparisonOperator {
	p := new(ComparisonOperator)
	*p = x
	return p
}

func (x ComparisonOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_reader_proto_enumTypes[0].Descriptor()
}

func (ComparisonOperator) Type() protoreflect.EnumType {
	return &file_chain_reader_proto_enumTypes[0]
}

func (x ComparisonOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOperator.Descriptor instead.
func (ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{0}
}

type BooleanOperator int32

const (
	BooleanOperator_AND BooleanOperator = 0
	BooleanOperator_OR  BooleanOperator = 1
)

// Enum value maps for BooleanOperator.
var (
	BooleanOperator_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	BooleanOperator_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x BooleanOperator) Enum() *BooleanOperator {
	p := new(BooleanOperator)
	*p = x
	return p
}

func (x BooleanOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_reader_proto_enumTypes[1].Descriptor()
}

func (BooleanOperator) Type() protoreflect.EnumType {
	return &file_chain_reader_proto_enumTypes[1]
}

func (x BooleanOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanOperator.Descriptor instead.
func (BooleanOperator) EnumDescriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{1}
}

type ConfirmationLevel int32

const (
	ConfirmationLevel_Finalized   ConfirmationLevel = 0
	ConfirmationLevel_Unconfirmed ConfirmationLevel = 1
)

// Enum value maps for ConfirmationLevel.
var (
	ConfirmationLevel_name = map[int32]string{
		0: "Finalized",
		1: "Unconfirmed",
	}
	ConfirmationLevel_value = map[string]int32{
		"Finalized":   0,
		"Unconfirmed": 1,
	}
)

func (x ConfirmationLevel) Enum() *ConfirmationLevel {
	p := new(ConfirmationLevel)
	*p = x
	return p
}

func (x ConfirmationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfirmationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_reader_proto_enumTypes[2].Descriptor()
}

func (ConfirmationLevel) Type() protoreflect.EnumType {
	return &file_chain_reader_proto_enumTypes[2]
}

func (x ConfirmationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfirmationLevel.Descriptor instead.
func (ConfirmationLevel) EnumDescriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{2}
}

type SortDirection int32

const (
	SortDirection_Asc  SortDirection = 0
	SortDirection_Desc SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "Asc",
		1: "Desc",
	}
	SortDirection_value = map[string]int32{
		"Asc":  0,
		"Desc": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_reader_proto_enumTypes[3].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_chain_reader_proto_enumTypes[3]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{3}
}

// GetLatestValueRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.GetLatestValue].
type GetLatestValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractName string          `protobuf:"bytes,1,opt,name=contractName,proto3" json:"contractName,omitempty"`
	Method       string          `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Params       *VersionedBytes `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GetLatestValueRequest) Reset() {
	*x = GetLatestValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestValueRequest) ProtoMessage() {}

func (x *GetLatestValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestValueRequest.ProtoReflect.Descriptor instead.
func (*GetLatestValueRequest) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{0}
}

func (x *GetLatestValueRequest) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *GetLatestValueRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *GetLatestValueRequest) GetParams() *VersionedBytes {
	if x != nil {
		return x.Params
	}
	return nil
}

// QueryKeysByValuesRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryKey].
type QueryKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	QueryFilter  *QueryFilter  `protobuf:"bytes,2,opt,name=query_filter,json=queryFilter,proto3" json:"query_filter,omitempty"`
	LimitAndSort *LimitAndSort `protobuf:"bytes,3,opt,name=limit_and_sort,json=limitAndSort,proto3" json:"limit_and_sort,omitempty"`
}

func (x *QueryKeyRequest) Reset() {
	*x = QueryKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKeyRequest) ProtoMessage() {}

func (x *QueryKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKeyRequest.ProtoReflect.Descriptor instead.
func (*QueryKeyRequest) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{1}
}

func (x *QueryKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *QueryKeyRequest) GetQueryFilter() *QueryFilter {
	if x != nil {
		return x.QueryFilter
	}
	return nil
}

func (x *QueryKeyRequest) GetLimitAndSort() *LimitAndSort {
	if x != nil {
		return x.LimitAndSort
	}
	return nil
}

// QueryKeysByValuesRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryKeys].
type QueryKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys         []string      `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	QueryFilter  *QueryFilter  `protobuf:"bytes,2,opt,name=query_filter,json=queryFilter,proto3" json:"query_filter,omitempty"`
	LimitAndSort *LimitAndSort `protobuf:"bytes,3,opt,name=limit_and_sort,json=limitAndSort,proto3" json:"limit_and_sort,omitempty"`
}

func (x *QueryKeysRequest) Reset() {
	*x = QueryKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKeysRequest) ProtoMessage() {}

func (x *QueryKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKeysRequest.ProtoReflect.Descriptor instead.
func (*QueryKeysRequest) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{2}
}

func (x *QueryKeysRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *QueryKeysRequest) GetQueryFilter() *QueryFilter {
	if x != nil {
		return x.QueryFilter
	}
	return nil
}

func (x *QueryKeysRequest) GetLimitAndSort() *LimitAndSort {
	if x != nil {
		return x.LimitAndSort
	}
	return nil
}

// QueryByKeyValuesComparisonRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryByKeyValuesComparison].
type QueryByKeyValuesComparisonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyValuesComparator *KeyValuesComparator `protobuf:"bytes,1,opt,name=key_values_comparator,json=keyValuesComparator,proto3" json:"key_values_comparator,omitempty"`
	QueryFilter         *QueryFilter         `protobuf:"bytes,2,opt,name=query_filter,json=queryFilter,proto3" json:"query_filter,omitempty"`
	LimitAndSort        *LimitAndSort        `protobuf:"bytes,3,opt,name=limit_and_sort,json=limitAndSort,proto3" json:"limit_and_sort,omitempty"`
}

func (x *QueryByKeyValuesComparisonRequest) Reset() {
	*x = QueryByKeyValuesComparisonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryByKeyValuesComparisonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryByKeyValuesComparisonRequest) ProtoMessage() {}

func (x *QueryByKeyValuesComparisonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryByKeyValuesComparisonRequest.ProtoReflect.Descriptor instead.
func (*QueryByKeyValuesComparisonRequest) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{3}
}

func (x *QueryByKeyValuesComparisonRequest) GetKeyValuesComparator() *KeyValuesComparator {
	if x != nil {
		return x.KeyValuesComparator
	}
	return nil
}

func (x *QueryByKeyValuesComparisonRequest) GetQueryFilter() *QueryFilter {
	if x != nil {
		return x.QueryFilter
	}
	return nil
}

func (x *QueryByKeyValuesComparisonRequest) GetLimitAndSort() *LimitAndSort {
	if x != nil {
		return x.LimitAndSort
	}
	return nil
}

// QueryByKeysValuesComparisonRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryByKeysValuesComparison].
type QueryByKeysValuesComparisonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeysValuesComparator []*KeyValuesComparator `protobuf:"bytes,1,rep,name=keys_values_comparator,json=keysValuesComparator,proto3" json:"keys_values_comparator,omitempty"`
	QueryFilter          *QueryFilter           `protobuf:"bytes,2,opt,name=query_filter,json=queryFilter,proto3" json:"query_filter,omitempty"`
	LimitAndSort         *LimitAndSort          `protobuf:"bytes,3,opt,name=limit_and_sort,json=limitAndSort,proto3" json:"limit_and_sort,omitempty"`
}

func (x *QueryByKeysValuesComparisonRequest) Reset() {
	*x = QueryByKeysValuesComparisonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryByKeysValuesComparisonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryByKeysValuesComparisonRequest) ProtoMessage() {}

func (x *QueryByKeysValuesComparisonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryByKeysValuesComparisonRequest.ProtoReflect.Descriptor instead.
func (*QueryByKeysValuesComparisonRequest) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{4}
}

func (x *QueryByKeysValuesComparisonRequest) GetKeysValuesComparator() []*KeyValuesComparator {
	if x != nil {
		return x.KeysValuesComparator
	}
	return nil
}

func (x *QueryByKeysValuesComparisonRequest) GetQueryFilter() *QueryFilter {
	if x != nil {
		return x.QueryFilter
	}
	return nil
}

func (x *QueryByKeysValuesComparisonRequest) GetLimitAndSort() *LimitAndSort {
	if x != nil {
		return x.LimitAndSort
	}
	return nil
}

// GetLatestValueRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.BindRequest].
type BindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bindings []*BoundContract `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
}

func (x *BindRequest) Reset() {
	*x = BindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindRequest) ProtoMessage() {}

func (x *BindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindRequest.ProtoReflect.Descriptor instead.
func (*BindRequest) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{5}
}

func (x *BindRequest) GetBindings() []*BoundContract {
	if x != nil {
		return x.Bindings
	}
	return nil
}

// GetLatestValueReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.GetLatestValue].
type GetLatestValueReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetVal *VersionedBytes `protobuf:"bytes,1,opt,name=retVal,proto3" json:"retVal,omitempty"`
}

func (x *GetLatestValueReply) Reset() {
	*x = GetLatestValueReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestValueReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestValueReply) ProtoMessage() {}

func (x *GetLatestValueReply) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestValueReply.ProtoReflect.Descriptor instead.
func (*GetLatestValueReply) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{6}
}

func (x *GetLatestValueReply) GetRetVal() *VersionedBytes {
	if x != nil {
		return x.RetVal
	}
	return nil
}

// QueryKeysReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryKey].
type QueryKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequences *Sequences `protobuf:"bytes,1,opt,name=sequences,proto3" json:"sequences,omitempty"`
}

func (x *QueryKeyReply) Reset() {
	*x = QueryKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKeyReply) ProtoMessage() {}

func (x *QueryKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKeyReply.ProtoReflect.Descriptor instead.
func (*QueryKeyReply) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{7}
}

func (x *QueryKeyReply) GetSequences() *Sequences {
	if x != nil {
		return x.Sequences
	}
	return nil
}

// QueryKeysReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryKeys].
type QueryKeysReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequences []*Sequences `protobuf:"bytes,1,rep,name=sequences,proto3" json:"sequences,omitempty"`
}

func (x *QueryKeysReply) Reset() {
	*x = QueryKeysReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKeysReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKeysReply) ProtoMessage() {}

func (x *QueryKeysReply) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKeysReply.ProtoReflect.Descriptor instead.
func (*QueryKeysReply) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{8}
}

func (x *QueryKeysReply) GetSequences() []*Sequences {
	if x != nil {
		return x.Sequences
	}
	return nil
}

// QueryByKeyValuesComparisonReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryByKeyValuesComparison].
type QueryByKeyValuesComparisonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequences *Sequences `protobuf:"bytes,1,opt,name=sequences,proto3" json:"sequences,omitempty"`
}

func (x *QueryByKeyValuesComparisonReply) Reset() {
	*x = QueryByKeyValuesComparisonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryByKeyValuesComparisonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryByKeyValuesComparisonReply) ProtoMessage() {}

func (x *QueryByKeyValuesComparisonReply) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryByKeyValuesComparisonReply.ProtoReflect.Descriptor instead.
func (*QueryByKeyValuesComparisonReply) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{9}
}

func (x *QueryByKeyValuesComparisonReply) GetSequences() *Sequences {
	if x != nil {
		return x.Sequences
	}
	return nil
}

// QueryByKeysValuesComparisonReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryByKeysValuesComparison].
type QueryByKeysValuesComparisonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequences []*Sequences `protobuf:"bytes,1,rep,name=sequences,proto3" json:"sequences,omitempty"`
}

func (x *QueryByKeysValuesComparisonReply) Reset() {
	*x = QueryByKeysValuesComparisonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryByKeysValuesComparisonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryByKeysValuesComparisonReply) ProtoMessage() {}

func (x *QueryByKeysValuesComparisonReply) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryByKeysValuesComparisonReply.ProtoReflect.Descriptor instead.
func (*QueryByKeysValuesComparisonReply) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{10}
}

func (x *QueryByKeysValuesComparisonReply) GetSequences() []*Sequences {
	if x != nil {
		return x.Sequences
	}
	return nil
}

// Head is gRPC adapter for the Head struct [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.Head].
type Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number    uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Head) Reset() {
	*x = Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{11}
}

func (x *Head) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Head) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Head) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Head is gRPC adapter for the Head struct [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.Sequence].
type Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceCursor string          `protobuf:"bytes,1,opt,name=sequence_cursor,json=sequenceCursor,proto3" json:"sequence_cursor,omitempty"`
	Head           *Head           `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	Data           *VersionedBytes `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Sequence) Reset() {
	*x = Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequence) ProtoMessage() {}

func (x *Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequence.ProtoReflect.Descriptor instead.
func (*Sequence) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{12}
}

func (x *Sequence) GetSequenceCursor() string {
	if x != nil {
		return x.SequenceCursor
	}
	return ""
}

func (x *Sequence) GetHead() *Head {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *Sequence) GetData() *VersionedBytes {
	if x != nil {
		return x.Data
	}
	return nil
}

type Sequences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequences []*Sequence `protobuf:"bytes,1,rep,name=sequences,proto3" json:"sequences,omitempty"`
}

func (x *Sequences) Reset() {
	*x = Sequences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequences) ProtoMessage() {}

func (x *Sequences) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequences.ProtoReflect.Descriptor instead.
func (*Sequences) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{13}
}

func (x *Sequences) GetSequences() []*Sequence {
	if x != nil {
		return x.Sequences
	}
	return nil
}

// BoundContract represents a [github.com/smartcontractkit/chainlink-common/pkg/types.BoundContract].
type BoundContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pending bool   `protobuf:"varint,3,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *BoundContract) Reset() {
	*x = BoundContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundContract) ProtoMessage() {}

func (x *BoundContract) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundContract.ProtoReflect.Descriptor instead.
func (*BoundContract) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{14}
}

func (x *BoundContract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BoundContract) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoundContract) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

type ValueComparator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO pass interface{} here
	Value    string             `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Operator ComparisonOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=loop.ComparisonOperator" json:"operator,omitempty"`
}

func (x *ValueComparator) Reset() {
	*x = ValueComparator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueComparator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueComparator) ProtoMessage() {}

func (x *ValueComparator) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueComparator.ProtoReflect.Descriptor instead.
func (*ValueComparator) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{15}
}

func (x *ValueComparator) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ValueComparator) GetOperator() ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return ComparisonOperator_Eq
}

type KeyValuesComparator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              string             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ValueComparators []*ValueComparator `protobuf:"bytes,2,rep,name=value_comparators,json=valueComparators,proto3" json:"value_comparators,omitempty"`
}

func (x *KeyValuesComparator) Reset() {
	*x = KeyValuesComparator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuesComparator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuesComparator) ProtoMessage() {}

func (x *KeyValuesComparator) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuesComparator.ProtoReflect.Descriptor instead.
func (*KeyValuesComparator) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{16}
}

func (x *KeyValuesComparator) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuesComparator) GetValueComparators() []*ValueComparator {
	if x != nil {
		return x.ValueComparators
	}
	return nil
}

// QueryFilter represents a lightweight orm like DSL defined for filtering over common blockchain primitives.
type QueryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression []*Expression `protobuf:"bytes,1,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *QueryFilter) Reset() {
	*x = QueryFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFilter) ProtoMessage() {}

func (x *QueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFilter.ProtoReflect.Descriptor instead.
func (*QueryFilter) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{17}
}

func (x *QueryFilter) GetExpression() []*Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// Expression encapsulates a single unit of filtering logic, which can be a common blockchain primitive or a composite of boolean expressions.
// This allows for both simple and more complex nested expressions.
type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Evaluator:
	//
	//	*Expression_Primitive
	//	*Expression_BooleanExpression
	Evaluator isExpression_Evaluator `protobuf_oneof:"evaluator"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{18}
}

func (m *Expression) GetEvaluator() isExpression_Evaluator {
	if m != nil {
		return m.Evaluator
	}
	return nil
}

func (x *Expression) GetPrimitive() *Primitive {
	if x, ok := x.GetEvaluator().(*Expression_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (x *Expression) GetBooleanExpression() *BooleanExpression {
	if x, ok := x.GetEvaluator().(*Expression_BooleanExpression); ok {
		return x.BooleanExpression
	}
	return nil
}

type isExpression_Evaluator interface {
	isExpression_Evaluator()
}

type Expression_Primitive struct {
	Primitive *Primitive `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}

type Expression_BooleanExpression struct {
	BooleanExpression *BooleanExpression `protobuf:"bytes,2,opt,name=boolean_expression,json=booleanExpression,proto3,oneof"`
}

func (*Expression_Primitive) isExpression_Evaluator() {}

func (*Expression_BooleanExpression) isExpression_Evaluator() {}

type BooleanExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BooleanOperator BooleanOperator `protobuf:"varint,1,opt,name=boolean_operator,json=booleanOperator,proto3,enum=loop.BooleanOperator" json:"boolean_operator,omitempty"`
	Expression      []*Expression   `protobuf:"bytes,2,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *BooleanExpression) Reset() {
	*x = BooleanExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanExpression) ProtoMessage() {}

func (x *BooleanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanExpression.ProtoReflect.Descriptor instead.
func (*BooleanExpression) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{19}
}

func (x *BooleanExpression) GetBooleanOperator() BooleanOperator {
	if x != nil {
		return x.BooleanOperator
	}
	return BooleanOperator_AND
}

func (x *BooleanExpression) GetExpression() []*Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A []*Expression `protobuf:"bytes,1,rep,name=a,proto3" json:"a,omitempty"`
}

func (x *And) Reset() {
	*x = And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{20}
}

func (x *And) GetA() []*Expression {
	if x != nil {
		return x.A
	}
	return nil
}

type Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A []*Expression `protobuf:"bytes,1,rep,name=a,proto3" json:"a,omitempty"`
}

func (x *Or) Reset() {
	*x = Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or) ProtoMessage() {}

func (x *Or) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or.ProtoReflect.Descriptor instead.
func (*Or) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{21}
}

func (x *Or) GetA() []*Expression {
	if x != nil {
		return x.A
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{22}
}

func (x *Address) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Confirmations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confirmations ConfirmationLevel `protobuf:"varint,1,opt,name=confirmations,proto3,enum=loop.ConfirmationLevel" json:"confirmations,omitempty"`
}

func (x *Confirmations) Reset() {
	*x = Confirmations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Confirmations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confirmations) ProtoMessage() {}

func (x *Confirmations) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confirmations.ProtoReflect.Descriptor instead.
func (*Confirmations) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{23}
}

func (x *Confirmations) GetConfirmations() ConfirmationLevel {
	if x != nil {
		return x.Confirmations
	}
	return ConfirmationLevel_Finalized
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64             `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Operator    ComparisonOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=loop.ComparisonOperator" json:"operator,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{24}
}

func (x *Block) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Block) GetOperator() ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return ComparisonOperator_Eq
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64             `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Operator  ComparisonOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=loop.ComparisonOperator" json:"operator,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{25}
}

func (x *Timestamp) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Timestamp) GetOperator() ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return ComparisonOperator_Eq
}

type TxHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *TxHash) Reset() {
	*x = TxHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxHash) ProtoMessage() {}

func (x *TxHash) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxHash.ProtoReflect.Descriptor instead.
func (*TxHash) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{26}
}

func (x *TxHash) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

// Primitive defines the basic building blocks for filter conditions based around fundamental blockchain concepts.
type Primitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Comparator:
	//
	//	*Primitive_Address
	//	*Primitive_Confirmations
	//	*Primitive_Block
	//	*Primitive_Timestamp
	//	*Primitive_TxHash
	Comparator isPrimitive_Comparator `protobuf_oneof:"comparator"`
}

func (x *Primitive) Reset() {
	*x = Primitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Primitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Primitive) ProtoMessage() {}

func (x *Primitive) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Primitive.ProtoReflect.Descriptor instead.
func (*Primitive) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{27}
}

func (m *Primitive) GetComparator() isPrimitive_Comparator {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (x *Primitive) GetAddress() *Address {
	if x, ok := x.GetComparator().(*Primitive_Address); ok {
		return x.Address
	}
	return nil
}

func (x *Primitive) GetConfirmations() *Confirmations {
	if x, ok := x.GetComparator().(*Primitive_Confirmations); ok {
		return x.Confirmations
	}
	return nil
}

func (x *Primitive) GetBlock() *Block {
	if x, ok := x.GetComparator().(*Primitive_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Primitive) GetTimestamp() *Timestamp {
	if x, ok := x.GetComparator().(*Primitive_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Primitive) GetTxHash() *TxHash {
	if x, ok := x.GetComparator().(*Primitive_TxHash); ok {
		return x.TxHash
	}
	return nil
}

type isPrimitive_Comparator interface {
	isPrimitive_Comparator()
}

type Primitive_Address struct {
	Address *Address `protobuf:"bytes,3,opt,name=address,proto3,oneof"`
}

type Primitive_Confirmations struct {
	Confirmations *Confirmations `protobuf:"bytes,4,opt,name=confirmations,proto3,oneof"`
}

type Primitive_Block struct {
	Block *Block `protobuf:"bytes,5,opt,name=block,proto3,oneof"`
}

type Primitive_Timestamp struct {
	Timestamp *Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3,oneof"`
}

type Primitive_TxHash struct {
	TxHash *TxHash `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3,oneof"`
}

func (*Primitive_Address) isPrimitive_Comparator() {}

func (*Primitive_Confirmations) isPrimitive_Comparator() {}

func (*Primitive_Block) isPrimitive_Comparator() {}

func (*Primitive_Timestamp) isPrimitive_Comparator() {}

func (*Primitive_TxHash) isPrimitive_Comparator() {}

type SortByTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortDirection SortDirection `protobuf:"varint,1,opt,name=sort_direction,json=sortDirection,proto3,enum=loop.SortDirection" json:"sort_direction,omitempty"`
}

func (x *SortByTimestamp) Reset() {
	*x = SortByTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortByTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortByTimestamp) ProtoMessage() {}

func (x *SortByTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortByTimestamp.ProtoReflect.Descriptor instead.
func (*SortByTimestamp) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{28}
}

func (x *SortByTimestamp) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_Asc
}

type SortByBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortDirection SortDirection `protobuf:"varint,1,opt,name=sort_direction,json=sortDirection,proto3,enum=loop.SortDirection" json:"sort_direction,omitempty"`
}

func (x *SortByBlock) Reset() {
	*x = SortByBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortByBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortByBlock) ProtoMessage() {}

func (x *SortByBlock) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortByBlock.ProtoReflect.Descriptor instead.
func (*SortByBlock) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{29}
}

func (x *SortByBlock) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_Asc
}

type SortBySequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortDirection SortDirection `protobuf:"varint,1,opt,name=sort_direction,json=sortDirection,proto3,enum=loop.SortDirection" json:"sort_direction,omitempty"`
}

func (x *SortBySequence) Reset() {
	*x = SortBySequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortBySequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortBySequence) ProtoMessage() {}

func (x *SortBySequence) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortBySequence.ProtoReflect.Descriptor instead.
func (*SortBySequence) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{30}
}

func (x *SortBySequence) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_Asc
}

type SortBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SortBy:
	//
	//	*SortBy_SortByTimestamp
	//	*SortBy_SortByBlock
	//	*SortBy_SortBySequence
	SortBy isSortBy_SortBy `protobuf_oneof:"sort_by"`
}

func (x *SortBy) Reset() {
	*x = SortBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortBy) ProtoMessage() {}

func (x *SortBy) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortBy.ProtoReflect.Descriptor instead.
func (*SortBy) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{31}
}

func (m *SortBy) GetSortBy() isSortBy_SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

func (x *SortBy) GetSortByTimestamp() *SortByTimestamp {
	if x, ok := x.GetSortBy().(*SortBy_SortByTimestamp); ok {
		return x.SortByTimestamp
	}
	return nil
}

func (x *SortBy) GetSortByBlock() *SortByBlock {
	if x, ok := x.GetSortBy().(*SortBy_SortByBlock); ok {
		return x.SortByBlock
	}
	return nil
}

func (x *SortBy) GetSortBySequence() *SortBySequence {
	if x, ok := x.GetSortBy().(*SortBy_SortBySequence); ok {
		return x.SortBySequence
	}
	return nil
}

type isSortBy_SortBy interface {
	isSortBy_SortBy()
}

type SortBy_SortByTimestamp struct {
	SortByTimestamp *SortByTimestamp `protobuf:"bytes,1,opt,name=sort_by_timestamp,json=sortByTimestamp,proto3,oneof"`
}

type SortBy_SortByBlock struct {
	SortByBlock *SortByBlock `protobuf:"bytes,2,opt,name=sort_by_block,json=sortByBlock,proto3,oneof"`
}

type SortBy_SortBySequence struct {
	SortBySequence *SortBySequence `protobuf:"bytes,3,opt,name=sort_by_sequence,json=sortBySequence,proto3,oneof"`
}

func (*SortBy_SortByTimestamp) isSortBy_SortBy() {}

func (*SortBy_SortByBlock) isSortBy_SortBy() {}

func (*SortBy_SortBySequence) isSortBy_SortBy() {}

type LimitAndSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	SortBy []*SortBy `protobuf:"bytes,2,rep,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (x *LimitAndSort) Reset() {
	*x = LimitAndSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_reader_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitAndSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitAndSort) ProtoMessage() {}

func (x *LimitAndSort) ProtoReflect() protoreflect.Message {
	mi := &file_chain_reader_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitAndSort.ProtoReflect.Descriptor instead.
func (*LimitAndSort) Descriptor() ([]byte, []int) {
	return file_chain_reader_proto_rawDescGZIP(), []int{32}
}

func (x *LimitAndSort) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LimitAndSort) GetSortBy() []*SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

var File_chain_reader_proto protoreflect.FileDescriptor

var file_chain_reader_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x1a, 0x0b, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x96,
	0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x15, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x0c,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x22, 0xe5, 0x01, 0x0a,
	0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x16, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x14,
	0x6b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x6f, 0x72, 0x74, 0x22, 0x3e, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x72,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x3e, 0x0a, 0x0d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x09,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x1f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a,
	0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x20,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2d, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x50, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x7d, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x39, 0x0a, 0x09, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x0d, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x5d, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x6b, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x22, 0x3f, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x01, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x61, 0x22, 0x24, 0x0a, 0x02, 0x4f, 0x72, 0x12,
	0x1e, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x61, 0x22,
	0x27, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5f, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x21, 0x0a, 0x06, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x80,
	0x02, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x4d, 0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x49, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x0e, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x06, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x0d, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x40, 0x0a, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x22,
	0x4b, 0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x2a, 0x47, 0x0a, 0x12,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x71, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x65,
	0x71, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x74, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4c,
	0x74, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x74, 0x65, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x74, 0x65, 0x10, 0x05, 0x2a, 0x22, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x2a, 0x33, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x22,
	0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x73, 0x63, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63,
	0x10, 0x01, 0x32, 0xe8, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79,
	0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64,
	0x12, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x43, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_reader_proto_rawDescOnce sync.Once
	file_chain_reader_proto_rawDescData = file_chain_reader_proto_rawDesc
)

func file_chain_reader_proto_rawDescGZIP() []byte {
	file_chain_reader_proto_rawDescOnce.Do(func() {
		file_chain_reader_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_reader_proto_rawDescData)
	})
	return file_chain_reader_proto_rawDescData
}

var file_chain_reader_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_chain_reader_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_chain_reader_proto_goTypes = []interface{}{
	(ComparisonOperator)(0),                    // 0: loop.ComparisonOperator
	(BooleanOperator)(0),                       // 1: loop.BooleanOperator
	(ConfirmationLevel)(0),                     // 2: loop.ConfirmationLevel
	(SortDirection)(0),                         // 3: loop.SortDirection
	(*GetLatestValueRequest)(nil),              // 4: loop.GetLatestValueRequest
	(*QueryKeyRequest)(nil),                    // 5: loop.QueryKeyRequest
	(*QueryKeysRequest)(nil),                   // 6: loop.QueryKeysRequest
	(*QueryByKeyValuesComparisonRequest)(nil),  // 7: loop.QueryByKeyValuesComparisonRequest
	(*QueryByKeysValuesComparisonRequest)(nil), // 8: loop.QueryByKeysValuesComparisonRequest
	(*BindRequest)(nil),                        // 9: loop.BindRequest
	(*GetLatestValueReply)(nil),                // 10: loop.GetLatestValueReply
	(*QueryKeyReply)(nil),                      // 11: loop.QueryKeyReply
	(*QueryKeysReply)(nil),                     // 12: loop.QueryKeysReply
	(*QueryByKeyValuesComparisonReply)(nil),    // 13: loop.QueryByKeyValuesComparisonReply
	(*QueryByKeysValuesComparisonReply)(nil),   // 14: loop.QueryByKeysValuesComparisonReply
	(*Head)(nil),                               // 15: loop.Head
	(*Sequence)(nil),                           // 16: loop.Sequence
	(*Sequences)(nil),                          // 17: loop.Sequences
	(*BoundContract)(nil),                      // 18: loop.BoundContract
	(*ValueComparator)(nil),                    // 19: loop.ValueComparator
	(*KeyValuesComparator)(nil),                // 20: loop.KeyValuesComparator
	(*QueryFilter)(nil),                        // 21: loop.QueryFilter
	(*Expression)(nil),                         // 22: loop.Expression
	(*BooleanExpression)(nil),                  // 23: loop.BooleanExpression
	(*And)(nil),                                // 24: loop.And
	(*Or)(nil),                                 // 25: loop.Or
	(*Address)(nil),                            // 26: loop.Address
	(*Confirmations)(nil),                      // 27: loop.Confirmations
	(*Block)(nil),                              // 28: loop.Block
	(*Timestamp)(nil),                          // 29: loop.Timestamp
	(*TxHash)(nil),                             // 30: loop.TxHash
	(*Primitive)(nil),                          // 31: loop.Primitive
	(*SortByTimestamp)(nil),                    // 32: loop.SortByTimestamp
	(*SortByBlock)(nil),                        // 33: loop.SortByBlock
	(*SortBySequence)(nil),                     // 34: loop.SortBySequence
	(*SortBy)(nil),                             // 35: loop.SortBy
	(*LimitAndSort)(nil),                       // 36: loop.LimitAndSort
	(*VersionedBytes)(nil),                     // 37: loop.VersionedBytes
	(*emptypb.Empty)(nil),                      // 38: google.protobuf.Empty
}
var file_chain_reader_proto_depIdxs = []int32{
	37, // 0: loop.GetLatestValueRequest.params:type_name -> loop.VersionedBytes
	21, // 1: loop.QueryKeyRequest.query_filter:type_name -> loop.QueryFilter
	36, // 2: loop.QueryKeyRequest.limit_and_sort:type_name -> loop.LimitAndSort
	21, // 3: loop.QueryKeysRequest.query_filter:type_name -> loop.QueryFilter
	36, // 4: loop.QueryKeysRequest.limit_and_sort:type_name -> loop.LimitAndSort
	20, // 5: loop.QueryByKeyValuesComparisonRequest.key_values_comparator:type_name -> loop.KeyValuesComparator
	21, // 6: loop.QueryByKeyValuesComparisonRequest.query_filter:type_name -> loop.QueryFilter
	36, // 7: loop.QueryByKeyValuesComparisonRequest.limit_and_sort:type_name -> loop.LimitAndSort
	20, // 8: loop.QueryByKeysValuesComparisonRequest.keys_values_comparator:type_name -> loop.KeyValuesComparator
	21, // 9: loop.QueryByKeysValuesComparisonRequest.query_filter:type_name -> loop.QueryFilter
	36, // 10: loop.QueryByKeysValuesComparisonRequest.limit_and_sort:type_name -> loop.LimitAndSort
	18, // 11: loop.BindRequest.bindings:type_name -> loop.BoundContract
	37, // 12: loop.GetLatestValueReply.retVal:type_name -> loop.VersionedBytes
	17, // 13: loop.QueryKeyReply.sequences:type_name -> loop.Sequences
	17, // 14: loop.QueryKeysReply.sequences:type_name -> loop.Sequences
	17, // 15: loop.QueryByKeyValuesComparisonReply.sequences:type_name -> loop.Sequences
	17, // 16: loop.QueryByKeysValuesComparisonReply.sequences:type_name -> loop.Sequences
	15, // 17: loop.Sequence.head:type_name -> loop.Head
	37, // 18: loop.Sequence.data:type_name -> loop.VersionedBytes
	16, // 19: loop.Sequences.sequences:type_name -> loop.Sequence
	0,  // 20: loop.ValueComparator.operator:type_name -> loop.ComparisonOperator
	19, // 21: loop.KeyValuesComparator.value_comparators:type_name -> loop.ValueComparator
	22, // 22: loop.QueryFilter.expression:type_name -> loop.Expression
	31, // 23: loop.Expression.primitive:type_name -> loop.Primitive
	23, // 24: loop.Expression.boolean_expression:type_name -> loop.BooleanExpression
	1,  // 25: loop.BooleanExpression.boolean_operator:type_name -> loop.BooleanOperator
	22, // 26: loop.BooleanExpression.expression:type_name -> loop.Expression
	22, // 27: loop.And.a:type_name -> loop.Expression
	22, // 28: loop.Or.a:type_name -> loop.Expression
	2,  // 29: loop.Confirmations.confirmations:type_name -> loop.ConfirmationLevel
	0,  // 30: loop.Block.operator:type_name -> loop.ComparisonOperator
	0,  // 31: loop.Timestamp.operator:type_name -> loop.ComparisonOperator
	26, // 32: loop.Primitive.address:type_name -> loop.Address
	27, // 33: loop.Primitive.confirmations:type_name -> loop.Confirmations
	28, // 34: loop.Primitive.block:type_name -> loop.Block
	29, // 35: loop.Primitive.timestamp:type_name -> loop.Timestamp
	30, // 36: loop.Primitive.tx_hash:type_name -> loop.TxHash
	3,  // 37: loop.SortByTimestamp.sort_direction:type_name -> loop.SortDirection
	3,  // 38: loop.SortByBlock.sort_direction:type_name -> loop.SortDirection
	3,  // 39: loop.SortBySequence.sort_direction:type_name -> loop.SortDirection
	32, // 40: loop.SortBy.sort_by_timestamp:type_name -> loop.SortByTimestamp
	33, // 41: loop.SortBy.sort_by_block:type_name -> loop.SortByBlock
	34, // 42: loop.SortBy.sort_by_sequence:type_name -> loop.SortBySequence
	35, // 43: loop.LimitAndSort.sort_by:type_name -> loop.SortBy
	4,  // 44: loop.ChainReader.GetLatestValue:input_type -> loop.GetLatestValueRequest
	5,  // 45: loop.ChainReader.QueryKey:input_type -> loop.QueryKeyRequest
	6,  // 46: loop.ChainReader.QueryKeys:input_type -> loop.QueryKeysRequest
	7,  // 47: loop.ChainReader.QueryByKeyValuesComparison:input_type -> loop.QueryByKeyValuesComparisonRequest
	8,  // 48: loop.ChainReader.QueryByKeysValuesComparison:input_type -> loop.QueryByKeysValuesComparisonRequest
	9,  // 49: loop.ChainReader.Bind:input_type -> loop.BindRequest
	10, // 50: loop.ChainReader.GetLatestValue:output_type -> loop.GetLatestValueReply
	11, // 51: loop.ChainReader.QueryKey:output_type -> loop.QueryKeyReply
	12, // 52: loop.ChainReader.QueryKeys:output_type -> loop.QueryKeysReply
	13, // 53: loop.ChainReader.QueryByKeyValuesComparison:output_type -> loop.QueryByKeyValuesComparisonReply
	14, // 54: loop.ChainReader.QueryByKeysValuesComparison:output_type -> loop.QueryByKeysValuesComparisonReply
	38, // 55: loop.ChainReader.Bind:output_type -> google.protobuf.Empty
	50, // [50:56] is the sub-list for method output_type
	44, // [44:50] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_chain_reader_proto_init() }
func file_chain_reader_proto_init() {
	if File_chain_reader_proto != nil {
		return
	}
	file_codec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chain_reader_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryByKeyValuesComparisonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryByKeysValuesComparisonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestValueReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKeysReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryByKeyValuesComparisonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryByKeysValuesComparisonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueComparator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuesComparator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Confirmations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Primitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortByTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortByBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortBySequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_reader_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitAndSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chain_reader_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Expression_Primitive)(nil),
		(*Expression_BooleanExpression)(nil),
	}
	file_chain_reader_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Primitive_Address)(nil),
		(*Primitive_Confirmations)(nil),
		(*Primitive_Block)(nil),
		(*Primitive_Timestamp)(nil),
		(*Primitive_TxHash)(nil),
	}
	file_chain_reader_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*SortBy_SortByTimestamp)(nil),
		(*SortBy_SortByBlock)(nil),
		(*SortBy_SortBySequence)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_reader_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chain_reader_proto_goTypes,
		DependencyIndexes: file_chain_reader_proto_depIdxs,
		EnumInfos:         file_chain_reader_proto_enumTypes,
		MessageInfos:      file_chain_reader_proto_msgTypes,
	}.Build()
	File_chain_reader_proto = out.File
	file_chain_reader_proto_rawDesc = nil
	file_chain_reader_proto_goTypes = nil
	file_chain_reader_proto_depIdxs = nil
}
