// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: reporting_ocr3.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OCR3NewReportingPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportingPluginConfig *OCR3ReportingPluginConfig `protobuf:"bytes,1,opt,name=reportingPluginConfig,proto3" json:"reportingPluginConfig,omitempty"`
}

func (x *OCR3NewReportingPluginRequest) Reset() {
	*x = OCR3NewReportingPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3NewReportingPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3NewReportingPluginRequest) ProtoMessage() {}

func (x *OCR3NewReportingPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3NewReportingPluginRequest.ProtoReflect.Descriptor instead.
func (*OCR3NewReportingPluginRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{0}
}

func (x *OCR3NewReportingPluginRequest) GetReportingPluginConfig() *OCR3ReportingPluginConfig {
	if x != nil {
		return x.ReportingPluginConfig
	}
	return nil
}

type OCR3NewReportingPluginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportingPluginID   uint32                   `protobuf:"varint,1,opt,name=reportingPluginID,proto3" json:"reportingPluginID,omitempty"`
	ReportingPluginInfo *OCR3ReportingPluginInfo `protobuf:"bytes,2,opt,name=reportingPluginInfo,proto3" json:"reportingPluginInfo,omitempty"`
}

func (x *OCR3NewReportingPluginReply) Reset() {
	*x = OCR3NewReportingPluginReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3NewReportingPluginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3NewReportingPluginReply) ProtoMessage() {}

func (x *OCR3NewReportingPluginReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3NewReportingPluginReply.ProtoReflect.Descriptor instead.
func (*OCR3NewReportingPluginReply) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{1}
}

func (x *OCR3NewReportingPluginReply) GetReportingPluginID() uint32 {
	if x != nil {
		return x.ReportingPluginID
	}
	return 0
}

func (x *OCR3NewReportingPluginReply) GetReportingPluginInfo() *OCR3ReportingPluginInfo {
	if x != nil {
		return x.ReportingPluginInfo
	}
	return nil
}

type OCR3ReportingPluginConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigDigest                            []byte `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"`
	OracleID                                uint32 `protobuf:"varint,2,opt,name=oracleID,proto3" json:"oracleID,omitempty"`
	N                                       uint32 `protobuf:"varint,3,opt,name=n,proto3" json:"n,omitempty"`
	F                                       uint32 `protobuf:"varint,4,opt,name=f,proto3" json:"f,omitempty"`
	OnchainConfig                           []byte `protobuf:"bytes,5,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
	OffchainConfig                          []byte `protobuf:"bytes,6,opt,name=offchainConfig,proto3" json:"offchainConfig,omitempty"`
	EstimatedRoundInterval                  int64  `protobuf:"varint,7,opt,name=estimatedRoundInterval,proto3" json:"estimatedRoundInterval,omitempty"`
	MaxDurationQuery                        int64  `protobuf:"varint,8,opt,name=maxDurationQuery,proto3" json:"maxDurationQuery,omitempty"`
	MaxDurationObservation                  int64  `protobuf:"varint,9,opt,name=maxDurationObservation,proto3" json:"maxDurationObservation,omitempty"`
	MaxDurationShouldAcceptAttestedReport   int64  `protobuf:"varint,10,opt,name=MaxDurationShouldAcceptAttestedReport,proto3" json:"MaxDurationShouldAcceptAttestedReport,omitempty"`
	MaxDurationShouldTransmitAcceptedReport int64  `protobuf:"varint,11,opt,name=MaxDurationShouldTransmitAcceptedReport,proto3" json:"MaxDurationShouldTransmitAcceptedReport,omitempty"`
}

func (x *OCR3ReportingPluginConfig) Reset() {
	*x = OCR3ReportingPluginConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ReportingPluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ReportingPluginConfig) ProtoMessage() {}

func (x *OCR3ReportingPluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ReportingPluginConfig.ProtoReflect.Descriptor instead.
func (*OCR3ReportingPluginConfig) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{2}
}

func (x *OCR3ReportingPluginConfig) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *OCR3ReportingPluginConfig) GetOracleID() uint32 {
	if x != nil {
		return x.OracleID
	}
	return 0
}

func (x *OCR3ReportingPluginConfig) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *OCR3ReportingPluginConfig) GetF() uint32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *OCR3ReportingPluginConfig) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

func (x *OCR3ReportingPluginConfig) GetOffchainConfig() []byte {
	if x != nil {
		return x.OffchainConfig
	}
	return nil
}

func (x *OCR3ReportingPluginConfig) GetEstimatedRoundInterval() int64 {
	if x != nil {
		return x.EstimatedRoundInterval
	}
	return 0
}

func (x *OCR3ReportingPluginConfig) GetMaxDurationQuery() int64 {
	if x != nil {
		return x.MaxDurationQuery
	}
	return 0
}

func (x *OCR3ReportingPluginConfig) GetMaxDurationObservation() int64 {
	if x != nil {
		return x.MaxDurationObservation
	}
	return 0
}

func (x *OCR3ReportingPluginConfig) GetMaxDurationShouldAcceptAttestedReport() int64 {
	if x != nil {
		return x.MaxDurationShouldAcceptAttestedReport
	}
	return 0
}

func (x *OCR3ReportingPluginConfig) GetMaxDurationShouldTransmitAcceptedReport() int64 {
	if x != nil {
		return x.MaxDurationShouldTransmitAcceptedReport
	}
	return 0
}

type OCR3ReportingPluginLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxQueryLength       uint64 `protobuf:"varint,1,opt,name=maxQueryLength,proto3" json:"maxQueryLength,omitempty"`
	MaxObservationLength uint64 `protobuf:"varint,2,opt,name=maxObservationLength,proto3" json:"maxObservationLength,omitempty"`
	MaxOutcomeLength     uint64 `protobuf:"varint,3,opt,name=MaxOutcomeLength,proto3" json:"MaxOutcomeLength,omitempty"`
	MaxReportLength      uint64 `protobuf:"varint,4,opt,name=MaxReportLength,proto3" json:"MaxReportLength,omitempty"`
	MaxReportCount       uint64 `protobuf:"varint,5,opt,name=MaxReportCount,proto3" json:"MaxReportCount,omitempty"`
}

func (x *OCR3ReportingPluginLimits) Reset() {
	*x = OCR3ReportingPluginLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ReportingPluginLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ReportingPluginLimits) ProtoMessage() {}

func (x *OCR3ReportingPluginLimits) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ReportingPluginLimits.ProtoReflect.Descriptor instead.
func (*OCR3ReportingPluginLimits) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{3}
}

func (x *OCR3ReportingPluginLimits) GetMaxQueryLength() uint64 {
	if x != nil {
		return x.MaxQueryLength
	}
	return 0
}

func (x *OCR3ReportingPluginLimits) GetMaxObservationLength() uint64 {
	if x != nil {
		return x.MaxObservationLength
	}
	return 0
}

func (x *OCR3ReportingPluginLimits) GetMaxOutcomeLength() uint64 {
	if x != nil {
		return x.MaxOutcomeLength
	}
	return 0
}

func (x *OCR3ReportingPluginLimits) GetMaxReportLength() uint64 {
	if x != nil {
		return x.MaxReportLength
	}
	return 0
}

func (x *OCR3ReportingPluginLimits) GetMaxReportCount() uint64 {
	if x != nil {
		return x.MaxReportCount
	}
	return 0
}

type OCR3ReportingPluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReportingPluginLimits *OCR3ReportingPluginLimits `protobuf:"bytes,2,opt,name=reportingPluginLimits,proto3" json:"reportingPluginLimits,omitempty"`
}

func (x *OCR3ReportingPluginInfo) Reset() {
	*x = OCR3ReportingPluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ReportingPluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ReportingPluginInfo) ProtoMessage() {}

func (x *OCR3ReportingPluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ReportingPluginInfo.ProtoReflect.Descriptor instead.
func (*OCR3ReportingPluginInfo) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{4}
}

func (x *OCR3ReportingPluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OCR3ReportingPluginInfo) GetReportingPluginLimits() *OCR3ReportingPluginLimits {
	if x != nil {
		return x.ReportingPluginLimits
	}
	return nil
}

type OCR3QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeContext *OCR3OutcomeContext `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
}

func (x *OCR3QueryRequest) Reset() {
	*x = OCR3QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3QueryRequest) ProtoMessage() {}

func (x *OCR3QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3QueryRequest.ProtoReflect.Descriptor instead.
func (*OCR3QueryRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{5}
}

func (x *OCR3QueryRequest) GetOutcomeContext() *OCR3OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

type OCR3OutcomeContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr           uint64 `protobuf:"varint,1,opt,name=seqNr,proto3" json:"seqNr,omitempty"`
	PreviousOutcome []byte `protobuf:"bytes,2,opt,name=previousOutcome,proto3" json:"previousOutcome,omitempty"`
	Epoch           uint64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round           uint64 `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *OCR3OutcomeContext) Reset() {
	*x = OCR3OutcomeContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3OutcomeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3OutcomeContext) ProtoMessage() {}

func (x *OCR3OutcomeContext) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3OutcomeContext.ProtoReflect.Descriptor instead.
func (*OCR3OutcomeContext) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{6}
}

func (x *OCR3OutcomeContext) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *OCR3OutcomeContext) GetPreviousOutcome() []byte {
	if x != nil {
		return x.PreviousOutcome
	}
	return nil
}

func (x *OCR3OutcomeContext) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *OCR3OutcomeContext) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

type OCR3QueryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *OCR3QueryReply) Reset() {
	*x = OCR3QueryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3QueryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3QueryReply) ProtoMessage() {}

func (x *OCR3QueryReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3QueryReply.ProtoReflect.Descriptor instead.
func (*OCR3QueryReply) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{7}
}

func (x *OCR3QueryReply) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type OCR3ObservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeContext *OCR3OutcomeContext `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	Query          []byte              `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *OCR3ObservationRequest) Reset() {
	*x = OCR3ObservationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ObservationRequest) ProtoMessage() {}

func (x *OCR3ObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ObservationRequest.ProtoReflect.Descriptor instead.
func (*OCR3ObservationRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{8}
}

func (x *OCR3ObservationRequest) GetOutcomeContext() *OCR3OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

func (x *OCR3ObservationRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type OCR3ObservationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observation []byte `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
}

func (x *OCR3ObservationReply) Reset() {
	*x = OCR3ObservationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ObservationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ObservationReply) ProtoMessage() {}

func (x *OCR3ObservationReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ObservationReply.ProtoReflect.Descriptor instead.
func (*OCR3ObservationReply) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{9}
}

func (x *OCR3ObservationReply) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

type OCR3ValidateObservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeContext *OCR3OutcomeContext        `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	Query          []byte                     `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Ao             *OCR3AttributedObservation `protobuf:"bytes,3,opt,name=ao,proto3" json:"ao,omitempty"`
}

func (x *OCR3ValidateObservationRequest) Reset() {
	*x = OCR3ValidateObservationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ValidateObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ValidateObservationRequest) ProtoMessage() {}

func (x *OCR3ValidateObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ValidateObservationRequest.ProtoReflect.Descriptor instead.
func (*OCR3ValidateObservationRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{10}
}

func (x *OCR3ValidateObservationRequest) GetOutcomeContext() *OCR3OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

func (x *OCR3ValidateObservationRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OCR3ValidateObservationRequest) GetAo() *OCR3AttributedObservation {
	if x != nil {
		return x.Ao
	}
	return nil
}

type OCR3AttributedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observation []byte `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Observer    uint32 `protobuf:"varint,2,opt,name=observer,proto3" json:"observer,omitempty"` // uint8
}

func (x *OCR3AttributedObservation) Reset() {
	*x = OCR3AttributedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3AttributedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3AttributedObservation) ProtoMessage() {}

func (x *OCR3AttributedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3AttributedObservation.ProtoReflect.Descriptor instead.
func (*OCR3AttributedObservation) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{11}
}

func (x *OCR3AttributedObservation) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *OCR3AttributedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

// /
type OCR3ObservationQuorumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeContext *OCR3OutcomeContext `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	Query          []byte              `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *OCR3ObservationQuorumRequest) Reset() {
	*x = OCR3ObservationQuorumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ObservationQuorumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ObservationQuorumRequest) ProtoMessage() {}

func (x *OCR3ObservationQuorumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ObservationQuorumRequest.ProtoReflect.Descriptor instead.
func (*OCR3ObservationQuorumRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{12}
}

func (x *OCR3ObservationQuorumRequest) GetOutcomeContext() *OCR3OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

func (x *OCR3ObservationQuorumRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type OCR3ObservationQuorumReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quorum int32 `protobuf:"varint,1,opt,name=quorum,proto3" json:"quorum,omitempty"`
}

func (x *OCR3ObservationQuorumReply) Reset() {
	*x = OCR3ObservationQuorumReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ObservationQuorumReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ObservationQuorumReply) ProtoMessage() {}

func (x *OCR3ObservationQuorumReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ObservationQuorumReply.ProtoReflect.Descriptor instead.
func (*OCR3ObservationQuorumReply) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{13}
}

func (x *OCR3ObservationQuorumReply) GetQuorum() int32 {
	if x != nil {
		return x.Quorum
	}
	return 0
}

// /
type OCR3OutcomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeContext *OCR3OutcomeContext          `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	Query          []byte                       `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Ao             []*OCR3AttributedObservation `protobuf:"bytes,3,rep,name=ao,proto3" json:"ao,omitempty"`
}

func (x *OCR3OutcomeRequest) Reset() {
	*x = OCR3OutcomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3OutcomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3OutcomeRequest) ProtoMessage() {}

func (x *OCR3OutcomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3OutcomeRequest.ProtoReflect.Descriptor instead.
func (*OCR3OutcomeRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{14}
}

func (x *OCR3OutcomeRequest) GetOutcomeContext() *OCR3OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

func (x *OCR3OutcomeRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OCR3OutcomeRequest) GetAo() []*OCR3AttributedObservation {
	if x != nil {
		return x.Ao
	}
	return nil
}

type OCR3OutcomeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome []byte `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *OCR3OutcomeReply) Reset() {
	*x = OCR3OutcomeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3OutcomeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3OutcomeReply) ProtoMessage() {}

func (x *OCR3OutcomeReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3OutcomeReply.ProtoReflect.Descriptor instead.
func (*OCR3OutcomeReply) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{15}
}

func (x *OCR3OutcomeReply) GetOutcome() []byte {
	if x != nil {
		return x.Outcome
	}
	return nil
}

// /
type OCR3ReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNr   uint64 `protobuf:"varint,1,opt,name=seqNr,proto3" json:"seqNr,omitempty"`
	Outcome []byte `protobuf:"bytes,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *OCR3ReportsRequest) Reset() {
	*x = OCR3ReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ReportsRequest) ProtoMessage() {}

func (x *OCR3ReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ReportsRequest.ProtoReflect.Descriptor instead.
func (*OCR3ReportsRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{16}
}

func (x *OCR3ReportsRequest) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *OCR3ReportsRequest) GetOutcome() []byte {
	if x != nil {
		return x.Outcome
	}
	return nil
}

type OCR3ReportsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportWithInfo []*OCR3ReportWithInfo `protobuf:"bytes,1,rep,name=ReportWithInfo,proto3" json:"ReportWithInfo,omitempty"`
}

func (x *OCR3ReportsReply) Reset() {
	*x = OCR3ReportsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ReportsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ReportsReply) ProtoMessage() {}

func (x *OCR3ReportsReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ReportsReply.ProtoReflect.Descriptor instead.
func (*OCR3ReportsReply) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{17}
}

func (x *OCR3ReportsReply) GetReportWithInfo() []*OCR3ReportWithInfo {
	if x != nil {
		return x.ReportWithInfo
	}
	return nil
}

type OCR3ReportWithInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *OCR3ReportWithInfo) Reset() {
	*x = OCR3ReportWithInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ReportWithInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ReportWithInfo) ProtoMessage() {}

func (x *OCR3ReportWithInfo) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ReportWithInfo.ProtoReflect.Descriptor instead.
func (*OCR3ReportWithInfo) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{18}
}

func (x *OCR3ReportWithInfo) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// /
type OCR3ShouldAcceptAttestedReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegNr uint64              `protobuf:"varint,1,opt,name=segNr,proto3" json:"segNr,omitempty"`
	Ri    *OCR3ReportWithInfo `protobuf:"bytes,2,opt,name=ri,proto3" json:"ri,omitempty"`
}

func (x *OCR3ShouldAcceptAttestedReportRequest) Reset() {
	*x = OCR3ShouldAcceptAttestedReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ShouldAcceptAttestedReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ShouldAcceptAttestedReportRequest) ProtoMessage() {}

func (x *OCR3ShouldAcceptAttestedReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ShouldAcceptAttestedReportRequest.ProtoReflect.Descriptor instead.
func (*OCR3ShouldAcceptAttestedReportRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{19}
}

func (x *OCR3ShouldAcceptAttestedReportRequest) GetSegNr() uint64 {
	if x != nil {
		return x.SegNr
	}
	return 0
}

func (x *OCR3ShouldAcceptAttestedReportRequest) GetRi() *OCR3ReportWithInfo {
	if x != nil {
		return x.Ri
	}
	return nil
}

type OCR3ShouldAcceptAttestedReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldAccept bool `protobuf:"varint,1,opt,name=shouldAccept,proto3" json:"shouldAccept,omitempty"`
}

func (x *OCR3ShouldAcceptAttestedReportReply) Reset() {
	*x = OCR3ShouldAcceptAttestedReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ShouldAcceptAttestedReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ShouldAcceptAttestedReportReply) ProtoMessage() {}

func (x *OCR3ShouldAcceptAttestedReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ShouldAcceptAttestedReportReply.ProtoReflect.Descriptor instead.
func (*OCR3ShouldAcceptAttestedReportReply) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{20}
}

func (x *OCR3ShouldAcceptAttestedReportReply) GetShouldAccept() bool {
	if x != nil {
		return x.ShouldAccept
	}
	return false
}

// /
type OCR3ShouldTransmitAcceptedReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegNr uint64              `protobuf:"varint,1,opt,name=segNr,proto3" json:"segNr,omitempty"`
	Ri    *OCR3ReportWithInfo `protobuf:"bytes,2,opt,name=ri,proto3" json:"ri,omitempty"`
}

func (x *OCR3ShouldTransmitAcceptedReportRequest) Reset() {
	*x = OCR3ShouldTransmitAcceptedReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ShouldTransmitAcceptedReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ShouldTransmitAcceptedReportRequest) ProtoMessage() {}

func (x *OCR3ShouldTransmitAcceptedReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ShouldTransmitAcceptedReportRequest.ProtoReflect.Descriptor instead.
func (*OCR3ShouldTransmitAcceptedReportRequest) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{21}
}

func (x *OCR3ShouldTransmitAcceptedReportRequest) GetSegNr() uint64 {
	if x != nil {
		return x.SegNr
	}
	return 0
}

func (x *OCR3ShouldTransmitAcceptedReportRequest) GetRi() *OCR3ReportWithInfo {
	if x != nil {
		return x.Ri
	}
	return nil
}

type OCR3ShouldTransmitAcceptedReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldTransmit bool `protobuf:"varint,1,opt,name=shouldTransmit,proto3" json:"shouldTransmit,omitempty"`
}

func (x *OCR3ShouldTransmitAcceptedReportReply) Reset() {
	*x = OCR3ShouldTransmitAcceptedReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reporting_ocr3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCR3ShouldTransmitAcceptedReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCR3ShouldTransmitAcceptedReportReply) ProtoMessage() {}

func (x *OCR3ShouldTransmitAcceptedReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_ocr3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCR3ShouldTransmitAcceptedReportReply.ProtoReflect.Descriptor instead.
func (*OCR3ShouldTransmitAcceptedReportReply) Descriptor() ([]byte, []int) {
	return file_reporting_ocr3_proto_rawDescGZIP(), []int{22}
}

func (x *OCR3ShouldTransmitAcceptedReportReply) GetShouldTransmit() bool {
	if x != nil {
		return x.ShouldTransmit
	}
	return false
}

var File_reporting_ocr3_proto protoreflect.FileDescriptor

var file_reporting_ocr3_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x63, 0x72, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x1d, 0x4f, 0x43, 0x52, 0x33,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x15, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x4f, 0x43, 0x52, 0x33, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x4f,
	0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x91, 0x04, 0x0a, 0x19, 0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x0c, 0x0a,
	0x01, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x25, 0x4d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x25, 0x4d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x58, 0x0a, 0x27, 0x4d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x27, 0x4d, 0x61, 0x78, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0xf5, 0x01, 0x0a, 0x19, 0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a,
	0x10, 0x4d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x17,
	0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x15, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x22, 0x54, 0x0a, 0x10, 0x4f, 0x43, 0x52, 0x33, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x4f, 0x43, 0x52,
	0x33, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x26, 0x0a, 0x0e, 0x4f,
	0x43, 0x52, 0x33, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x70, 0x0a, 0x16, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52,
	0x33, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x38, 0x0a, 0x14, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa9, 0x01, 0x0a, 0x1e, 0x4f, 0x43, 0x52, 0x33, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x02, 0x61, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43,
	0x52, 0x33, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x61, 0x6f, 0x22, 0x59, 0x0a, 0x19, 0x4f,
	0x43, 0x52, 0x33, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x1c, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x34,
	0x0a, 0x1a, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x02, 0x61, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x02, 0x61, 0x6f, 0x22, 0x2c, 0x0a, 0x10, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x22, 0x44, 0x0a, 0x12, 0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x4f, 0x43, 0x52, 0x33,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c,
	0x0a, 0x12, 0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x67, 0x0a, 0x25,
	0x4f, 0x43, 0x52, 0x33, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x67, 0x4e, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x67, 0x4e, 0x72, 0x12, 0x28, 0x0a, 0x02, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f,
	0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x02, 0x72, 0x69, 0x22, 0x49, 0x0a, 0x23, 0x4f, 0x43, 0x52, 0x33, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x22, 0x69, 0x0a, 0x27, 0x4f, 0x43, 0x52, 0x33, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x65, 0x67, 0x4e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x67, 0x4e,
	0x72, 0x12, 0x28, 0x0a, 0x02, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x72, 0x69, 0x22, 0x4f, 0x0a, 0x25, 0x4f,
	0x43, 0x52, 0x33, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x32, 0x7c, 0x0a, 0x1a,
	0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5e, 0x0a, 0x12, 0x4e, 0x65,
	0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52,
	0x33, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xfc, 0x05, 0x0a, 0x13, 0x4f,
	0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x4f, 0x43, 0x52, 0x33, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x12, 0x22, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43,
	0x52, 0x33, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52,
	0x33, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1a, 0x53, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43,
	0x52, 0x33, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x7c, 0x0a, 0x1c, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x53, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x43, 0x52, 0x33, 0x53, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f,
	0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reporting_ocr3_proto_rawDescOnce sync.Once
	file_reporting_ocr3_proto_rawDescData = file_reporting_ocr3_proto_rawDesc
)

func file_reporting_ocr3_proto_rawDescGZIP() []byte {
	file_reporting_ocr3_proto_rawDescOnce.Do(func() {
		file_reporting_ocr3_proto_rawDescData = protoimpl.X.CompressGZIP(file_reporting_ocr3_proto_rawDescData)
	})
	return file_reporting_ocr3_proto_rawDescData
}

var file_reporting_ocr3_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_reporting_ocr3_proto_goTypes = []interface{}{
	(*OCR3NewReportingPluginRequest)(nil),           // 0: loop.OCR3NewReportingPluginRequest
	(*OCR3NewReportingPluginReply)(nil),             // 1: loop.OCR3NewReportingPluginReply
	(*OCR3ReportingPluginConfig)(nil),               // 2: loop.OCR3ReportingPluginConfig
	(*OCR3ReportingPluginLimits)(nil),               // 3: loop.OCR3ReportingPluginLimits
	(*OCR3ReportingPluginInfo)(nil),                 // 4: loop.OCR3ReportingPluginInfo
	(*OCR3QueryRequest)(nil),                        // 5: loop.OCR3QueryRequest
	(*OCR3OutcomeContext)(nil),                      // 6: loop.OCR3OutcomeContext
	(*OCR3QueryReply)(nil),                          // 7: loop.OCR3QueryReply
	(*OCR3ObservationRequest)(nil),                  // 8: loop.OCR3ObservationRequest
	(*OCR3ObservationReply)(nil),                    // 9: loop.OCR3ObservationReply
	(*OCR3ValidateObservationRequest)(nil),          // 10: loop.OCR3ValidateObservationRequest
	(*OCR3AttributedObservation)(nil),               // 11: loop.OCR3AttributedObservation
	(*OCR3ObservationQuorumRequest)(nil),            // 12: loop.OCR3ObservationQuorumRequest
	(*OCR3ObservationQuorumReply)(nil),              // 13: loop.OCR3ObservationQuorumReply
	(*OCR3OutcomeRequest)(nil),                      // 14: loop.OCR3OutcomeRequest
	(*OCR3OutcomeReply)(nil),                        // 15: loop.OCR3OutcomeReply
	(*OCR3ReportsRequest)(nil),                      // 16: loop.OCR3ReportsRequest
	(*OCR3ReportsReply)(nil),                        // 17: loop.OCR3ReportsReply
	(*OCR3ReportWithInfo)(nil),                      // 18: loop.OCR3ReportWithInfo
	(*OCR3ShouldAcceptAttestedReportRequest)(nil),   // 19: loop.OCR3ShouldAcceptAttestedReportRequest
	(*OCR3ShouldAcceptAttestedReportReply)(nil),     // 20: loop.OCR3ShouldAcceptAttestedReportReply
	(*OCR3ShouldTransmitAcceptedReportRequest)(nil), // 21: loop.OCR3ShouldTransmitAcceptedReportRequest
	(*OCR3ShouldTransmitAcceptedReportReply)(nil),   // 22: loop.OCR3ShouldTransmitAcceptedReportReply
	(*emptypb.Empty)(nil),                           // 23: google.protobuf.Empty
}
var file_reporting_ocr3_proto_depIdxs = []int32{
	2,  // 0: loop.OCR3NewReportingPluginRequest.reportingPluginConfig:type_name -> loop.OCR3ReportingPluginConfig
	4,  // 1: loop.OCR3NewReportingPluginReply.reportingPluginInfo:type_name -> loop.OCR3ReportingPluginInfo
	3,  // 2: loop.OCR3ReportingPluginInfo.reportingPluginLimits:type_name -> loop.OCR3ReportingPluginLimits
	6,  // 3: loop.OCR3QueryRequest.outcomeContext:type_name -> loop.OCR3OutcomeContext
	6,  // 4: loop.OCR3ObservationRequest.outcomeContext:type_name -> loop.OCR3OutcomeContext
	6,  // 5: loop.OCR3ValidateObservationRequest.outcomeContext:type_name -> loop.OCR3OutcomeContext
	11, // 6: loop.OCR3ValidateObservationRequest.ao:type_name -> loop.OCR3AttributedObservation
	6,  // 7: loop.OCR3ObservationQuorumRequest.outcomeContext:type_name -> loop.OCR3OutcomeContext
	6,  // 8: loop.OCR3OutcomeRequest.outcomeContext:type_name -> loop.OCR3OutcomeContext
	11, // 9: loop.OCR3OutcomeRequest.ao:type_name -> loop.OCR3AttributedObservation
	18, // 10: loop.OCR3ReportsReply.ReportWithInfo:type_name -> loop.OCR3ReportWithInfo
	18, // 11: loop.OCR3ShouldAcceptAttestedReportRequest.ri:type_name -> loop.OCR3ReportWithInfo
	18, // 12: loop.OCR3ShouldTransmitAcceptedReportRequest.ri:type_name -> loop.OCR3ReportWithInfo
	0,  // 13: loop.OCR3ReportingPluginFactory.NewReportingPlugin:input_type -> loop.OCR3NewReportingPluginRequest
	5,  // 14: loop.OCR3ReportingPlugin.Query:input_type -> loop.OCR3QueryRequest
	8,  // 15: loop.OCR3ReportingPlugin.Observation:input_type -> loop.OCR3ObservationRequest
	10, // 16: loop.OCR3ReportingPlugin.ValidateObservation:input_type -> loop.OCR3ValidateObservationRequest
	12, // 17: loop.OCR3ReportingPlugin.ObservationQuorum:input_type -> loop.OCR3ObservationQuorumRequest
	14, // 18: loop.OCR3ReportingPlugin.Outcome:input_type -> loop.OCR3OutcomeRequest
	16, // 19: loop.OCR3ReportingPlugin.Reports:input_type -> loop.OCR3ReportsRequest
	19, // 20: loop.OCR3ReportingPlugin.ShouldAcceptAttestedReport:input_type -> loop.OCR3ShouldAcceptAttestedReportRequest
	21, // 21: loop.OCR3ReportingPlugin.ShouldTransmitAcceptedReport:input_type -> loop.OCR3ShouldTransmitAcceptedReportRequest
	23, // 22: loop.OCR3ReportingPlugin.Close:input_type -> google.protobuf.Empty
	1,  // 23: loop.OCR3ReportingPluginFactory.NewReportingPlugin:output_type -> loop.OCR3NewReportingPluginReply
	7,  // 24: loop.OCR3ReportingPlugin.Query:output_type -> loop.OCR3QueryReply
	9,  // 25: loop.OCR3ReportingPlugin.Observation:output_type -> loop.OCR3ObservationReply
	23, // 26: loop.OCR3ReportingPlugin.ValidateObservation:output_type -> google.protobuf.Empty
	13, // 27: loop.OCR3ReportingPlugin.ObservationQuorum:output_type -> loop.OCR3ObservationQuorumReply
	15, // 28: loop.OCR3ReportingPlugin.Outcome:output_type -> loop.OCR3OutcomeReply
	17, // 29: loop.OCR3ReportingPlugin.Reports:output_type -> loop.OCR3ReportsReply
	20, // 30: loop.OCR3ReportingPlugin.ShouldAcceptAttestedReport:output_type -> loop.OCR3ShouldAcceptAttestedReportReply
	22, // 31: loop.OCR3ReportingPlugin.ShouldTransmitAcceptedReport:output_type -> loop.OCR3ShouldTransmitAcceptedReportReply
	23, // 32: loop.OCR3ReportingPlugin.Close:output_type -> google.protobuf.Empty
	23, // [23:33] is the sub-list for method output_type
	13, // [13:23] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_reporting_ocr3_proto_init() }
func file_reporting_ocr3_proto_init() {
	if File_reporting_ocr3_proto != nil {
		return
	}
	file_relayer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_reporting_ocr3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3NewReportingPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3NewReportingPluginReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ReportingPluginConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ReportingPluginLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ReportingPluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3OutcomeContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3QueryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ObservationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ObservationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ValidateObservationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3AttributedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ObservationQuorumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ObservationQuorumReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3OutcomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3OutcomeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ReportsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ReportWithInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ShouldAcceptAttestedReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ShouldAcceptAttestedReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ShouldTransmitAcceptedReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reporting_ocr3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCR3ShouldTransmitAcceptedReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reporting_ocr3_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_reporting_ocr3_proto_goTypes,
		DependencyIndexes: file_reporting_ocr3_proto_depIdxs,
		MessageInfos:      file_reporting_ocr3_proto_msgTypes,
	}.Build()
	File_reporting_ocr3_proto = out.File
	file_reporting_ocr3_proto_rawDesc = nil
	file_reporting_ocr3_proto_goTypes = nil
	file_reporting_ocr3_proto_depIdxs = nil
}
