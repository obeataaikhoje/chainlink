syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb";

package loop;

import "values/pb/values.proto";
import "google/protobuf/empty.proto";

service CapabilitiesRegistry {
  rpc Get (GetRequest) returns (GetReply) {}
  rpc GetTrigger (GetTriggerRequest) returns (GetTriggerReply) {}
  rpc GetAction (GetActionRequest) returns (GetActionReply) {}
  rpc GetConsensus (GetConsensusRequest) returns (GetConsensusReply) {}
  rpc GetTarget (GetTargetRequest) returns (GetTargetReply) {}
  rpc Add (AddRequest) returns (google.protobuf.Empty) {}
}

enum ExecuteAPIType {
  EXECUTE_API_TYPE_UNKNOWN = 0;
  EXECUTE_API_TYPE_TRIGGER = 1;
  EXECUTE_API_TYPE_CALLBACK = 2;
}

// Get has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.Get].
message GetRequest {
  string id = 1;
}

// GetReply has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.Get], expressed as a capabilityID (this is a GRPC connectionID internal to go-hashicorp-plugin) and type indicating client wrapper that we need to use on the client side.
message GetReply {
  uint32 capabilityID = 1;
  ExecuteAPIType type = 2;
}

// GetTrigger has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.GetTrigger].
message GetTriggerRequest {
  string id = 1;
}

// GetTriggerReply has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.GetTrigger], expressed as a capabilityID (this is a GRPC connectionID internal to go-hashicorp-plugin).
message GetTriggerReply {
  uint32 capabilityID = 1;
}

// GetAction has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.GetAction].
message GetActionRequest {
  string id = 1;
}

// GetActionReply has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.GetTrigger], expressed as a capabilityID (this is a GRPC connectionID internal to go-hashicorp-plugin).
message GetActionReply {
  uint32 capabilityID = 1;
}

// GetConsensus has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.GetConsensus].
message GetConsensusRequest {
  string id = 1;
}

// GetConsensusReply has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.GetTrigger], expressed as a capabilityID (this is a GRPC connectionID internal to go-hashicorp-plugin).
message GetConsensusReply {
  uint32 capabilityID = 1;
}

// GetTarget has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.GetTarget].
message GetTargetRequest {
  string id = 1;
}

// GetTargetReply has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.GetTrigger], expressed as a capabilityID (this is a GRPC connectionID internal to go-hashicorp-plugin).
message GetTargetReply {
  uint32 capabilityID = 1;
}

// Add has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.CapabilitiesRegistry.Add].
message AddRequest {
  uint32 capabilityID = 1;
  ExecuteAPIType type = 2;
}

service BaseCapability {
  rpc Info (google.protobuf.Empty) returns (CapabilityInfoReply) {}
}

enum CapabilityType {
  CAPABILITY_TYPE_UNKNOWN = 0;
  CAPABILITY_TYPE_TRIGGER = 1;
  CAPABILITY_TYPE_ACTION = 2;
  CAPABILITY_TYPE_CONSENSUS = 3;
  CAPABILITY_TYPE_TARGET = 4;
}

message CapabilityInfoReply {
  string id = 1; 
  CapabilityType capability_type = 2;
  string description = 3;
  string version = 4;
}

message RequestMetadata {
  string workflowID = 1;
  string workflowExecutionID = 2;
}

message CapabilityRequest {
  RequestMetadata metadata = 1;
  values.Value config = 2;
  values.Value inputs = 3;
}

message RegisterTriggerRequest {
  uint32 callbackID = 1;
  CapabilityRequest capability_request = 2;
}

message UnregisterTriggerRequest {
  CapabilityRequest capability_request = 1;
}

service TriggerCapability {
  rpc RegisterTrigger (RegisterTriggerRequest) returns (google.protobuf.Empty) {}
  rpc UnregisterTrigger (UnregisterTriggerRequest) returns (google.protobuf.Empty) {}
}

message CapabilityResponse {
  values.Value value = 1;
  string error = 2;
}

service Callback {
  rpc SendResponse(CapabilityResponse) returns (google.protobuf.Empty) {}
  rpc CloseCallback(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message RegistrationMetadata {
  string workflowID = 1;
}

message RegisterToWorkflowRequest {
  RegistrationMetadata metadata = 1;
  values.Value config = 2;
}

message UnregisterFromWorkflowRequest {
  RegistrationMetadata metadata = 1;
  values.Value config = 2;
}

message ExecuteRequest {
  uint32 callbackID = 1;
  CapabilityRequest capability_request = 2;
}

service CallbackExecutable {
  rpc RegisterToWorkflow (RegisterToWorkflowRequest) returns (google.protobuf.Empty) {}
  rpc UnregisterFromWorkflow (UnregisterFromWorkflowRequest) returns (google.protobuf.Empty) {}
  rpc Execute (ExecuteRequest) returns (google.protobuf.Empty) {}
}
