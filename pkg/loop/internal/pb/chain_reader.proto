syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb";

package loop;

import "codec.proto";
import "google/protobuf/empty.proto";

service ChainReader {
  rpc GetLatestValue (GetLatestValueRequest) returns (GetLatestValueReply) {}
  rpc Bind(BindRequest) returns (google.protobuf.Empty) {}
}

message AndFilter {
  repeated QueryKeysRequest filters = 1;
}

message AddressFilter {
  repeated string address = 1;
}

message KeysFilter {
  repeated string event_sig = 1;
}

message QueryKeysRequest {
  oneof filter {
    AndFilter and_filter = 1;
    AddressFilter address_filter = 2;
    KeysFilter keys_filter = 3;
  }
}



// GetLatestValueRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.GetLatestValue].
message GetLatestValueRequest {
  string contractName = 1;
  string method = 2;
  VersionedBytes params = 3;
}

// GetLatestValueReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.GetLatestValue].
message GetLatestValueReply {
  VersionedBytes retVal = 1;
}

// QueryKeysReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.ChainReader.QueryKeys].
message QueryKeysReply {
  VersionedBytes retVal = 1;
}

message BindRequest {
  repeated BoundContract bindings = 1;
}

// BoundContract represents a [github.com/smartcontractkit/chainlink-common/pkg/types.BoundContract].
message BoundContract {
  string address = 1;
  string name = 2;
  bool pending = 3;
}
