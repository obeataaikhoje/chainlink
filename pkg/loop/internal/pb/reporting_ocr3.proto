syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb";

package loop;

import "google/protobuf/empty.proto";
import "relayer.proto";



service OCR3ReportingPluginFactory {
  rpc NewReportingPlugin (OCR3NewReportingPluginRequest) returns (OCR3NewReportingPluginReply) {}
}

message OCR3NewReportingPluginRequest {
  OCR3ReportingPluginConfig reportingPluginConfig = 1;
}

message OCR3NewReportingPluginReply {
  uint32 reportingPluginID = 1;
  OCR3ReportingPluginInfo reportingPluginInfo = 2;
}

message OCR3ReportingPluginConfig {
  bytes configDigest = 1;
  uint32 oracleID = 2;
  uint32 n = 3;
  uint32 f = 4;
  bytes onchainConfig = 5;
  bytes offchainConfig = 6;
  int64 estimatedRoundInterval = 7;
  int64 maxDurationQuery = 8;
  int64 maxDurationObservation = 9;
  int64 MaxDurationShouldAcceptAttestedReport = 10;
  int64 MaxDurationShouldTransmitAcceptedReport = 11;

}

message OCR3ReportingPluginLimits {
  uint64 maxQueryLength = 1;
  uint64 maxObservationLength = 2;
  uint64 MaxOutcomeLength = 3;
  uint64 MaxReportLength = 4;
  uint64 MaxReportCount = 5;
}

message OCR3ReportingPluginInfo {
  string name = 1;
  OCR3ReportingPluginLimits reportingPluginLimits = 2;
}


service OCR3ReportingPlugin {
  rpc Query(OCR3QueryRequest) returns (OCR3QueryReply) {}
  rpc Observation(OCR3ObservationRequest)returns (OCR3ObservationReply) {}
  rpc ValidateObservation(OCR3ValidateObservationRequest) returns (google.protobuf.Empty) {}
  rpc ObservationQuorum(OCR3ObservationQuorumRequest) returns (OCR3ObservationQuorumReply) {}
  rpc Outcome(OCR3OutcomeRequest) returns (OCR3OutcomeReply) {}
  rpc Reports(OCR3ReportsRequest)returns (OCR3ReportsReply) {}
  rpc ShouldAcceptAttestedReport(OCR3ShouldAcceptAttestedReportRequest) returns (OCR3ShouldAcceptAttestedReportReply) {}
  rpc ShouldTransmitAcceptedReport(OCR3ShouldTransmitAcceptedReportRequest) returns (OCR3ShouldTransmitAcceptedReportReply) {}
  rpc Close(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message OCR3QueryRequest {
  OCR3OutcomeContext outcomeContext=1;
}

message OCR3OutcomeContext {
  uint64 seqNr=1;
  bytes previousOutcome=2;
  uint64 epoch=3;
  uint64 round=4;
}

message OCR3QueryReply {
  bytes query =1;
}

message OCR3ObservationRequest {
  OCR3OutcomeContext outcomeContext=1;
  bytes query=2;
}

message OCR3ObservationReply {
  bytes observation=1;
}

message OCR3ValidateObservationRequest{
  OCR3OutcomeContext outcomeContext=1;
  bytes query=2;
  OCR3AttributedObservation ao=3;
}

message OCR3AttributedObservation{
  bytes observation=1;
  uint32 observer =2;
}

message OCR3ObservationQuorumRequest {
  OCR3OutcomeContext outcomeContext=1;
  bytes query=2;
}

message OCR3ObservationQuorumReply {
  int32 quorum =1;
}

message OCR3OutcomeRequest{
  OCR3OutcomeContext outcomeContext=1;
  bytes query=2;
  repeated OCR3AttributedObservation ao=3;
}

message OCR3OutcomeReply{
 bytes outcome=1;
}

message OCR3ReportsRequest{
 uint64 seqNr=1;
 bytes outcome=2;
}

message OCR3ReportsReply{
 repeated OCR3ReportWithInfo ReportWithInfo=1;
}

message OCR3ReportWithInfo{
  bytes report=1;
}

message OCR3ShouldAcceptAttestedReportRequest{
  uint64  segNr=1;
  OCR3ReportWithInfo ri=2;
}

message OCR3ShouldAcceptAttestedReportReply{
  bool shouldAccept=1;
}

message OCR3ShouldTransmitAcceptedReportRequest{
  uint64  segNr=1;
  OCR3ReportWithInfo ri=2;
}

message OCR3ShouldTransmitAcceptedReportReply{
  bool shouldTransmit=1;
}
