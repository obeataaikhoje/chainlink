syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-relay/pkg/loop/internal/pb";

package loop;

import "google/protobuf/empty.proto";

service PluginRelayer {
  rpc NewRelayer (NewRelayerRequest) returns (NewRelayerReply) {}
}

message NewRelayerRequest {
  string config = 1; // toml (is chain instance config enough?)
  uint32 keystoreID = 2;

  //TODO prometheus? https://smartcontract-it.atlassian.net/browse/BCF-2075
}

message NewRelayerReply {
  uint32 relayerID = 1;
}

service Keystore {
  rpc Accounts (google.protobuf.Empty) returns (AccountsReply) {}
  rpc Sign (SignRequest) returns (SignReply) {}
}

message AccountsReply {
  repeated string accounts = 1;
}

message SignRequest {
  string account = 1;
  bytes data = 2;
}

message SignReply {
  bytes signedData = 1;
}

service Relayer {
  rpc NewConfigProvider (NewConfigProviderRequest) returns (NewConfigProviderReply) {}
  rpc NewPluginProvider (NewPluginProviderRequest) returns (NewPluginProviderReply) {}

  rpc GetChainStatus (GetChainStatusRequest) returns (GetChainStatusReply) {}
  rpc ListNodeStatuses (ListNodeStatusesRequest) returns (ListNodeStatusesReply) {}
  rpc Transact (TransactionRequest) returns (google.protobuf.Empty) {}
}

// RelayArgs represents [github.com/smartcontractkit/chainlink-relay/pkg/types.RelayArgs].
message RelayArgs {
  bytes externalJobID = 1; // [32]byte
  int32 jobID = 2;
  string contractID = 3;
  bool new = 4;
  bytes relayConfig = 5;
  string providerType = 6;
}

// RelayArgs represents [github.com/smartcontractkit/chainlink-relay/pkg/types.PluginArgs].
message PluginArgs {
  string transmitterID = 1;
  bytes pluginConfig = 2;
}

// NewPluginProviderRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewPluginProvider].
message NewPluginProviderRequest {
  RelayArgs relayArgs = 1;
  PluginArgs pluginArgs = 2;
}

// NewPluginProviderReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewPluginProvider].
message NewPluginProviderReply {
  uint32 pluginProviderID = 1;
}

// NewConfigProviderRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewConfigProvider].
message NewConfigProviderRequest {
  RelayArgs relayArgs = 1;
}

// NewConfigProviderReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewConfigProvider].
message NewConfigProviderReply {
  uint32 configProviderID = 1;
}

message GetChainStatusRequest {}

// ChainStatusReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.ChainStatus].
message GetChainStatusReply {
  ChainStatus chain = 1;
}


// ChainStatus represents [github.com/smartcontractkit/chainlink-relay/pkg/types.ChainStatus].
message ChainStatus {
  string id = 1;
  bool enabled = 2;
  string config = 3; // TOML
}

// ListNodeStatusesRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.ListNodeStatuses].
message ListNodeStatusesRequest {
  int32 page_size = 1;
  string page_token = 2;
}

// ListNodeStatusesReply is a pagination response  for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.ListNodeStatuses].
message ListNodeStatusesReply {
  repeated NodeStatus nodes = 1;
  int32 total = 2; // total count of nodes
  string next_page_token =3;
}

// NodeStatus represents [github.com/smartcontractkit/chainlink-relay/pkg/types.NodeStatus].
message NodeStatus {
  string chainID = 1;
  string name = 2;
  string config = 3; // TOML
  string state = 4;
}

// SendTxRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.SendTx].
message TransactionRequest {
  string from = 1;
  string to = 2;
  BigInt amount = 3;
  bool balanceCheck = 4;
}

service DataSource {
  rpc Observe (ObserveRequest) returns (ObserveReply) {}
}

// ObserveRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.DataSource.Observe].
message ObserveRequest {
  ReportTimestamp reportTimestamp = 1;
}

// ObserveReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.DataSource.Observe].
message ObserveReply {
  BigInt value = 1;
}

service OffchainConfigDigester {
  rpc ConfigDigest (ConfigDigestRequest) returns (ConfigDigestReply) {}
  rpc ConfigDigestPrefix (ConfigDigestPrefixRequest) returns (ConfigDigestPrefixReply) {}
}

// ContractConfig represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ContractConfig]
message ContractConfig {
  bytes configDigest = 1; // [32]byte
  uint64 configCount = 2;
  repeated bytes signers = 3; // []OnchainPublicKey
  repeated string transmitters = 4; // []Account
  uint32 F = 5; // uint8
  bytes onchainConfig = 6;
  uint64 offchainConfigVersion = 7;
  bytes offchainConfig = 8;
}

// ConfigDigestRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.OffchainConfigDigester.ConfigDigest].
message ConfigDigestRequest {
    ContractConfig contractConfig = 1;
}

// ConfigDigestReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.OffchainConfigDigester.ConfigDigest].
message ConfigDigestReply {
  bytes configDigest = 1; // [32]byte
}

message ConfigDigestPrefixRequest {}

// ConfigDigestPrefixReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.OffchainConfigDigester.ConfigDigestPrefix].
message ConfigDigestPrefixReply {
  uint32 configDigestPrefix = 1; // uint16
}

service ContractConfigTracker {
  rpc LatestConfigDetails (LatestConfigDetailsRequest) returns (LatestConfigDetailsReply) {}
  rpc LatestConfig (LatestConfigRequest) returns (LatestConfigReply) {}
  rpc LatestBlockHeight (LatestBlockHeightRequest) returns (LatestBlockHeightReply) {}
}

message LatestConfigDetailsRequest {}

// LatestConfigDetailsReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ContractConfigTracker.LatestConfigDetails].
message LatestConfigDetailsReply {
  uint64 changedInBlock = 1;
  bytes configDigest = 2; // [32]byte
}

// LatestConfigRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ContractConfigTracker.LatestConfig].
message LatestConfigRequest {
  uint64 changedInBlock = 1;
}

// LatestConfigReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ContractConfigTracker.LatestConfig].
message LatestConfigReply {
  ContractConfig contractConfig = 1;
}

message LatestBlockHeightRequest {}

// LatestBlockHeightReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ContractConfigTracker.LatestBlockHeightReply].
message LatestBlockHeightReply {
  uint64 blockHeight = 1;
}

service ContractTransmitter {
  rpc Transmit (TransmitRequest) returns (TransmitReply) {}
  rpc LatestConfigDigestAndEpoch (LatestConfigDigestAndEpochRequest) returns (LatestConfigDigestAndEpochReply) {}
  rpc FromAccount (FromAccountRequest) returns (FromAccountReply) {}
}

// ReportTimestamp represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportTimestamp].
message ReportTimestamp {
  bytes configDigest = 1; // [32]byte
  uint32 epoch = 2;
  uint32 round = 3; // uint8
}

// ReportContext represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportContext].
message ReportContext {
    ReportTimestamp reportTimestamp = 1;
    bytes extraHash = 2; // [32]byte
}

// AttributedOnchainSignature represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.AttributedOnchainSignature].
message AttributedOnchainSignature {
  bytes signature = 1;
  uint32 signer = 2; // uint8
}

// TransmitRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ContractTransmitter.Transmit].
message TransmitRequest {
  ReportContext reportContext = 1;
  bytes report = 2;
  repeated AttributedOnchainSignature attributedOnchainSignatures = 3;
}
message TransmitReply {}

message LatestConfigDigestAndEpochRequest {}

// LatestConfigDigestAndEpochReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ContractTransmitter.LatestConfigDigestAndEpoch].
message LatestConfigDigestAndEpochReply {
  bytes configDigest = 1; // [32]byte
  uint32 epoch = 2;
}

message FromAccountRequest {}

// FromAccountReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/types.Service.FromAccount].
message FromAccountReply {
  string Account = 1;
}

service ChainReader {
  rpc GetLatestValue (GetLatestValueRequest) returns (GetLatestValueReply) {}
  rpc GetEncoding(GetEncodingRequest) returns (GetEncodingResponse);
  rpc GetDecoding(GetDecodingRequest) returns (GetDecodingResponse);
  rpc GetMaxSize(GetMaxSizeRequest) returns (GetMaxSizeResponse);
}

message VersionedBytes {
    uint32 version = 1;
    bytes data = 2;
}

// GetLatestValueRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/types.ChainReader.GetLatestValue].
message GetLatestValueRequest {
    BoundContract bc = 1;
    string method = 2;
    VersionedBytes params = 3;
}

// GetLatestValueReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/types.ChainReader.GetLatestValue].
message GetLatestValueReply {
  VersionedBytes retVal = 1;
}

message GetEncodingRequest {
  VersionedBytes params = 1;
  string itemType = 2;
}

message GetEncodingResponse {
  bytes retVal = 1;
}

message GetDecodingRequest {
  bytes encoded = 1;
  string itemType = 2;
  bool forceSplit = 3;
}

message GetDecodingResponse {
  VersionedBytes retVal = 1;
}

message GetMaxSizeRequest {
  int32 n = 1;
  string itemType = 2;
  bool forEncoding = 3;
}

message GetMaxSizeResponse {
  int32 sizeInBytes = 1;
}

// BoundContract represents a [github.com/smartcontractkit/chainlink-relay/pkg/types.BoundContract].
message BoundContract {
    string address = 1;
    string name = 2;
    bool pending = 3;
}

service Service {
  rpc Name (google.protobuf.Empty) returns (NameReply) {}
  rpc Close (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc Ready (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc HealthReport (google.protobuf.Empty) returns (HealthReportReply) {}
}

// NameReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/types.Service.Name].
message NameReply {
  string name = 1;
}

// HealthReportReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/types.Service.HealthReport].
message HealthReportReply {
  map<string, string> healthReport = 1;
}

// BigInt represents a [big.Int].
message BigInt {
  bool negative = 1;
  bytes value = 2;
}

// Keys, Signatures, Messages to sign

message StarknetSignature {
  BigInt x = 1;
  BigInt y = 2;
}

message StarknetMessageHash {
  BigInt hash = 1;
}
