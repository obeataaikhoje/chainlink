// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: relayer.proto

package loop

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewRelayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config     string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"` // toml (is chain instance config enough?)
	KeystoreID uint32 `protobuf:"varint,2,opt,name=keystoreID,proto3" json:"keystoreID,omitempty"`
}

func (x *NewRelayerRequest) Reset() {
	*x = NewRelayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRelayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRelayerRequest) ProtoMessage() {}

func (x *NewRelayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRelayerRequest.ProtoReflect.Descriptor instead.
func (*NewRelayerRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{0}
}

func (x *NewRelayerRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *NewRelayerRequest) GetKeystoreID() uint32 {
	if x != nil {
		return x.KeystoreID
	}
	return 0
}

type NewRelayerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayerID uint32 `protobuf:"varint,1,opt,name=relayerID,proto3" json:"relayerID,omitempty"`
}

func (x *NewRelayerReply) Reset() {
	*x = NewRelayerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRelayerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRelayerReply) ProtoMessage() {}

func (x *NewRelayerReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRelayerReply.ProtoReflect.Descriptor instead.
func (*NewRelayerReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{1}
}

func (x *NewRelayerReply) GetRelayerID() uint32 {
	if x != nil {
		return x.RelayerID
	}
	return 0
}

type KeysReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *KeysReply) Reset() {
	*x = KeysReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysReply) ProtoMessage() {}

func (x *KeysReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysReply.ProtoReflect.Descriptor instead.
func (*KeysReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{2}
}

func (x *KeysReply) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{3}
}

func (x *SignRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SignRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SignReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedData []byte `protobuf:"bytes,1,opt,name=signedData,proto3" json:"signedData,omitempty"`
}

func (x *SignReply) Reset() {
	*x = SignReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignReply) ProtoMessage() {}

func (x *SignReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignReply.ProtoReflect.Descriptor instead.
func (*SignReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{4}
}

func (x *SignReply) GetSignedData() []byte {
	if x != nil {
		return x.SignedData
	}
	return nil
}

// RelayArgs represents [github.com/smartcontractkit/chainlink-relay/pkg/types.RelayArgs].
type RelayArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalJobID []byte `protobuf:"bytes,1,opt,name=externalJobID,proto3" json:"externalJobID,omitempty"` // [32]byte
	JobID         int32  `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	ContractID    string `protobuf:"bytes,3,opt,name=contractID,proto3" json:"contractID,omitempty"`
	New           bool   `protobuf:"varint,4,opt,name=new,proto3" json:"new,omitempty"`
	RelayConfig   []byte `protobuf:"bytes,5,opt,name=relayConfig,proto3" json:"relayConfig,omitempty"`
}

func (x *RelayArgs) Reset() {
	*x = RelayArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayArgs) ProtoMessage() {}

func (x *RelayArgs) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayArgs.ProtoReflect.Descriptor instead.
func (*RelayArgs) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{5}
}

func (x *RelayArgs) GetExternalJobID() []byte {
	if x != nil {
		return x.ExternalJobID
	}
	return nil
}

func (x *RelayArgs) GetJobID() int32 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *RelayArgs) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *RelayArgs) GetNew() bool {
	if x != nil {
		return x.New
	}
	return false
}

func (x *RelayArgs) GetRelayConfig() []byte {
	if x != nil {
		return x.RelayConfig
	}
	return nil
}

// RelayArgs represents [github.com/smartcontractkit/chainlink-relay/pkg/types.PluginArgs].
type PluginArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransmitterID string `protobuf:"bytes,1,opt,name=transmitterID,proto3" json:"transmitterID,omitempty"`
	PluginConfig  []byte `protobuf:"bytes,2,opt,name=pluginConfig,proto3" json:"pluginConfig,omitempty"`
}

func (x *PluginArgs) Reset() {
	*x = PluginArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginArgs) ProtoMessage() {}

func (x *PluginArgs) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginArgs.ProtoReflect.Descriptor instead.
func (*PluginArgs) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{6}
}

func (x *PluginArgs) GetTransmitterID() string {
	if x != nil {
		return x.TransmitterID
	}
	return ""
}

func (x *PluginArgs) GetPluginConfig() []byte {
	if x != nil {
		return x.PluginConfig
	}
	return nil
}

// NewConfigProviderRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewConfigProvider].
type NewConfigProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayArgs *RelayArgs `protobuf:"bytes,1,opt,name=relayArgs,proto3" json:"relayArgs,omitempty"`
}

func (x *NewConfigProviderRequest) Reset() {
	*x = NewConfigProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewConfigProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConfigProviderRequest) ProtoMessage() {}

func (x *NewConfigProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConfigProviderRequest.ProtoReflect.Descriptor instead.
func (*NewConfigProviderRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{7}
}

func (x *NewConfigProviderRequest) GetRelayArgs() *RelayArgs {
	if x != nil {
		return x.RelayArgs
	}
	return nil
}

// NewConfigProviderReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewConfigProvider].
type NewConfigProviderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigProviderID uint32 `protobuf:"varint,1,opt,name=configProviderID,proto3" json:"configProviderID,omitempty"`
}

func (x *NewConfigProviderReply) Reset() {
	*x = NewConfigProviderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewConfigProviderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConfigProviderReply) ProtoMessage() {}

func (x *NewConfigProviderReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConfigProviderReply.ProtoReflect.Descriptor instead.
func (*NewConfigProviderReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{8}
}

func (x *NewConfigProviderReply) GetConfigProviderID() uint32 {
	if x != nil {
		return x.ConfigProviderID
	}
	return 0
}

// NewMedianProviderRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewMedianProvider].
type NewMedianProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayArgs  *RelayArgs  `protobuf:"bytes,1,opt,name=relayArgs,proto3" json:"relayArgs,omitempty"`
	PluginArgs *PluginArgs `protobuf:"bytes,2,opt,name=pluginArgs,proto3" json:"pluginArgs,omitempty"`
}

func (x *NewMedianProviderRequest) Reset() {
	*x = NewMedianProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMedianProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMedianProviderRequest) ProtoMessage() {}

func (x *NewMedianProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMedianProviderRequest.ProtoReflect.Descriptor instead.
func (*NewMedianProviderRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{9}
}

func (x *NewMedianProviderRequest) GetRelayArgs() *RelayArgs {
	if x != nil {
		return x.RelayArgs
	}
	return nil
}

func (x *NewMedianProviderRequest) GetPluginArgs() *PluginArgs {
	if x != nil {
		return x.PluginArgs
	}
	return nil
}

// NewMedianProviderReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewMedianProvider].
type NewMedianProviderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedianProviderID uint32 `protobuf:"varint,1,opt,name=medianProviderID,proto3" json:"medianProviderID,omitempty"`
}

func (x *NewMedianProviderReply) Reset() {
	*x = NewMedianProviderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMedianProviderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMedianProviderReply) ProtoMessage() {}

func (x *NewMedianProviderReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMedianProviderReply.ProtoReflect.Descriptor instead.
func (*NewMedianProviderReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{10}
}

func (x *NewMedianProviderReply) GetMedianProviderID() uint32 {
	if x != nil {
		return x.MedianProviderID
	}
	return 0
}

// NewMercuryProviderRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewMercuryProvider].
type NewMercuryProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayArgs  *RelayArgs  `protobuf:"bytes,1,opt,name=relayArgs,proto3" json:"relayArgs,omitempty"`
	PluginArgs *PluginArgs `protobuf:"bytes,2,opt,name=pluginArgs,proto3" json:"pluginArgs,omitempty"`
}

func (x *NewMercuryProviderRequest) Reset() {
	*x = NewMercuryProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMercuryProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryProviderRequest) ProtoMessage() {}

func (x *NewMercuryProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryProviderRequest.ProtoReflect.Descriptor instead.
func (*NewMercuryProviderRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{11}
}

func (x *NewMercuryProviderRequest) GetRelayArgs() *RelayArgs {
	if x != nil {
		return x.RelayArgs
	}
	return nil
}

func (x *NewMercuryProviderRequest) GetPluginArgs() *PluginArgs {
	if x != nil {
		return x.PluginArgs
	}
	return nil
}

// NewMercuryProviderReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NewMercuryProvider].
type NewMercuryProviderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MercuryProviderID uint32 `protobuf:"varint,1,opt,name=mercuryProviderID,proto3" json:"mercuryProviderID,omitempty"`
}

func (x *NewMercuryProviderReply) Reset() {
	*x = NewMercuryProviderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMercuryProviderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryProviderReply) ProtoMessage() {}

func (x *NewMercuryProviderReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryProviderReply.ProtoReflect.Descriptor instead.
func (*NewMercuryProviderReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{12}
}

func (x *NewMercuryProviderReply) GetMercuryProviderID() uint32 {
	if x != nil {
		return x.MercuryProviderID
	}
	return 0
}

// ChainStatusRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.ChainStatus].
type ChainStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChainStatusRequest) Reset() {
	*x = ChainStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStatusRequest) ProtoMessage() {}

func (x *ChainStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStatusRequest.ProtoReflect.Descriptor instead.
func (*ChainStatusRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{13}
}

func (x *ChainStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ChainStatusReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.ChainStatus].
type ChainStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain *ChainStatus `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *ChainStatusReply) Reset() {
	*x = ChainStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStatusReply) ProtoMessage() {}

func (x *ChainStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStatusReply.ProtoReflect.Descriptor instead.
func (*ChainStatusReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{14}
}

func (x *ChainStatusReply) GetChain() *ChainStatus {
	if x != nil {
		return x.Chain
	}
	return nil
}

// ChainStatusesRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.ChainStatuses].
type ChainStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ChainStatusesRequest) Reset() {
	*x = ChainStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStatusesRequest) ProtoMessage() {}

func (x *ChainStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStatusesRequest.ProtoReflect.Descriptor instead.
func (*ChainStatusesRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{15}
}

func (x *ChainStatusesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChainStatusesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// ChainStatusesReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.ChainStatuses].
type ChainStatusesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chains []*ChainStatus `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
	Count  int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ChainStatusesReply) Reset() {
	*x = ChainStatusesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStatusesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStatusesReply) ProtoMessage() {}

func (x *ChainStatusesReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStatusesReply.ProtoReflect.Descriptor instead.
func (*ChainStatusesReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{16}
}

func (x *ChainStatusesReply) GetChains() []*ChainStatus {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *ChainStatusesReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// ChainStatus represents [github.com/smartcontractkit/chainlink-relay/pkg/types.ChainStatus].
type ChainStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Config  string `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"` // TOML
}

func (x *ChainStatus) Reset() {
	*x = ChainStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStatus) ProtoMessage() {}

func (x *ChainStatus) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStatus.ProtoReflect.Descriptor instead.
func (*ChainStatus) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{17}
}

func (x *ChainStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChainStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ChainStatus) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

// NodeStatusesRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NodeStatuses].
type NodeStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset   int32    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ChainIDs []string `protobuf:"bytes,3,rep,name=chainIDs,proto3" json:"chainIDs,omitempty"`
}

func (x *NodeStatusesRequest) Reset() {
	*x = NodeStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusesRequest) ProtoMessage() {}

func (x *NodeStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusesRequest.ProtoReflect.Descriptor instead.
func (*NodeStatusesRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{18}
}

func (x *NodeStatusesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *NodeStatusesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *NodeStatusesRequest) GetChainIDs() []string {
	if x != nil {
		return x.ChainIDs
	}
	return nil
}

// NodeStatusesReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.NodeStatuses].
type NodeStatusesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeStatus `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Count int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *NodeStatusesReply) Reset() {
	*x = NodeStatusesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatusesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusesReply) ProtoMessage() {}

func (x *NodeStatusesReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusesReply.ProtoReflect.Descriptor instead.
func (*NodeStatusesReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{19}
}

func (x *NodeStatusesReply) GetNodes() []*NodeStatus {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeStatusesReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// NodeStatus represents [github.com/smartcontractkit/chainlink-relay/pkg/types.NodeStatus].
type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Config  string `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"` // TOML
	State   string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{20}
}

func (x *NodeStatus) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *NodeStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeStatus) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *NodeStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// SendTxRequest has arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.Relayer.SendTx].
type SendTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainID      string  `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	From         string  `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To           string  `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount       *BigInt `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BalanceCheck bool    `protobuf:"varint,5,opt,name=balanceCheck,proto3" json:"balanceCheck,omitempty"`
}

func (x *SendTxRequest) Reset() {
	*x = SendTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTxRequest) ProtoMessage() {}

func (x *SendTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTxRequest.ProtoReflect.Descriptor instead.
func (*SendTxRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{21}
}

func (x *SendTxRequest) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *SendTxRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SendTxRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SendTxRequest) GetAmount() *BigInt {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SendTxRequest) GetBalanceCheck() bool {
	if x != nil {
		return x.BalanceCheck
	}
	return false
}

// ObserveReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/loop.DataSource.Observe].
type ObserveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *BigInt `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ObserveReply) Reset() {
	*x = ObserveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveReply) ProtoMessage() {}

func (x *ObserveReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveReply.ProtoReflect.Descriptor instead.
func (*ObserveReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{22}
}

func (x *ObserveReply) GetValue() *BigInt {
	if x != nil {
		return x.Value
	}
	return nil
}

// ContractConfig represents [github.com/smartcontractkit/libocr/offchainreporting2/types.ContractConfig]
type ContractConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigDigest          []byte   `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
	ConfigCount           uint64   `protobuf:"varint,2,opt,name=configCount,proto3" json:"configCount,omitempty"`
	Signers               [][]byte `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`           // []OnchainPublicKey
	Transmitters          []string `protobuf:"bytes,4,rep,name=transmitters,proto3" json:"transmitters,omitempty"` // []Account
	F                     uint32   `protobuf:"varint,5,opt,name=F,proto3" json:"F,omitempty"`                      // uint8
	OnchainConfig         []byte   `protobuf:"bytes,6,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
	OffchainConfigVersion uint64   `protobuf:"varint,7,opt,name=offchainConfigVersion,proto3" json:"offchainConfigVersion,omitempty"`
	OffchainConfig        []byte   `protobuf:"bytes,8,opt,name=offchainConfig,proto3" json:"offchainConfig,omitempty"`
}

func (x *ContractConfig) Reset() {
	*x = ContractConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractConfig) ProtoMessage() {}

func (x *ContractConfig) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractConfig.ProtoReflect.Descriptor instead.
func (*ContractConfig) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{23}
}

func (x *ContractConfig) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *ContractConfig) GetConfigCount() uint64 {
	if x != nil {
		return x.ConfigCount
	}
	return 0
}

func (x *ContractConfig) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *ContractConfig) GetTransmitters() []string {
	if x != nil {
		return x.Transmitters
	}
	return nil
}

func (x *ContractConfig) GetF() uint32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *ContractConfig) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

func (x *ContractConfig) GetOffchainConfigVersion() uint64 {
	if x != nil {
		return x.OffchainConfigVersion
	}
	return 0
}

func (x *ContractConfig) GetOffchainConfig() []byte {
	if x != nil {
		return x.OffchainConfig
	}
	return nil
}

// ConfigDigestRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.OffchainConfigDigester.ConfigDigest].
type ConfigDigestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractConfig *ContractConfig `protobuf:"bytes,1,opt,name=contractConfig,proto3" json:"contractConfig,omitempty"`
}

func (x *ConfigDigestRequest) Reset() {
	*x = ConfigDigestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDigestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDigestRequest) ProtoMessage() {}

func (x *ConfigDigestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDigestRequest.ProtoReflect.Descriptor instead.
func (*ConfigDigestRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{24}
}

func (x *ConfigDigestRequest) GetContractConfig() *ContractConfig {
	if x != nil {
		return x.ContractConfig
	}
	return nil
}

// ConfigDigestReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.OffchainConfigDigester.ConfigDigest].
type ConfigDigestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigDigest []byte `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
}

func (x *ConfigDigestReply) Reset() {
	*x = ConfigDigestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDigestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDigestReply) ProtoMessage() {}

func (x *ConfigDigestReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDigestReply.ProtoReflect.Descriptor instead.
func (*ConfigDigestReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigDigestReply) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

type ConfigDigestPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigDigestPrefixRequest) Reset() {
	*x = ConfigDigestPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDigestPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDigestPrefixRequest) ProtoMessage() {}

func (x *ConfigDigestPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDigestPrefixRequest.ProtoReflect.Descriptor instead.
func (*ConfigDigestPrefixRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{26}
}

// ConfigDigestPrefixReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.OffchainConfigDigester.ConfigDigestPrefix].
type ConfigDigestPrefixReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigDigestPrefix uint32 `protobuf:"varint,1,opt,name=configDigestPrefix,proto3" json:"configDigestPrefix,omitempty"` // uint16
}

func (x *ConfigDigestPrefixReply) Reset() {
	*x = ConfigDigestPrefixReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDigestPrefixReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDigestPrefixReply) ProtoMessage() {}

func (x *ConfigDigestPrefixReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDigestPrefixReply.ProtoReflect.Descriptor instead.
func (*ConfigDigestPrefixReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigDigestPrefixReply) GetConfigDigestPrefix() uint32 {
	if x != nil {
		return x.ConfigDigestPrefix
	}
	return 0
}

type LatestConfigDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LatestConfigDetailsRequest) Reset() {
	*x = LatestConfigDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestConfigDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestConfigDetailsRequest) ProtoMessage() {}

func (x *LatestConfigDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestConfigDetailsRequest.ProtoReflect.Descriptor instead.
func (*LatestConfigDetailsRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{28}
}

// LatestConfigDetailsReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.ContractConfigTracker.LatestConfigDetails].
type LatestConfigDetailsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangedInBlock uint64 `protobuf:"varint,1,opt,name=changedInBlock,proto3" json:"changedInBlock,omitempty"`
	ConfigDigest   []byte `protobuf:"bytes,2,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
}

func (x *LatestConfigDetailsReply) Reset() {
	*x = LatestConfigDetailsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestConfigDetailsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestConfigDetailsReply) ProtoMessage() {}

func (x *LatestConfigDetailsReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestConfigDetailsReply.ProtoReflect.Descriptor instead.
func (*LatestConfigDetailsReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{29}
}

func (x *LatestConfigDetailsReply) GetChangedInBlock() uint64 {
	if x != nil {
		return x.ChangedInBlock
	}
	return 0
}

func (x *LatestConfigDetailsReply) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

// LatestConfigRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.ContractConfigTracker.LatestConfig].
type LatestConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangedInBlock uint64 `protobuf:"varint,1,opt,name=changedInBlock,proto3" json:"changedInBlock,omitempty"`
}

func (x *LatestConfigRequest) Reset() {
	*x = LatestConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestConfigRequest) ProtoMessage() {}

func (x *LatestConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestConfigRequest.ProtoReflect.Descriptor instead.
func (*LatestConfigRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{30}
}

func (x *LatestConfigRequest) GetChangedInBlock() uint64 {
	if x != nil {
		return x.ChangedInBlock
	}
	return 0
}

// LatestConfigReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.ContractConfigTracker.LatestConfig].
type LatestConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractConfig *ContractConfig `protobuf:"bytes,1,opt,name=contractConfig,proto3" json:"contractConfig,omitempty"`
}

func (x *LatestConfigReply) Reset() {
	*x = LatestConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestConfigReply) ProtoMessage() {}

func (x *LatestConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestConfigReply.ProtoReflect.Descriptor instead.
func (*LatestConfigReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{31}
}

func (x *LatestConfigReply) GetContractConfig() *ContractConfig {
	if x != nil {
		return x.ContractConfig
	}
	return nil
}

type LatestBlockHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LatestBlockHeightRequest) Reset() {
	*x = LatestBlockHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestBlockHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestBlockHeightRequest) ProtoMessage() {}

func (x *LatestBlockHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestBlockHeightRequest.ProtoReflect.Descriptor instead.
func (*LatestBlockHeightRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{32}
}

// LatestBlockHeightReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.ContractConfigTracker.LatestBlockHeightReply].
type LatestBlockHeightReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64 `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (x *LatestBlockHeightReply) Reset() {
	*x = LatestBlockHeightReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestBlockHeightReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestBlockHeightReply) ProtoMessage() {}

func (x *LatestBlockHeightReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestBlockHeightReply.ProtoReflect.Descriptor instead.
func (*LatestBlockHeightReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{33}
}

func (x *LatestBlockHeightReply) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

// ReportTimestamp represents [github.com/smartcontractkit/libocr/offchainreporting2/types.ReportTimestamp].
type ReportTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigDigest []byte `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
	Epoch        uint32 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round        uint32 `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"` // uint8
}

func (x *ReportTimestamp) Reset() {
	*x = ReportTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTimestamp) ProtoMessage() {}

func (x *ReportTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTimestamp.ProtoReflect.Descriptor instead.
func (*ReportTimestamp) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{34}
}

func (x *ReportTimestamp) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *ReportTimestamp) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ReportTimestamp) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

// ReportContext represents [github.com/smartcontractkit/libocr/offchainreporting2/types.ReportContext].
type ReportContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportTimestamp *ReportTimestamp `protobuf:"bytes,1,opt,name=reportTimestamp,proto3" json:"reportTimestamp,omitempty"`
	ExtraHash       []byte           `protobuf:"bytes,2,opt,name=extraHash,proto3" json:"extraHash,omitempty"` // [32]byte
}

func (x *ReportContext) Reset() {
	*x = ReportContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportContext) ProtoMessage() {}

func (x *ReportContext) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportContext.ProtoReflect.Descriptor instead.
func (*ReportContext) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{35}
}

func (x *ReportContext) GetReportTimestamp() *ReportTimestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

func (x *ReportContext) GetExtraHash() []byte {
	if x != nil {
		return x.ExtraHash
	}
	return nil
}

// AttributedOnchainSignature represents [github.com/smartcontractkit/libocr/offchainreporting2/types.AttributedOnchainSignature].
type AttributedOnchainSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Signer    uint32 `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"` // uint8
}

func (x *AttributedOnchainSignature) Reset() {
	*x = AttributedOnchainSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedOnchainSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedOnchainSignature) ProtoMessage() {}

func (x *AttributedOnchainSignature) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedOnchainSignature.ProtoReflect.Descriptor instead.
func (*AttributedOnchainSignature) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{36}
}

func (x *AttributedOnchainSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AttributedOnchainSignature) GetSigner() uint32 {
	if x != nil {
		return x.Signer
	}
	return 0
}

// TransmitRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.ContractTransmitter.Transmit].
type TransmitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportContext               *ReportContext                `protobuf:"bytes,1,opt,name=reportContext,proto3" json:"reportContext,omitempty"`
	Report                      []byte                        `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	AttributedOnchainSignatures []*AttributedOnchainSignature `protobuf:"bytes,3,rep,name=attributedOnchainSignatures,proto3" json:"attributedOnchainSignatures,omitempty"`
}

func (x *TransmitRequest) Reset() {
	*x = TransmitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitRequest) ProtoMessage() {}

func (x *TransmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitRequest.ProtoReflect.Descriptor instead.
func (*TransmitRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{37}
}

func (x *TransmitRequest) GetReportContext() *ReportContext {
	if x != nil {
		return x.ReportContext
	}
	return nil
}

func (x *TransmitRequest) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *TransmitRequest) GetAttributedOnchainSignatures() []*AttributedOnchainSignature {
	if x != nil {
		return x.AttributedOnchainSignatures
	}
	return nil
}

type TransmitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransmitReply) Reset() {
	*x = TransmitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitReply) ProtoMessage() {}

func (x *TransmitReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitReply.ProtoReflect.Descriptor instead.
func (*TransmitReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{38}
}

type LatestConfigDigestAndEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LatestConfigDigestAndEpochRequest) Reset() {
	*x = LatestConfigDigestAndEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestConfigDigestAndEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestConfigDigestAndEpochRequest) ProtoMessage() {}

func (x *LatestConfigDigestAndEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestConfigDigestAndEpochRequest.ProtoReflect.Descriptor instead.
func (*LatestConfigDigestAndEpochRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{39}
}

// LatestConfigDigestAndEpochReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/types.ContractTransmitter.LatestConfigDigestAndEpoch].
type LatestConfigDigestAndEpochReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigDigest []byte `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
	Epoch        uint32 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *LatestConfigDigestAndEpochReply) Reset() {
	*x = LatestConfigDigestAndEpochReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestConfigDigestAndEpochReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestConfigDigestAndEpochReply) ProtoMessage() {}

func (x *LatestConfigDigestAndEpochReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestConfigDigestAndEpochReply.ProtoReflect.Descriptor instead.
func (*LatestConfigDigestAndEpochReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{40}
}

func (x *LatestConfigDigestAndEpochReply) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *LatestConfigDigestAndEpochReply) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type FromAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FromAccountRequest) Reset() {
	*x = FromAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromAccountRequest) ProtoMessage() {}

func (x *FromAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromAccountRequest.ProtoReflect.Descriptor instead.
func (*FromAccountRequest) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{41}
}

// FromAccountReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/types.Service.FromAccount].
type FromAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
}

func (x *FromAccountReply) Reset() {
	*x = FromAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromAccountReply) ProtoMessage() {}

func (x *FromAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromAccountReply.ProtoReflect.Descriptor instead.
func (*FromAccountReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{42}
}

func (x *FromAccountReply) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

// NameReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/types.Service.Name].
type NameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameReply) Reset() {
	*x = NameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameReply) ProtoMessage() {}

func (x *NameReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameReply.ProtoReflect.Descriptor instead.
func (*NameReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{43}
}

func (x *NameReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// HealthReportReply has return arguments for [github.com/smartcontractkit/chainlink-relay/pkg/types.Service.HealthReport].
type HealthReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthReport map[string]string `protobuf:"bytes,1,rep,name=healthReport,proto3" json:"healthReport,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HealthReportReply) Reset() {
	*x = HealthReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthReportReply) ProtoMessage() {}

func (x *HealthReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthReportReply.ProtoReflect.Descriptor instead.
func (*HealthReportReply) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{44}
}

func (x *HealthReportReply) GetHealthReport() map[string]string {
	if x != nil {
		return x.HealthReport
	}
	return nil
}

// BigInt represents a [big.Int].
type BigInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negative bool   `protobuf:"varint,1,opt,name=negative,proto3" json:"negative,omitempty"`
	Value    []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relayer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_relayer_proto_rawDescGZIP(), []int{45}
}

func (x *BigInt) GetNegative() bool {
	if x != nil {
		return x.Negative
	}
	return false
}

func (x *BigInt) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_relayer_proto protoreflect.FileDescriptor

var file_relayer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x22,
	0x2f, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x27, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x9b, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4a, 0x6f, 0x62,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x56, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x49, 0x0a, 0x18, 0x4e, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x72, 0x67, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x18, 0x4e, 0x65,
	0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0a, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7c, 0x0a,
	0x19, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x4e,
	0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x55, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5f, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x22, 0x51, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x0a, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x32, 0x0a,
	0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa6, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x46, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x01, 0x46, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f,
	0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x15,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x37, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66,
	0x0a, 0x18, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x13, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x51, 0x0a, 0x11, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x16, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x61, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x6e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x52, 0x0a, 0x1a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x62,
	0x0a, 0x1b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x1b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x23, 0x0a, 0x21, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x1f, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6e,
	0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x10, 0x46,
	0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1f, 0x0a, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4d, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a,
	0x3f, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3a, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x4f, 0x0a, 0x0d,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x0a, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x6b, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x04,
	0x53, 0x69, 0x67, 0x6e, 0x12, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x96, 0x04, 0x0a, 0x07, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x4e,
	0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x65,
	0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e,
	0x65, 0x77, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x78, 0x12, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x32, 0x45, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xb6, 0x01, 0x0a, 0x16, 0x4f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x1f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x32, 0x8d, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x59, 0x0a,
	0x13, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x11, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x32, 0x82, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x64,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xed, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x31, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_relayer_proto_rawDescOnce sync.Once
	file_relayer_proto_rawDescData = file_relayer_proto_rawDesc
)

func file_relayer_proto_rawDescGZIP() []byte {
	file_relayer_proto_rawDescOnce.Do(func() {
		file_relayer_proto_rawDescData = protoimpl.X.CompressGZIP(file_relayer_proto_rawDescData)
	})
	return file_relayer_proto_rawDescData
}

var file_relayer_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_relayer_proto_goTypes = []interface{}{
	(*NewRelayerRequest)(nil),                 // 0: loop.NewRelayerRequest
	(*NewRelayerReply)(nil),                   // 1: loop.NewRelayerReply
	(*KeysReply)(nil),                         // 2: loop.KeysReply
	(*SignRequest)(nil),                       // 3: loop.SignRequest
	(*SignReply)(nil),                         // 4: loop.SignReply
	(*RelayArgs)(nil),                         // 5: loop.RelayArgs
	(*PluginArgs)(nil),                        // 6: loop.PluginArgs
	(*NewConfigProviderRequest)(nil),          // 7: loop.NewConfigProviderRequest
	(*NewConfigProviderReply)(nil),            // 8: loop.NewConfigProviderReply
	(*NewMedianProviderRequest)(nil),          // 9: loop.NewMedianProviderRequest
	(*NewMedianProviderReply)(nil),            // 10: loop.NewMedianProviderReply
	(*NewMercuryProviderRequest)(nil),         // 11: loop.NewMercuryProviderRequest
	(*NewMercuryProviderReply)(nil),           // 12: loop.NewMercuryProviderReply
	(*ChainStatusRequest)(nil),                // 13: loop.ChainStatusRequest
	(*ChainStatusReply)(nil),                  // 14: loop.ChainStatusReply
	(*ChainStatusesRequest)(nil),              // 15: loop.ChainStatusesRequest
	(*ChainStatusesReply)(nil),                // 16: loop.ChainStatusesReply
	(*ChainStatus)(nil),                       // 17: loop.ChainStatus
	(*NodeStatusesRequest)(nil),               // 18: loop.NodeStatusesRequest
	(*NodeStatusesReply)(nil),                 // 19: loop.NodeStatusesReply
	(*NodeStatus)(nil),                        // 20: loop.NodeStatus
	(*SendTxRequest)(nil),                     // 21: loop.SendTxRequest
	(*ObserveReply)(nil),                      // 22: loop.ObserveReply
	(*ContractConfig)(nil),                    // 23: loop.ContractConfig
	(*ConfigDigestRequest)(nil),               // 24: loop.ConfigDigestRequest
	(*ConfigDigestReply)(nil),                 // 25: loop.ConfigDigestReply
	(*ConfigDigestPrefixRequest)(nil),         // 26: loop.ConfigDigestPrefixRequest
	(*ConfigDigestPrefixReply)(nil),           // 27: loop.ConfigDigestPrefixReply
	(*LatestConfigDetailsRequest)(nil),        // 28: loop.LatestConfigDetailsRequest
	(*LatestConfigDetailsReply)(nil),          // 29: loop.LatestConfigDetailsReply
	(*LatestConfigRequest)(nil),               // 30: loop.LatestConfigRequest
	(*LatestConfigReply)(nil),                 // 31: loop.LatestConfigReply
	(*LatestBlockHeightRequest)(nil),          // 32: loop.LatestBlockHeightRequest
	(*LatestBlockHeightReply)(nil),            // 33: loop.LatestBlockHeightReply
	(*ReportTimestamp)(nil),                   // 34: loop.ReportTimestamp
	(*ReportContext)(nil),                     // 35: loop.ReportContext
	(*AttributedOnchainSignature)(nil),        // 36: loop.AttributedOnchainSignature
	(*TransmitRequest)(nil),                   // 37: loop.TransmitRequest
	(*TransmitReply)(nil),                     // 38: loop.TransmitReply
	(*LatestConfigDigestAndEpochRequest)(nil), // 39: loop.LatestConfigDigestAndEpochRequest
	(*LatestConfigDigestAndEpochReply)(nil),   // 40: loop.LatestConfigDigestAndEpochReply
	(*FromAccountRequest)(nil),                // 41: loop.FromAccountRequest
	(*FromAccountReply)(nil),                  // 42: loop.FromAccountReply
	(*NameReply)(nil),                         // 43: loop.NameReply
	(*HealthReportReply)(nil),                 // 44: loop.HealthReportReply
	(*BigInt)(nil),                            // 45: loop.BigInt
	nil,                                       // 46: loop.HealthReportReply.HealthReportEntry
	(*empty.Empty)(nil),                       // 47: google.protobuf.Empty
}
var file_relayer_proto_depIdxs = []int32{
	5,  // 0: loop.NewConfigProviderRequest.relayArgs:type_name -> loop.RelayArgs
	5,  // 1: loop.NewMedianProviderRequest.relayArgs:type_name -> loop.RelayArgs
	6,  // 2: loop.NewMedianProviderRequest.pluginArgs:type_name -> loop.PluginArgs
	5,  // 3: loop.NewMercuryProviderRequest.relayArgs:type_name -> loop.RelayArgs
	6,  // 4: loop.NewMercuryProviderRequest.pluginArgs:type_name -> loop.PluginArgs
	17, // 5: loop.ChainStatusReply.chain:type_name -> loop.ChainStatus
	17, // 6: loop.ChainStatusesReply.chains:type_name -> loop.ChainStatus
	20, // 7: loop.NodeStatusesReply.nodes:type_name -> loop.NodeStatus
	45, // 8: loop.SendTxRequest.amount:type_name -> loop.BigInt
	45, // 9: loop.ObserveReply.value:type_name -> loop.BigInt
	23, // 10: loop.ConfigDigestRequest.contractConfig:type_name -> loop.ContractConfig
	23, // 11: loop.LatestConfigReply.contractConfig:type_name -> loop.ContractConfig
	34, // 12: loop.ReportContext.reportTimestamp:type_name -> loop.ReportTimestamp
	35, // 13: loop.TransmitRequest.reportContext:type_name -> loop.ReportContext
	36, // 14: loop.TransmitRequest.attributedOnchainSignatures:type_name -> loop.AttributedOnchainSignature
	46, // 15: loop.HealthReportReply.healthReport:type_name -> loop.HealthReportReply.HealthReportEntry
	0,  // 16: loop.PluginRelayer.NewRelayer:input_type -> loop.NewRelayerRequest
	47, // 17: loop.Keystore.Keys:input_type -> google.protobuf.Empty
	3,  // 18: loop.Keystore.Sign:input_type -> loop.SignRequest
	7,  // 19: loop.Relayer.NewConfigProvider:input_type -> loop.NewConfigProviderRequest
	9,  // 20: loop.Relayer.NewMedianProvider:input_type -> loop.NewMedianProviderRequest
	11, // 21: loop.Relayer.NewMercuryProvider:input_type -> loop.NewMercuryProviderRequest
	13, // 22: loop.Relayer.ChainStatus:input_type -> loop.ChainStatusRequest
	15, // 23: loop.Relayer.ChainStatuses:input_type -> loop.ChainStatusesRequest
	18, // 24: loop.Relayer.NodeStatuses:input_type -> loop.NodeStatusesRequest
	21, // 25: loop.Relayer.SendTx:input_type -> loop.SendTxRequest
	47, // 26: loop.DataSource.Observe:input_type -> google.protobuf.Empty
	24, // 27: loop.OffchainConfigDigester.ConfigDigest:input_type -> loop.ConfigDigestRequest
	26, // 28: loop.OffchainConfigDigester.ConfigDigestPrefix:input_type -> loop.ConfigDigestPrefixRequest
	28, // 29: loop.ContractConfigTracker.LatestConfigDetails:input_type -> loop.LatestConfigDetailsRequest
	30, // 30: loop.ContractConfigTracker.LatestConfig:input_type -> loop.LatestConfigRequest
	32, // 31: loop.ContractConfigTracker.LatestBlockHeight:input_type -> loop.LatestBlockHeightRequest
	37, // 32: loop.ContractTransmitter.Transmit:input_type -> loop.TransmitRequest
	39, // 33: loop.ContractTransmitter.LatestConfigDigestAndEpoch:input_type -> loop.LatestConfigDigestAndEpochRequest
	41, // 34: loop.ContractTransmitter.FromAccount:input_type -> loop.FromAccountRequest
	47, // 35: loop.Service.Start:input_type -> google.protobuf.Empty
	47, // 36: loop.Service.Name:input_type -> google.protobuf.Empty
	47, // 37: loop.Service.Close:input_type -> google.protobuf.Empty
	47, // 38: loop.Service.Ready:input_type -> google.protobuf.Empty
	47, // 39: loop.Service.Healthy:input_type -> google.protobuf.Empty
	47, // 40: loop.Service.HealthReport:input_type -> google.protobuf.Empty
	1,  // 41: loop.PluginRelayer.NewRelayer:output_type -> loop.NewRelayerReply
	2,  // 42: loop.Keystore.Keys:output_type -> loop.KeysReply
	4,  // 43: loop.Keystore.Sign:output_type -> loop.SignReply
	8,  // 44: loop.Relayer.NewConfigProvider:output_type -> loop.NewConfigProviderReply
	10, // 45: loop.Relayer.NewMedianProvider:output_type -> loop.NewMedianProviderReply
	12, // 46: loop.Relayer.NewMercuryProvider:output_type -> loop.NewMercuryProviderReply
	14, // 47: loop.Relayer.ChainStatus:output_type -> loop.ChainStatusReply
	16, // 48: loop.Relayer.ChainStatuses:output_type -> loop.ChainStatusesReply
	19, // 49: loop.Relayer.NodeStatuses:output_type -> loop.NodeStatusesReply
	47, // 50: loop.Relayer.SendTx:output_type -> google.protobuf.Empty
	22, // 51: loop.DataSource.Observe:output_type -> loop.ObserveReply
	25, // 52: loop.OffchainConfigDigester.ConfigDigest:output_type -> loop.ConfigDigestReply
	27, // 53: loop.OffchainConfigDigester.ConfigDigestPrefix:output_type -> loop.ConfigDigestPrefixReply
	29, // 54: loop.ContractConfigTracker.LatestConfigDetails:output_type -> loop.LatestConfigDetailsReply
	31, // 55: loop.ContractConfigTracker.LatestConfig:output_type -> loop.LatestConfigReply
	33, // 56: loop.ContractConfigTracker.LatestBlockHeight:output_type -> loop.LatestBlockHeightReply
	38, // 57: loop.ContractTransmitter.Transmit:output_type -> loop.TransmitReply
	40, // 58: loop.ContractTransmitter.LatestConfigDigestAndEpoch:output_type -> loop.LatestConfigDigestAndEpochReply
	42, // 59: loop.ContractTransmitter.FromAccount:output_type -> loop.FromAccountReply
	47, // 60: loop.Service.Start:output_type -> google.protobuf.Empty
	43, // 61: loop.Service.Name:output_type -> loop.NameReply
	47, // 62: loop.Service.Close:output_type -> google.protobuf.Empty
	47, // 63: loop.Service.Ready:output_type -> google.protobuf.Empty
	47, // 64: loop.Service.Healthy:output_type -> google.protobuf.Empty
	44, // 65: loop.Service.HealthReport:output_type -> loop.HealthReportReply
	41, // [41:66] is the sub-list for method output_type
	16, // [16:41] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_relayer_proto_init() }
func file_relayer_proto_init() {
	if File_relayer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_relayer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRelayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRelayerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewConfigProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewConfigProviderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMedianProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMedianProviderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMercuryProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMercuryProviderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainStatusesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatusesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDigestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDigestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDigestPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDigestPrefixReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestConfigDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestConfigDetailsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestBlockHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestBlockHeightReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedOnchainSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestConfigDigestAndEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestConfigDigestAndEpochReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relayer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relayer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_relayer_proto_goTypes,
		DependencyIndexes: file_relayer_proto_depIdxs,
		MessageInfos:      file_relayer_proto_msgTypes,
	}.Build()
	File_relayer_proto = out.File
	file_relayer_proto_rawDesc = nil
	file_relayer_proto_goTypes = nil
	file_relayer_proto_depIdxs = nil
}
