// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: error_log.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ErrorLog_SaveError_FullMethodName = "/loop.ErrorLog/SaveError"
)

// ErrorLogClient is the client API for ErrorLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorLogClient interface {
	SaveError(ctx context.Context, in *SaveErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type errorLogClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorLogClient(cc grpc.ClientConnInterface) ErrorLogClient {
	return &errorLogClient{cc}
}

func (c *errorLogClient) SaveError(ctx context.Context, in *SaveErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ErrorLog_SaveError_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorLogServer is the server API for ErrorLog service.
// All implementations must embed UnimplementedErrorLogServer
// for forward compatibility
type ErrorLogServer interface {
	SaveError(context.Context, *SaveErrorRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedErrorLogServer()
}

// UnimplementedErrorLogServer must be embedded to have forward compatible implementations.
type UnimplementedErrorLogServer struct {
}

func (UnimplementedErrorLogServer) SaveError(context.Context, *SaveErrorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveError not implemented")
}
func (UnimplementedErrorLogServer) mustEmbedUnimplementedErrorLogServer() {}

// UnsafeErrorLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorLogServer will
// result in compilation errors.
type UnsafeErrorLogServer interface {
	mustEmbedUnimplementedErrorLogServer()
}

func RegisterErrorLogServer(s grpc.ServiceRegistrar, srv ErrorLogServer) {
	s.RegisterService(&ErrorLog_ServiceDesc, srv)
}

func _ErrorLog_SaveError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorLogServer).SaveError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorLog_SaveError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorLogServer).SaveError(ctx, req.(*SaveErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorLog_ServiceDesc is the grpc.ServiceDesc for ErrorLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.ErrorLog",
	HandlerType: (*ErrorLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveError",
			Handler:    _ErrorLog_SaveError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "error_log.proto",
}
