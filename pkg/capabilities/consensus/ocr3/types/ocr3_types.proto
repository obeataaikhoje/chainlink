syntax = "proto3";

option go_package = "capabilities/consensus/ocr3/types";

package ocr3_types;

import "values/pb/values.proto";

// per-workflow aggregation outcome
message AggregationOutcome {
  string workflowId = 1;
  values.Map encodableOutcome = 2; // passed to encoders
  bytes metadata = 3; // internal to the aggregator
  bool shouldReport = 4;
}

message Query {
  // the requests to get consensus on.
  repeated Id ids = 1;
}

message Id {
  string workflowExecutionId = 1;
  string workflowId = 2;
}

message Observation {
  Id id = 1;
  // list of observations defined in inputs.observations
  values.List observations = 4;
}

message Observations {
  // batched observations for multiple workflow execution IDs
  repeated Observation observations = 1;
}

message Report {
  Id id = 1;
  AggregationOutcome outcome = 2;
}

message ReportInfo {
  Id id = 1;
  bool should_report = 2;
}

message Outcome {
  reserved 1;
  // NOTE: list needs to be sorted by the order that IDs appeared in the query to ensure deterministic encoding
  repeated Report current_reports = 2;
  // NOTE: list needs to be sorted by workflowId to ensure deterministic encoding
  repeated AggregationOutcome outcomes = 3;
}
