// Code generated by pkg/capabilities/cli, DO NOT EDIT.

package ocr3

import "encoding/json"
import "fmt"

type SignedReport struct {
	// Err corresponds to the JSON schema field "Err".
	Err bool `json:"Err" yaml:"Err" mapstructure:"Err"`

	// Value corresponds to the JSON schema field "Value".
	Value SignedReportValue `json:"Value" yaml:"Value" mapstructure:"Value"`

	// WorkflowExecutionID corresponds to the JSON schema field "WorkflowExecutionID".
	WorkflowExecutionID string `json:"WorkflowExecutionID" yaml:"WorkflowExecutionID" mapstructure:"WorkflowExecutionID"`
}

type SignedReportValue struct {
	// Underlying corresponds to the JSON schema field "Underlying".
	Underlying SignedReportValueUnderlying `json:"Underlying" yaml:"Underlying" mapstructure:"Underlying"`
}

type SignedReportValueUnderlying map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SignedReportValue) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["Underlying"]; raw != nil && !ok {
		return fmt.Errorf("field Underlying in SignedReportValue: required")
	}
	type Plain SignedReportValue
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SignedReportValue(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SignedReport) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["Err"]; raw != nil && !ok {
		return fmt.Errorf("field Err in SignedReport: required")
	}
	if _, ok := raw["Value"]; raw != nil && !ok {
		return fmt.Errorf("field Value in SignedReport: required")
	}
	if _, ok := raw["WorkflowExecutionID"]; raw != nil && !ok {
		return fmt.Errorf("field WorkflowExecutionID in SignedReport: required")
	}
	type Plain SignedReport
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SignedReport(plain)
	return nil
}
