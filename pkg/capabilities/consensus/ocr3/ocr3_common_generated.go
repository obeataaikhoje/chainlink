// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package ocr3

import (
	"encoding/json"
	"fmt"
)

type SignedReport struct {
	// Context corresponds to the JSON schema field "Context".
	Context string `json:"Context" yaml:"Context" mapstructure:"Context"`

	// ID corresponds to the JSON schema field "ID".
	ID string `json:"ID" yaml:"ID" mapstructure:"ID"`

	// Report corresponds to the JSON schema field "Report".
	Report string `json:"Report" yaml:"Report" mapstructure:"Report"`

	// Signatures corresponds to the JSON schema field "Signatures".
	Signatures []string `json:"Signatures,omitempty" yaml:"Signatures,omitempty" mapstructure:"Signatures,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SignedReport) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["Context"]; raw != nil && !ok {
		return fmt.Errorf("field Context in SignedReport: required")
	}
	if _, ok := raw["ID"]; raw != nil && !ok {
		return fmt.Errorf("field ID in SignedReport: required")
	}
	if _, ok := raw["Report"]; raw != nil && !ok {
		return fmt.Errorf("field Report in SignedReport: required")
	}
	type Plain SignedReport
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SignedReport(plain)
	return nil
}
