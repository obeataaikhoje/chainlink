// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package ocr3

import (
	"github.com/smartcontractkit/chainlink-common/pkg/workflows"
)

type EncoderCap workflows.CapDefinition[Encoder]

type EncoderConfigCap workflows.CapDefinition[EncoderConfig]

type ReportIdCap workflows.CapDefinition[ReportId]

type SignedReportCap interface {
	workflows.CapDefinition[SignedReport]
	Context() workflows.CapDefinition[string]
	ID() workflows.CapDefinition[string]
	Report() workflows.CapDefinition[string]
	Signatures() workflows.CapDefinition[[]string]
	private()
}

// SignedReportCapFromStep should only be called from generated code to assure type safety
func SignedReportCapFromStep(w *workflows.WorkflowSpecFactory, step workflows.Step[SignedReport]) SignedReportCap {
	raw := step.AddTo(w)
	return &signedReport{CapDefinition: raw}
}

type signedReport struct {
	workflows.CapDefinition[SignedReport]
}

func (*signedReport) private() {}
func (c *signedReport) Context() workflows.CapDefinition[string] {
	return workflows.AccessField[SignedReport, string](c.CapDefinition, "Context")
}
func (c *signedReport) ID() workflows.CapDefinition[string] {
	return workflows.AccessField[SignedReport, string](c.CapDefinition, "ID")
}
func (c *signedReport) Report() workflows.CapDefinition[string] {
	return workflows.AccessField[SignedReport, string](c.CapDefinition, "Report")
}
func (c *signedReport) Signatures() workflows.CapDefinition[[]string] {
	return workflows.AccessField[SignedReport, []string](c.CapDefinition, "Signatures")
}

func NewSignedReportFromFields(
	context workflows.CapDefinition[string],
	iD workflows.CapDefinition[string],
	report workflows.CapDefinition[string],
	signatures workflows.CapDefinition[[]string]) SignedReportCap {
	return &simpleSignedReport{
		CapDefinition: workflows.ComponentCapDefinition[SignedReport]{
			"Context":    context.Ref(),
			"ID":         iD.Ref(),
			"Report":     report.Ref(),
			"Signatures": signatures.Ref(),
		},
		context:    context,
		iD:         iD,
		report:     report,
		signatures: signatures,
	}
}

type simpleSignedReport struct {
	workflows.CapDefinition[SignedReport]
	context    workflows.CapDefinition[string]
	iD         workflows.CapDefinition[string]
	report     workflows.CapDefinition[string]
	signatures workflows.CapDefinition[[]string]
}

func (c *simpleSignedReport) Context() workflows.CapDefinition[string] {
	return c.context
}
func (c *simpleSignedReport) ID() workflows.CapDefinition[string] {
	return c.iD
}
func (c *simpleSignedReport) Report() workflows.CapDefinition[string] {
	return c.report
}
func (c *simpleSignedReport) Signatures() workflows.CapDefinition[[]string] {
	return c.signatures
}

func (c *simpleSignedReport) private() {}
