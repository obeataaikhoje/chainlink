// Code generated by pkg/capabilities/cli, DO NOT EDIT.

package ocr3

import (
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/workflows"
    streams "github.com/smartcontractkit/chainlink-common/pkg/capabilities/triggers/streams"
)

func NewOcr3ConsensusCapability(w *workflows.Workflow, ref string, input Ocr3ConsensusCapabilityInput, cfg Ocr3ConsensusConfig) (Ocr3ConsensusCapability,error) {
    def := workflows.StepDefinition{
       ID: ref,
       Ref: ref,
       Inputs: workflows.StepInputs{
           Mapping: map[string]any{
               "Observations": input.Observations,
           },
       },
       Config: map[string]any{
           "AggregationConfig": cfg.AggregationConfig,
           "AggregationMethod": cfg.AggregationMethod,
           "Encoder": cfg.Encoder,
           "EncoderConfig": cfg.EncoderConfig,
           "ReportId": cfg.ReportId,
       },
       CapabilityType: capabilities.CapabilityTypeConsensus,
   }
    step := workflows.Step[SignedReport]{Definition: def}
     raw, err := workflows.AddStep(w, step)
    return &ocr3ConsensusCapability{CapabilityDefinition: raw}, err
}


type Ocr3ConsensusCapability interface {
    workflows.CapabilityDefinition[SignedReport]
    Err() workflows.CapabilityDefinition[bool]
    Value() SignedReportValueCapability
    WorkflowExecutionID() workflows.CapabilityDefinition[string]
    private()
}

type ocr3ConsensusCapability struct {
    workflows.CapabilityDefinition[SignedReport]
}


func (*ocr3ConsensusCapability) private() {}
func (c *ocr3ConsensusCapability) Err() workflows.CapabilityDefinition[bool] {
    return workflows.AccessField[SignedReport, bool](c.CapabilityDefinition, "Err")
}
func (c *ocr3ConsensusCapability) Value() SignedReportValueCapability {
     return &signedReportValueCapability{ CapabilityDefinition: workflows.AccessField[SignedReport, SignedReportValue](c.CapabilityDefinition, "Value")}
}
func (c *ocr3ConsensusCapability) WorkflowExecutionID() workflows.CapabilityDefinition[string] {
    return workflows.AccessField[SignedReport, string](c.CapabilityDefinition, "WorkflowExecutionID")
}

func NewOcr3ConsensusCapabilityFromComponents(
                                                                        err workflows.CapabilityDefinition[bool],
                                                                        value SignedReportValueCapability,
                                                                        workflowExecutionID workflows.CapabilityDefinition[string],) Ocr3ConsensusCapability {
    return &simpleOcr3ConsensusCapability{
        CapabilityDefinition: workflows.ComponentCapabilityDefinition[SignedReport]{
        "err": err.Ref(),
        "value": value.Ref(),
        "workflowExecutionID": workflowExecutionID.Ref(),
        },
        err: err,
        value: value,
        workflowExecutionID: workflowExecutionID,
    }
}

type simpleOcr3ConsensusCapability struct {
    workflows.CapabilityDefinition[SignedReport]
    err workflows.CapabilityDefinition[bool]
    value SignedReportValueCapability
    workflowExecutionID workflows.CapabilityDefinition[string]
}
func (c *simpleOcr3ConsensusCapability) Err() workflows.CapabilityDefinition[bool] {
    return c.err
}
func (c *simpleOcr3ConsensusCapability) Value() SignedReportValueCapability {
    return c.value
}
func (c *simpleOcr3ConsensusCapability) WorkflowExecutionID() workflows.CapabilityDefinition[string] {
    return c.workflowExecutionID
}

func (c *simpleOcr3ConsensusCapability) private() {}


type SignedReportValueCapability interface {
    workflows.CapabilityDefinition[SignedReportValue]
    Underlying() SignedReportValueUnderlyingCapability
    private()
}

type signedReportValueCapability struct {
    workflows.CapabilityDefinition[SignedReportValue]
}


func (*signedReportValueCapability) private() {}
func (c *signedReportValueCapability) Underlying() SignedReportValueUnderlyingCapability {
     return SignedReportValueUnderlyingCapability(workflows.AccessField[SignedReportValue, SignedReportValueUnderlying](c.CapabilityDefinition, "Underlying"))
}

func NewSignedReportValueCapabilityFromComponents(
                                                                        underlying SignedReportValueUnderlyingCapability,) SignedReportValueCapability {
    return &simpleSignedReportValueCapability{
        CapabilityDefinition: workflows.ComponentCapabilityDefinition[SignedReportValue]{
        "underlying": underlying.Ref(),
        },
        underlying: underlying,
    }
}

type simpleSignedReportValueCapability struct {
    workflows.CapabilityDefinition[SignedReportValue]
    underlying SignedReportValueUnderlyingCapability
}
func (c *simpleSignedReportValueCapability) Underlying() SignedReportValueUnderlyingCapability {
    return c.underlying
}

func (c *simpleSignedReportValueCapability) private() {}


type SignedReportValueUnderlyingCapability workflows.CapabilityDefinition[SignedReportValueUnderlying]


type Ocr3ConsensusCapabilityInput struct {
    Observations workflows.CapabilityDefinition[[]streams.Feed]
}