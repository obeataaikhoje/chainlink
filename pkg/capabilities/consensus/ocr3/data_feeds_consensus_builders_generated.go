// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package ocr3

import (
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/workflows"
    streams "github.com/smartcontractkit/chainlink-common/pkg/capabilities/triggers/streams"
)

func (cfg DataFeedsConsensusConfig) New(w *workflows.WorkflowSpecFactory,ref string,)Cap {
    
    def := workflows.StepDefinition{
       ID: "offchain_reporting@1.0.0",Ref: ref,
       Inputs: workflows.StepInputs{
       },
       Config: map[string]any{
           "aggregation_config": cfg.AggregationConfig,
           "aggregation_method": cfg.AggregationMethod,
           "encoder": cfg.Encoder,
           "encoder_config": cfg.EncoderConfig,
           "report_id": cfg.ReportId,
       },
       CapabilityType: capabilities.CapabilityTypeConsensus,
   }
    step := workflows.Step[]{Definition: def}
     raw := step.AddTo(w)
     return &dataFeedsConsensus{CapDefinition: raw}
}


type DataFeedsConsensusCap interface {
    workflows.CapDefinition[DataFeedsConsensus]
    Config() DataFeedsConsensusConfigCap
    Inputs() DataFeedsConsensusInputsCap
    Outputs() SignedReportCap
    private()
}

type dataFeedsConsensus struct {
    workflows.CapDefinition[DataFeedsConsensus]
}

func (*dataFeedsConsensus) private() {}
func (c *dataFeedsConsensus) Config() DataFeedsConsensusConfigCap {
     return DataFeedsConsensusConfigCap(workflows.AccessField[DataFeedsConsensus, DataFeedsConsensusConfig](c.CapDefinition, "Config"))
}
func (c *dataFeedsConsensus) Inputs() DataFeedsConsensusInputsCap {
     return &dataFeedsConsensusInputs{ CapDefinition: workflows.AccessField[DataFeedsConsensus, DataFeedsConsensusInputs](c.CapDefinition, "Inputs")}
}
func (c *dataFeedsConsensus) Outputs() SignedReportCap {
     return SignedReportCap(workflows.AccessField[DataFeedsConsensus, SignedReport](c.CapDefinition, "Outputs"))
}

func NewDataFeedsConsensusFromFields(
                                                                        config DataFeedsConsensusConfigCap,
                                                                        inputs DataFeedsConsensusInputsCap,
                                                                        outputs SignedReportCap,) DataFeedsConsensusCap {
    return &simpleDataFeedsConsensus{
        CapDefinition: workflows.ComponentCapDefinition[DataFeedsConsensus]{
        "config": config.Ref(),
        "inputs": inputs.Ref(),
        "outputs": outputs.Ref(),
        },
        config: config,
        inputs: inputs,
        outputs: outputs,
    }
}

type simpleDataFeedsConsensus struct {
    workflows.CapDefinition[DataFeedsConsensus]
    config DataFeedsConsensusConfigCap
    inputs DataFeedsConsensusInputsCap
    outputs SignedReportCap
}
func (c *simpleDataFeedsConsensus) Config() DataFeedsConsensusConfigCap {
    return c.config
}
func (c *simpleDataFeedsConsensus) Inputs() DataFeedsConsensusInputsCap {
    return c.inputs
}
func (c *simpleDataFeedsConsensus) Outputs() SignedReportCap {
    return c.outputs
}

func (c *simpleDataFeedsConsensus) private() {}


type DataFeedsConsensusInputsCap interface {
    workflows.CapDefinition[DataFeedsConsensusInputs]
    Observations() workflows.CapDefinition[[][]streams.Feed]
    private()
}

type dataFeedsConsensusInputs struct {
    workflows.CapDefinition[DataFeedsConsensusInputs]
}

func (*dataFeedsConsensusInputs) private() {}
func (c *dataFeedsConsensusInputs) Observations() workflows.CapDefinition[[][]streams.Feed] {
    return workflows.AccessField[DataFeedsConsensusInputs, [][]streams.Feed](c.CapDefinition, "Observations")
}

func NewDataFeedsConsensusInputsFromFields(
                                                                        observations workflows.CapDefinition[[][]streams.Feed],) DataFeedsConsensusInputsCap {
    return &simpleDataFeedsConsensusInputs{
        CapDefinition: workflows.ComponentCapDefinition[DataFeedsConsensusInputs]{
        "observations": observations.Ref(),
        },
        observations: observations,
    }
}

type simpleDataFeedsConsensusInputs struct {
    workflows.CapDefinition[DataFeedsConsensusInputs]
    observations workflows.CapDefinition[[][]streams.Feed]
}
func (c *simpleDataFeedsConsensusInputs) Observations() workflows.CapDefinition[[][]streams.Feed] {
    return c.observations
}

func (c *simpleDataFeedsConsensusInputs) private() {}


type FeedValueCap interface {
    workflows.CapDefinition[FeedValue]
    Deviation() workflows.CapDefinition[string]
    Heartbeat() workflows.CapDefinition[int]
    RemappedID() workflows.CapDefinition[string]
    private()
}

type feedValue struct {
    workflows.CapDefinition[FeedValue]
}

func (*feedValue) private() {}
func (c *feedValue) Deviation() workflows.CapDefinition[string] {
    return workflows.AccessField[FeedValue, string](c.CapDefinition, "Deviation")
}
func (c *feedValue) Heartbeat() workflows.CapDefinition[int] {
    return workflows.AccessField[FeedValue, int](c.CapDefinition, "Heartbeat")
}
func (c *feedValue) RemappedID() workflows.CapDefinition[string] {
    return workflows.AccessField[FeedValue, string](c.CapDefinition, "RemappedID")
}

func NewFeedValueFromFields(
                                                                        deviation workflows.CapDefinition[string],
                                                                        heartbeat workflows.CapDefinition[int],
                                                                        remappedID workflows.CapDefinition[string],) FeedValueCap {
    return &simpleFeedValue{
        CapDefinition: workflows.ComponentCapDefinition[FeedValue]{
        "deviation": deviation.Ref(),
        "heartbeat": heartbeat.Ref(),
        "remappedID": remappedID.Ref(),
        },
        deviation: deviation,
        heartbeat: heartbeat,
        remappedID: remappedID,
    }
}

type simpleFeedValue struct {
    workflows.CapDefinition[FeedValue]
    deviation workflows.CapDefinition[string]
    heartbeat workflows.CapDefinition[int]
    remappedID workflows.CapDefinition[string]
}
func (c *simpleFeedValue) Deviation() workflows.CapDefinition[string] {
    return c.deviation
}
func (c *simpleFeedValue) Heartbeat() workflows.CapDefinition[int] {
    return c.heartbeat
}
func (c *simpleFeedValue) RemappedID() workflows.CapDefinition[string] {
    return c.remappedID
}

func (c *simpleFeedValue) private() {}

