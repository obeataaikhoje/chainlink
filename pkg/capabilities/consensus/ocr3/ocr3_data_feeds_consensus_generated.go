// Code generated by pkg/capabilities/cli, DO NOT EDIT.

package ocr3

import "encoding/json"
import "fmt"
import streams "github.com/smartcontractkit/chainlink-common/pkg/capabilities/triggers/streams"
import "reflect"

// OCR3 consensus exposed as a capability.
type DatafeedsConsensus struct {
	// Config corresponds to the JSON schema field "config".
	Config DatafeedsConsensusConfig `json:"config" yaml:"config" mapstructure:"config"`

	// Inputs corresponds to the JSON schema field "inputs".
	Inputs DatafeedsConsensusInputs `json:"inputs" yaml:"inputs" mapstructure:"inputs"`

	// Outputs corresponds to the JSON schema field "outputs".
	Outputs SignedReport `json:"outputs" yaml:"outputs" mapstructure:"outputs"`
}

type DatafeedsConsensusConfig struct {
	// AggregationConfig corresponds to the JSON schema field "aggregation_config".
	AggregationConfig DatafeedsConsensusConfigAggregationConfig `json:"aggregation_config" yaml:"aggregation_config" mapstructure:"aggregation_config"`

	// AggregationMethod corresponds to the JSON schema field "aggregation_method".
	AggregationMethod DatafeedsConsensusConfigAggregationMethod `json:"aggregation_method" yaml:"aggregation_method" mapstructure:"aggregation_method"`

	// Encoder corresponds to the JSON schema field "encoder".
	Encoder DatafeedsConsensusConfigEncoder `json:"encoder" yaml:"encoder" mapstructure:"encoder"`

	// EncoderConfig corresponds to the JSON schema field "encoder_config".
	EncoderConfig DatafeedsConsensusConfigEncoderConfig `json:"encoder_config" yaml:"encoder_config" mapstructure:"encoder_config"`

	// ReportId corresponds to the JSON schema field "report_id".
	ReportId string `json:"report_id" yaml:"report_id" mapstructure:"report_id"`
}

type DatafeedsConsensusConfigAggregationConfig struct {
	// Allowed partial staleness as a number between 0 and 1.
	AllowedPartialStaleness string `json:"allowedPartialStaleness" yaml:"allowedPartialStaleness" mapstructure:"allowedPartialStaleness"`

	// Feeds corresponds to the JSON schema field "feeds".
	Feeds DatafeedsConsensusConfigAggregationConfigFeeds `json:"feeds" yaml:"feeds" mapstructure:"feeds"`
}

type DatafeedsConsensusConfigAggregationConfigFeeds map[string]FeedValue

// UnmarshalJSON implements json.Unmarshaler.
func (j *DatafeedsConsensusConfigAggregationConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["allowedPartialStaleness"]; raw != nil && !ok {
		return fmt.Errorf("field allowedPartialStaleness in DatafeedsConsensusConfigAggregationConfig: required")
	}
	if _, ok := raw["feeds"]; raw != nil && !ok {
		return fmt.Errorf("field feeds in DatafeedsConsensusConfigAggregationConfig: required")
	}
	type Plain DatafeedsConsensusConfigAggregationConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DatafeedsConsensusConfigAggregationConfig(plain)
	return nil
}

type DatafeedsConsensusConfigAggregationMethod string

const DatafeedsConsensusConfigAggregationMethodDataFeeds DatafeedsConsensusConfigAggregationMethod = "data_feeds"

var enumValues_DatafeedsConsensusConfigAggregationMethod = []interface{}{
	"data_feeds",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DatafeedsConsensusConfigAggregationMethod) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DatafeedsConsensusConfigAggregationMethod {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DatafeedsConsensusConfigAggregationMethod, v)
	}
	*j = DatafeedsConsensusConfigAggregationMethod(v)
	return nil
}

type DatafeedsConsensusConfigEncoder string

type DatafeedsConsensusConfigEncoderConfig struct {
	// The ABI for report encoding.
	Abi string `json:"abi" yaml:"abi" mapstructure:"abi"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DatafeedsConsensusConfigEncoderConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["abi"]; raw != nil && !ok {
		return fmt.Errorf("field abi in DatafeedsConsensusConfigEncoderConfig: required")
	}
	type Plain DatafeedsConsensusConfigEncoderConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DatafeedsConsensusConfigEncoderConfig(plain)
	return nil
}

const DatafeedsConsensusConfigEncoderEVM DatafeedsConsensusConfigEncoder = "EVM"

var enumValues_DatafeedsConsensusConfigEncoder = []interface{}{
	"EVM",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DatafeedsConsensusConfigEncoder) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DatafeedsConsensusConfigEncoder {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DatafeedsConsensusConfigEncoder, v)
	}
	*j = DatafeedsConsensusConfigEncoder(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DatafeedsConsensusConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["aggregation_config"]; raw != nil && !ok {
		return fmt.Errorf("field aggregation_config in DatafeedsConsensusConfig: required")
	}
	if _, ok := raw["aggregation_method"]; raw != nil && !ok {
		return fmt.Errorf("field aggregation_method in DatafeedsConsensusConfig: required")
	}
	if _, ok := raw["encoder"]; raw != nil && !ok {
		return fmt.Errorf("field encoder in DatafeedsConsensusConfig: required")
	}
	if _, ok := raw["encoder_config"]; raw != nil && !ok {
		return fmt.Errorf("field encoder_config in DatafeedsConsensusConfig: required")
	}
	if _, ok := raw["report_id"]; raw != nil && !ok {
		return fmt.Errorf("field report_id in DatafeedsConsensusConfig: required")
	}
	type Plain DatafeedsConsensusConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DatafeedsConsensusConfig(plain)
	return nil
}

type DatafeedsConsensusInputs struct {
	// Observations corresponds to the JSON schema field "observations".
	Observations []streams.Feed `json:"observations" yaml:"observations" mapstructure:"observations"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DatafeedsConsensusInputs) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["observations"]; raw != nil && !ok {
		return fmt.Errorf("field observations in DatafeedsConsensusInputs: required")
	}
	type Plain DatafeedsConsensusInputs
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DatafeedsConsensusInputs(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DatafeedsConsensus) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["config"]; raw != nil && !ok {
		return fmt.Errorf("field config in DatafeedsConsensus: required")
	}
	if _, ok := raw["inputs"]; raw != nil && !ok {
		return fmt.Errorf("field inputs in DatafeedsConsensus: required")
	}
	if _, ok := raw["outputs"]; raw != nil && !ok {
		return fmt.Errorf("field outputs in DatafeedsConsensus: required")
	}
	type Plain DatafeedsConsensus
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DatafeedsConsensus(plain)
	return nil
}

type FeedValue struct {
	// The deviation that is required to generate a new report. Expressed as a
	// percentage. For example, 0.01 is 1% deviation.
	Deviation string `json:"deviation" yaml:"deviation" mapstructure:"deviation"`

	// The interval in seconds after which a new report is generated, regardless of
	// whether any deviations have occurred. New reports reset the timer.
	Heartbeat int `json:"heartbeat" yaml:"heartbeat" mapstructure:"heartbeat"`

	// An optional remapped ID for the feed.
	RemappedID *string `json:"remappedID,omitempty" yaml:"remappedID,omitempty" mapstructure:"remappedID,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FeedValue) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["deviation"]; raw != nil && !ok {
		return fmt.Errorf("field deviation in FeedValue: required")
	}
	if _, ok := raw["heartbeat"]; raw != nil && !ok {
		return fmt.Errorf("field heartbeat in FeedValue: required")
	}
	type Plain FeedValue
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = FeedValue(plain)
	return nil
}
