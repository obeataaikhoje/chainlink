// Code generated by pkg/capabilities/cli, DO NOT EDIT.

package notstreamscap

import (
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/workflows"

    "github.com/smartcontractkit/chainlink-common/pkg/capabilities/triggers/notstreams"
)

func NewTrigger(w *workflows.Workflow, ref string, cfg notstreams.TriggerConfig)Trigger {
    def := workflows.StepDefinition{
       ID: ref,
       Ref: ref,
       Inputs: workflows.StepInputs{
           Mapping: map[string]any{
           },
       },
       Config: map[string]any{
           "MaxFrequencyMs": cfg.MaxFrequencyMs,
       },
       CapabilityType: capabilities.CapabilityTypeTrigger,
   }
    step := workflows.Step[notstreams.Feed]{Definition: def}
     raw := workflows.AddStep(w, step)
    return &trigger{CapDefinition: raw}
}


type Trigger interface {
    workflows.CapDefinition[notstreams.Feed]
    FullReport() workflows.CapDefinition[string]
    Price() FeedPrice
    ReportContext() workflows.CapDefinition[string]
    Signatures() workflows.CapDefinition[[]string]
    Timestamp() workflows.CapDefinition[int]
    private()
}

type trigger struct {
    workflows.CapDefinition[notstreams.Feed]
}


func (*trigger) private() {}
func (c *trigger) FullReport() workflows.CapDefinition[string] {
    return workflows.AccessField[notstreams.Feed, string](c.CapDefinition, "FullReport")
}
func (c *trigger) Price() FeedPrice {
     return &feedPrice{ CapDefinition: workflows.AccessField[notstreams.Feed, notstreams.FeedPrice](c.CapDefinition, "Price")}
}
func (c *trigger) ReportContext() workflows.CapDefinition[string] {
    return workflows.AccessField[notstreams.Feed, string](c.CapDefinition, "ReportContext")
}
func (c *trigger) Signatures() workflows.CapDefinition[[]string] {
    return workflows.AccessField[notstreams.Feed, []string](c.CapDefinition, "Signatures")
}
func (c *trigger) Timestamp() workflows.CapDefinition[int] {
    return workflows.AccessField[notstreams.Feed, int](c.CapDefinition, "Timestamp")
}

func NewTriggerFromFields(
                                                                        fullReport workflows.CapDefinition[string],
                                                                        price FeedPrice,
                                                                        reportContext workflows.CapDefinition[string],
                                                                        signatures workflows.CapDefinition[[]string],
                                                                        timestamp workflows.CapDefinition[int],) Trigger {
    return &simpleTrigger{
        CapDefinition: workflows.ComponentCapDefinition[notstreams.Feed]{
        "fullReport": fullReport.Ref(),
        "price": price.Ref(),
        "reportContext": reportContext.Ref(),
        "signatures": signatures.Ref(),
        "timestamp": timestamp.Ref(),
        },
        fullReport: fullReport,
        price: price,
        reportContext: reportContext,
        signatures: signatures,
        timestamp: timestamp,
    }
}

type simpleTrigger struct {
    workflows.CapDefinition[notstreams.Feed]
    fullReport workflows.CapDefinition[string]
    price FeedPrice
    reportContext workflows.CapDefinition[string]
    signatures workflows.CapDefinition[[]string]
    timestamp workflows.CapDefinition[int]
}
func (c *simpleTrigger) FullReport() workflows.CapDefinition[string] {
    return c.fullReport
}
func (c *simpleTrigger) Price() FeedPrice {
    return c.price
}
func (c *simpleTrigger) ReportContext() workflows.CapDefinition[string] {
    return c.reportContext
}
func (c *simpleTrigger) Signatures() workflows.CapDefinition[[]string] {
    return c.signatures
}
func (c *simpleTrigger) Timestamp() workflows.CapDefinition[int] {
    return c.timestamp
}

func (c *simpleTrigger) private() {}


type FeedPrice interface {
    workflows.CapDefinition[notstreams.FeedPrice]
    PriceA() workflows.CapDefinition[string]
    PriceB() workflows.CapDefinition[string]
    private()
}

type feedPrice struct {
    workflows.CapDefinition[notstreams.FeedPrice]
}


func (*feedPrice) private() {}
func (c *feedPrice) PriceA() workflows.CapDefinition[string] {
    return workflows.AccessField[notstreams.FeedPrice, string](c.CapDefinition, "PriceA")
}
func (c *feedPrice) PriceB() workflows.CapDefinition[string] {
    return workflows.AccessField[notstreams.FeedPrice, string](c.CapDefinition, "PriceB")
}

func NewFeedPriceFromFields(
                                                                        priceA workflows.CapDefinition[string],
                                                                        priceB workflows.CapDefinition[string],) FeedPrice {
    return &simpleFeedPrice{
        CapDefinition: workflows.ComponentCapDefinition[notstreams.FeedPrice]{
        "priceA": priceA.Ref(),
        "priceB": priceB.Ref(),
        },
        priceA: priceA,
        priceB: priceB,
    }
}

type simpleFeedPrice struct {
    workflows.CapDefinition[notstreams.FeedPrice]
    priceA workflows.CapDefinition[string]
    priceB workflows.CapDefinition[string]
}
func (c *simpleFeedPrice) PriceA() workflows.CapDefinition[string] {
    return c.priceA
}
func (c *simpleFeedPrice) PriceB() workflows.CapDefinition[string] {
    return c.priceB
}

func (c *simpleFeedPrice) private() {}

