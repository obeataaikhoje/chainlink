// Code generated by pkg/capabilities/cli, DO NOT EDIT.

package notstreams

import (
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/workflows"
)

func NewNotstreamsTriggerCapability(w *workflows.Workflow, ref string, cfg NotstreamsTriggerConfig)NotstreamsTriggerCapability {
    def := workflows.StepDefinition{
       ID: ref,
       Ref: ref,
       Inputs: workflows.StepInputs{
           Mapping: map[string]any{
           },
       },
       Config: map[string]any{
           "MaxFrequencyMs": cfg.MaxFrequencyMs,
       },
       CapabilityType: capabilities.CapabilityTypeTrigger,
   }
    step := workflows.Step[Feed]{Definition: def}
     raw := workflows.AddStep(w, step)
    return &notstreamsTriggerCapability{CapabilityDefinition: raw}
}


type NotstreamsTriggerCapability interface {
    workflows.CapabilityDefinition[Feed]
    FullReport() workflows.CapabilityDefinition[string]
    Price() FeedPriceCapability
    ReportContext() workflows.CapabilityDefinition[string]
    Signatures() workflows.CapabilityDefinition[[]string]
    Timestamp() workflows.CapabilityDefinition[int]
    private()
}

type notstreamsTriggerCapability struct {
    workflows.CapabilityDefinition[Feed]
}


func (*notstreamsTriggerCapability) private() {}
func (c *notstreamsTriggerCapability) FullReport() workflows.CapabilityDefinition[string] {
    return workflows.AccessField[Feed, string](c.CapabilityDefinition, "FullReport")
}
func (c *notstreamsTriggerCapability) Price() FeedPriceCapability {
     return &feedPriceCapability{ CapabilityDefinition: workflows.AccessField[Feed, FeedPrice](c.CapabilityDefinition, "Price")}
}
func (c *notstreamsTriggerCapability) ReportContext() workflows.CapabilityDefinition[string] {
    return workflows.AccessField[Feed, string](c.CapabilityDefinition, "ReportContext")
}
func (c *notstreamsTriggerCapability) Signatures() workflows.CapabilityDefinition[[]string] {
    return workflows.AccessField[Feed, []string](c.CapabilityDefinition, "Signatures")
}
func (c *notstreamsTriggerCapability) Timestamp() workflows.CapabilityDefinition[int] {
    return workflows.AccessField[Feed, int](c.CapabilityDefinition, "Timestamp")
}

func NewNotstreamsTriggerCapabilityFromComponents(
                                                                        fullReport workflows.CapabilityDefinition[string],
                                                                        price FeedPriceCapability,
                                                                        reportContext workflows.CapabilityDefinition[string],
                                                                        signatures workflows.CapabilityDefinition[[]string],
                                                                        timestamp workflows.CapabilityDefinition[int],) NotstreamsTriggerCapability {
    return &simpleNotstreamsTriggerCapability{
        CapabilityDefinition: workflows.ComponentCapabilityDefinition[Feed]{
        "fullReport": fullReport.Ref(),
        "price": price.Ref(),
        "reportContext": reportContext.Ref(),
        "signatures": signatures.Ref(),
        "timestamp": timestamp.Ref(),
        },
        fullReport: fullReport,
        price: price,
        reportContext: reportContext,
        signatures: signatures,
        timestamp: timestamp,
    }
}

type simpleNotstreamsTriggerCapability struct {
    workflows.CapabilityDefinition[Feed]
    fullReport workflows.CapabilityDefinition[string]
    price FeedPriceCapability
    reportContext workflows.CapabilityDefinition[string]
    signatures workflows.CapabilityDefinition[[]string]
    timestamp workflows.CapabilityDefinition[int]
}
func (c *simpleNotstreamsTriggerCapability) FullReport() workflows.CapabilityDefinition[string] {
    return c.fullReport
}
func (c *simpleNotstreamsTriggerCapability) Price() FeedPriceCapability {
    return c.price
}
func (c *simpleNotstreamsTriggerCapability) ReportContext() workflows.CapabilityDefinition[string] {
    return c.reportContext
}
func (c *simpleNotstreamsTriggerCapability) Signatures() workflows.CapabilityDefinition[[]string] {
    return c.signatures
}
func (c *simpleNotstreamsTriggerCapability) Timestamp() workflows.CapabilityDefinition[int] {
    return c.timestamp
}

func (c *simpleNotstreamsTriggerCapability) private() {}


type FeedPriceCapability interface {
    workflows.CapabilityDefinition[FeedPrice]
    PriceA() workflows.CapabilityDefinition[string]
    PriceB() workflows.CapabilityDefinition[string]
    private()
}

type feedPriceCapability struct {
    workflows.CapabilityDefinition[FeedPrice]
}


func (*feedPriceCapability) private() {}
func (c *feedPriceCapability) PriceA() workflows.CapabilityDefinition[string] {
    return workflows.AccessField[FeedPrice, string](c.CapabilityDefinition, "PriceA")
}
func (c *feedPriceCapability) PriceB() workflows.CapabilityDefinition[string] {
    return workflows.AccessField[FeedPrice, string](c.CapabilityDefinition, "PriceB")
}

func NewFeedPriceCapabilityFromComponents(
                                                                        priceA workflows.CapabilityDefinition[string],
                                                                        priceB workflows.CapabilityDefinition[string],) FeedPriceCapability {
    return &simpleFeedPriceCapability{
        CapabilityDefinition: workflows.ComponentCapabilityDefinition[FeedPrice]{
        "priceA": priceA.Ref(),
        "priceB": priceB.Ref(),
        },
        priceA: priceA,
        priceB: priceB,
    }
}

type simpleFeedPriceCapability struct {
    workflows.CapabilityDefinition[FeedPrice]
    priceA workflows.CapabilityDefinition[string]
    priceB workflows.CapabilityDefinition[string]
}
func (c *simpleFeedPriceCapability) PriceA() workflows.CapabilityDefinition[string] {
    return c.priceA
}
func (c *simpleFeedPriceCapability) PriceB() workflows.CapabilityDefinition[string] {
    return c.priceB
}

func (c *simpleFeedPriceCapability) private() {}

