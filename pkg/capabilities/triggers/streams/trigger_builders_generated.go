// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package streams

import (
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows"
)

func (cfg TriggerConfig) New(w *workflows.WorkflowSpecFactory) FeedCap {
	ref := "trigger"
	def := workflows.StepDefinition{
		ID: "streams-trigger@1.0.0", Ref: ref,
		Inputs: workflows.StepInputs{},
		Config: map[string]any{
			"feedIds":        cfg.FeedIds,
			"maxFrequencyMs": cfg.MaxFrequencyMs,
		},
		CapabilityType: capabilities.CapabilityTypeTrigger,
	}

	step := workflows.Step[Feed]{Definition: def}
	return FeedCapFromStep(w, step)
}

type FeedCap interface {
	workflows.CapDefinition[Feed]
	Metadata() SignersMetadataCap
	Payload() workflows.CapDefinition[[]FeedReport]
	Timestamp() workflows.CapDefinition[int64]
	private()
}

// FeedCapFromStep should only be called from generated code to assure type safety
func FeedCapFromStep(w *workflows.WorkflowSpecFactory, step workflows.Step[Feed]) FeedCap {
	raw := step.AddTo(w)
	return &feed{CapDefinition: raw}
}

type feed struct {
	workflows.CapDefinition[Feed]
}

func (*feed) private() {}
func (c *feed) Metadata() SignersMetadataCap {
	return &signersMetadata{CapDefinition: workflows.AccessField[Feed, SignersMetadata](c.CapDefinition, "Metadata")}
}
func (c *feed) Payload() workflows.CapDefinition[[]FeedReport] {
	return workflows.AccessField[Feed, []FeedReport](c.CapDefinition, "Payload")
}
func (c *feed) Timestamp() workflows.CapDefinition[int64] {
	return workflows.AccessField[Feed, int64](c.CapDefinition, "Timestamp")
}

func NewFeedFromFields(
	metadata SignersMetadataCap,
	payload workflows.CapDefinition[[]FeedReport],
	timestamp workflows.CapDefinition[int64]) FeedCap {
	return &simpleFeed{
		CapDefinition: workflows.ComponentCapDefinition[Feed]{
			"Metadata":  metadata.Ref(),
			"Payload":   payload.Ref(),
			"Timestamp": timestamp.Ref(),
		},
		metadata:  metadata,
		payload:   payload,
		timestamp: timestamp,
	}
}

type simpleFeed struct {
	workflows.CapDefinition[Feed]
	metadata  SignersMetadataCap
	payload   workflows.CapDefinition[[]FeedReport]
	timestamp workflows.CapDefinition[int64]
}

func (c *simpleFeed) Metadata() SignersMetadataCap {
	return c.metadata
}
func (c *simpleFeed) Payload() workflows.CapDefinition[[]FeedReport] {
	return c.payload
}
func (c *simpleFeed) Timestamp() workflows.CapDefinition[int64] {
	return c.timestamp
}

func (c *simpleFeed) private() {}

type FeedIdCap workflows.CapDefinition[FeedId]

type FeedReportCap interface {
	workflows.CapDefinition[FeedReport]
	BenchmarkPrice() workflows.CapDefinition[[]uint8]
	FeedID() FeedIdCap
	FullReport() workflows.CapDefinition[[]uint8]
	ObservationTimestamp() workflows.CapDefinition[int64]
	ReportContext() workflows.CapDefinition[[]uint8]
	Signatures() workflows.CapDefinition[[][]uint8]
	private()
}

// FeedReportCapFromStep should only be called from generated code to assure type safety
func FeedReportCapFromStep(w *workflows.WorkflowSpecFactory, step workflows.Step[FeedReport]) FeedReportCap {
	raw := step.AddTo(w)
	return &feedReport{CapDefinition: raw}
}

type feedReport struct {
	workflows.CapDefinition[FeedReport]
}

func (*feedReport) private() {}
func (c *feedReport) BenchmarkPrice() workflows.CapDefinition[[]uint8] {
	return workflows.AccessField[FeedReport, []uint8](c.CapDefinition, "BenchmarkPrice")
}
func (c *feedReport) FeedID() FeedIdCap {
	return FeedIdCap(workflows.AccessField[FeedReport, FeedId](c.CapDefinition, "FeedID"))
}
func (c *feedReport) FullReport() workflows.CapDefinition[[]uint8] {
	return workflows.AccessField[FeedReport, []uint8](c.CapDefinition, "FullReport")
}
func (c *feedReport) ObservationTimestamp() workflows.CapDefinition[int64] {
	return workflows.AccessField[FeedReport, int64](c.CapDefinition, "ObservationTimestamp")
}
func (c *feedReport) ReportContext() workflows.CapDefinition[[]uint8] {
	return workflows.AccessField[FeedReport, []uint8](c.CapDefinition, "ReportContext")
}
func (c *feedReport) Signatures() workflows.CapDefinition[[][]uint8] {
	return workflows.AccessField[FeedReport, [][]uint8](c.CapDefinition, "Signatures")
}

func NewFeedReportFromFields(
	benchmarkPrice workflows.CapDefinition[[]uint8],
	feedID FeedIdCap,
	fullReport workflows.CapDefinition[[]uint8],
	observationTimestamp workflows.CapDefinition[int64],
	reportContext workflows.CapDefinition[[]uint8],
	signatures workflows.CapDefinition[[][]uint8]) FeedReportCap {
	return &simpleFeedReport{
		CapDefinition: workflows.ComponentCapDefinition[FeedReport]{
			"BenchmarkPrice":       benchmarkPrice.Ref(),
			"FeedID":               feedID.Ref(),
			"FullReport":           fullReport.Ref(),
			"ObservationTimestamp": observationTimestamp.Ref(),
			"ReportContext":        reportContext.Ref(),
			"Signatures":           signatures.Ref(),
		},
		benchmarkPrice:       benchmarkPrice,
		feedID:               feedID,
		fullReport:           fullReport,
		observationTimestamp: observationTimestamp,
		reportContext:        reportContext,
		signatures:           signatures,
	}
}

type simpleFeedReport struct {
	workflows.CapDefinition[FeedReport]
	benchmarkPrice       workflows.CapDefinition[[]uint8]
	feedID               FeedIdCap
	fullReport           workflows.CapDefinition[[]uint8]
	observationTimestamp workflows.CapDefinition[int64]
	reportContext        workflows.CapDefinition[[]uint8]
	signatures           workflows.CapDefinition[[][]uint8]
}

func (c *simpleFeedReport) BenchmarkPrice() workflows.CapDefinition[[]uint8] {
	return c.benchmarkPrice
}
func (c *simpleFeedReport) FeedID() FeedIdCap {
	return c.feedID
}
func (c *simpleFeedReport) FullReport() workflows.CapDefinition[[]uint8] {
	return c.fullReport
}
func (c *simpleFeedReport) ObservationTimestamp() workflows.CapDefinition[int64] {
	return c.observationTimestamp
}
func (c *simpleFeedReport) ReportContext() workflows.CapDefinition[[]uint8] {
	return c.reportContext
}
func (c *simpleFeedReport) Signatures() workflows.CapDefinition[[][]uint8] {
	return c.signatures
}

func (c *simpleFeedReport) private() {}

type SignersMetadataCap interface {
	workflows.CapDefinition[SignersMetadata]
	MinRequiredSignatures() workflows.CapDefinition[int64]
	Signers() workflows.CapDefinition[[]string]
	private()
}

// SignersMetadataCapFromStep should only be called from generated code to assure type safety
func SignersMetadataCapFromStep(w *workflows.WorkflowSpecFactory, step workflows.Step[SignersMetadata]) SignersMetadataCap {
	raw := step.AddTo(w)
	return &signersMetadata{CapDefinition: raw}
}

type signersMetadata struct {
	workflows.CapDefinition[SignersMetadata]
}

func (*signersMetadata) private() {}
func (c *signersMetadata) MinRequiredSignatures() workflows.CapDefinition[int64] {
	return workflows.AccessField[SignersMetadata, int64](c.CapDefinition, "MinRequiredSignatures")
}
func (c *signersMetadata) Signers() workflows.CapDefinition[[]string] {
	return workflows.AccessField[SignersMetadata, []string](c.CapDefinition, "Signers")
}

func NewSignersMetadataFromFields(
	minRequiredSignatures workflows.CapDefinition[int64],
	signers workflows.CapDefinition[[]string]) SignersMetadataCap {
	return &simpleSignersMetadata{
		CapDefinition: workflows.ComponentCapDefinition[SignersMetadata]{
			"MinRequiredSignatures": minRequiredSignatures.Ref(),
			"Signers":               signers.Ref(),
		},
		minRequiredSignatures: minRequiredSignatures,
		signers:               signers,
	}
}

type simpleSignersMetadata struct {
	workflows.CapDefinition[SignersMetadata]
	minRequiredSignatures workflows.CapDefinition[int64]
	signers               workflows.CapDefinition[[]string]
}

func (c *simpleSignersMetadata) MinRequiredSignatures() workflows.CapDefinition[int64] {
	return c.minRequiredSignatures
}
func (c *simpleSignersMetadata) Signers() workflows.CapDefinition[[]string] {
	return c.signers
}

func (c *simpleSignersMetadata) private() {}
