// Code generated by pkg/capabilities/cli, DO NOT EDIT.

package streams

import (
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/workflows"
)

func NewStreamsTriggerCapability(w *workflows.Workflow, ref string, cfg StreamsTriggerConfig)StreamsTriggerCapability {
    def := workflows.StepDefinition{
       ID: ref,
       Ref: ref,
       Inputs: workflows.StepInputs{
           Mapping: map[string]any{
           },
       },
       Config: map[string]any{
           "FeedIds": cfg.FeedIds,
           "MaxFrequencyMs": cfg.MaxFrequencyMs,
       },
       CapabilityType: capabilities.CapabilityTypeTrigger,
   }
    step := workflows.Step[Feed]{Definition: def}
     raw := workflows.AddStep(w, step)
    return &streamsTriggerCapability{CapabilityDefinition: raw}
}


type StreamsTriggerCapability interface {
    workflows.CapabilityDefinition[Feed]
    BenchmarkPrice() workflows.CapabilityDefinition[string]
    FeedId() FeedIdCapability
    FullReport() workflows.CapabilityDefinition[string]
    ObservationTimestamp() workflows.CapabilityDefinition[int]
    ReportContext() workflows.CapabilityDefinition[string]
    Signatures() workflows.CapabilityDefinition[[]string]
    private()
}

type streamsTriggerCapability struct {
    workflows.CapabilityDefinition[Feed]
}


func (*streamsTriggerCapability) private() {}
func (c *streamsTriggerCapability) BenchmarkPrice() workflows.CapabilityDefinition[string] {
    return workflows.AccessField[Feed, string](c.CapabilityDefinition, "BenchmarkPrice")
}
func (c *streamsTriggerCapability) FeedId() FeedIdCapability {
     return FeedIdCapability(workflows.AccessField[Feed, FeedId](c.CapabilityDefinition, "FeedId"))
}
func (c *streamsTriggerCapability) FullReport() workflows.CapabilityDefinition[string] {
    return workflows.AccessField[Feed, string](c.CapabilityDefinition, "FullReport")
}
func (c *streamsTriggerCapability) ObservationTimestamp() workflows.CapabilityDefinition[int] {
    return workflows.AccessField[Feed, int](c.CapabilityDefinition, "ObservationTimestamp")
}
func (c *streamsTriggerCapability) ReportContext() workflows.CapabilityDefinition[string] {
    return workflows.AccessField[Feed, string](c.CapabilityDefinition, "ReportContext")
}
func (c *streamsTriggerCapability) Signatures() workflows.CapabilityDefinition[[]string] {
    return workflows.AccessField[Feed, []string](c.CapabilityDefinition, "Signatures")
}

func NewStreamsTriggerCapabilityFromComponents(
                                                                        benchmarkPrice workflows.CapabilityDefinition[string],
                                                                        feedId FeedIdCapability,
                                                                        fullReport workflows.CapabilityDefinition[string],
                                                                        observationTimestamp workflows.CapabilityDefinition[int],
                                                                        reportContext workflows.CapabilityDefinition[string],
                                                                        signatures workflows.CapabilityDefinition[[]string],) StreamsTriggerCapability {
    return &simpleStreamsTriggerCapability{
        CapabilityDefinition: workflows.ComponentCapabilityDefinition[Feed]{
        "benchmarkPrice": benchmarkPrice.Ref(),
        "feedId": feedId.Ref(),
        "fullReport": fullReport.Ref(),
        "observationTimestamp": observationTimestamp.Ref(),
        "reportContext": reportContext.Ref(),
        "signatures": signatures.Ref(),
        },
        benchmarkPrice: benchmarkPrice,
        feedId: feedId,
        fullReport: fullReport,
        observationTimestamp: observationTimestamp,
        reportContext: reportContext,
        signatures: signatures,
    }
}

type simpleStreamsTriggerCapability struct {
    workflows.CapabilityDefinition[Feed]
    benchmarkPrice workflows.CapabilityDefinition[string]
    feedId FeedIdCapability
    fullReport workflows.CapabilityDefinition[string]
    observationTimestamp workflows.CapabilityDefinition[int]
    reportContext workflows.CapabilityDefinition[string]
    signatures workflows.CapabilityDefinition[[]string]
}
func (c *simpleStreamsTriggerCapability) BenchmarkPrice() workflows.CapabilityDefinition[string] {
    return c.benchmarkPrice
}
func (c *simpleStreamsTriggerCapability) FeedId() FeedIdCapability {
    return c.feedId
}
func (c *simpleStreamsTriggerCapability) FullReport() workflows.CapabilityDefinition[string] {
    return c.fullReport
}
func (c *simpleStreamsTriggerCapability) ObservationTimestamp() workflows.CapabilityDefinition[int] {
    return c.observationTimestamp
}
func (c *simpleStreamsTriggerCapability) ReportContext() workflows.CapabilityDefinition[string] {
    return c.reportContext
}
func (c *simpleStreamsTriggerCapability) Signatures() workflows.CapabilityDefinition[[]string] {
    return c.signatures
}

func (c *simpleStreamsTriggerCapability) private() {}


type FeedIdCapability workflows.CapabilityDefinition[FeedId]

