// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	datastreams "github.com/smartcontractkit/chainlink-common/pkg/capabilities/datastreams"
	mock "github.com/stretchr/testify/mock"

	values "github.com/smartcontractkit/chainlink-common/pkg/values"
)

// ReportCodec is an autogenerated mock type for the ReportCodec type
type ReportCodec struct {
	mock.Mock
}

// UnwrapValid provides a mock function with given fields: wrapped, allowedSigners, minRequiredSignatures
func (_m *ReportCodec) UnwrapValid(wrapped values.Value, allowedSigners [][]byte, minRequiredSignatures int) ([]datastreams.FeedReport, error) {
	ret := _m.Called(wrapped, allowedSigners, minRequiredSignatures)

	if len(ret) == 0 {
		panic("no return value specified for UnwrapValid")
	}

	var r0 []datastreams.FeedReport
	var r1 error
	if rf, ok := ret.Get(0).(func(values.Value, [][]byte, int) ([]datastreams.FeedReport, error)); ok {
		return rf(wrapped, allowedSigners, minRequiredSignatures)
	}
	if rf, ok := ret.Get(0).(func(values.Value, [][]byte, int) []datastreams.FeedReport); ok {
		r0 = rf(wrapped, allowedSigners, minRequiredSignatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastreams.FeedReport)
		}
	}

	if rf, ok := ret.Get(1).(func(values.Value, [][]byte, int) error); ok {
		r1 = rf(wrapped, allowedSigners, minRequiredSignatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wrap provides a mock function with given fields: reports
func (_m *ReportCodec) Wrap(reports []datastreams.FeedReport) (values.Value, error) {
	ret := _m.Called(reports)

	if len(ret) == 0 {
		panic("no return value specified for Wrap")
	}

	var r0 values.Value
	var r1 error
	if rf, ok := ret.Get(0).(func([]datastreams.FeedReport) (values.Value, error)); ok {
		return rf(reports)
	}
	if rf, ok := ret.Get(0).(func([]datastreams.FeedReport) values.Value); ok {
		r0 = rf(reports)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(values.Value)
		}
	}

	if rf, ok := ret.Get(1).(func([]datastreams.FeedReport) error); ok {
		r1 = rf(reports)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReportCodec creates a new instance of ReportCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportCodec {
	mock := &ReportCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
