// Code generated by pkg/capabilities/cli, DO NOT EDIT.

package {{.Package}}

// HERE

import (
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/workflows"

    {{- range .ExtraImports }}
    {{.}}
    {{- end }}
)

func New{{.BaseName}}Capability(w *workflows.Workflow, ref string,{{- if .Input }} input {{InputAfterCapability}}, {{- end }} cfg {{.Config.Name}}) ({{- if ne .CapabilityType.String "target"}}{{.BaseName}}Capability, {{- end }}error) {
    def := workflows.StepDefinition{
       ID: ref,
       Ref: ref,
       Inputs: workflows.StepInputs{
           Mapping: map[string]any{
{{- if .Input }}
   {{- range $fieldName, $type := .Input.Outputs }}
               "{{$fieldName}}": input.{{$fieldName}},
   {{- end }}
{{- end }}
           },
       },
       Config: map[string]any{
{{- range $fieldName, $type := .Config.Outputs }}
           "{{$fieldName}}": cfg.{{$fieldName}},
{{- end }}
       },
       CapabilityType: capabilities.CapabilityType{{.CapabilityType.String|UpperFirst}},
   }
    step := workflows.Step[{{- if eq .CapabilityType.String "target"}} struct{} {{- else }}{{.RootType.Name}} {{- end}}]{Definition: def}
    {{if eq .CapabilityType.String "target"}} _ {{- else }} raw {{- end }}, err := workflows.AddStep(w, step)
    return {{- if ne .CapabilityType.String "target"}} &{{.BaseName|LowerFirst}}Capability{CapabilityDefinition: raw}, {{- end }} err
}

{{ range $key, $value := .Types }}
type {{$key|ConvertToBaseIfFirstOutput}}Capability interface {
    workflows.CapabilityDefinition[{{ $key }}]
    {{- range $fieldName, $type := .Outputs }}
        {{- if $type.IsPrimitive }}
    {{$fieldName}}() workflows.CapabilityDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}]
        {{- else }}
    {{$fieldName}}() {{Repeat "[]" $type.NumSlice}}{{ $type.Type }}Capability
        {{- end }}
    {{- end }}
    private()
}

type {{$key|ConvertToBaseIfFirstOutput|LowerFirst}}Capability struct {
    workflows.CapabilityDefinition[{{ $key }}]
}


func (*{{$key|ConvertToBaseIfFirstOutput|LowerFirst}}Capability) private() {}

    {{- range $fieldName, $type := .Outputs }}
        {{- if $type.IsPrimitive }}
func (c *{{$key|ConvertToBaseIfFirstOutput|LowerFirst}}Capability) {{$fieldName}}() workflows.CapabilityDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}] {
    return workflows.AccessField[{{$value.Name}}, {{Repeat "[]" $type.NumSlice}}{{$type.Type}}](c.CapabilityDefinition, "{{$fieldName}}")
}
        {{- else }}
func (c *{{$key|ConvertToBaseIfFirstOutput|LowerFirst}}Capability) {{$fieldName}}() {{ $type.Type }}Capability {
     return &{{ $type.Type | LowerFirst }}Capability{ CapabilityDefinition: workflows.AccessField[{{$value.Name}}, {{$type.Type}}](c.CapabilityDefinition, "{{$fieldName}}")}
}
        {{- end }}
    {{- end }}

type simple{{$key|ConvertToBaseIfFirstOutput}}Capability struct {
    {{- range $fieldName, $type := .Outputs }}
        {{- if $type.IsPrimitive }}
    {{$fieldName|LowerFirst}} workflows.CapabilityDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}]
        {{- else }}
    {{$fieldName|LowerFirst}} {{Repeat "[]" $type.NumSlice}}{{ $type.Type }}Capability
        {{- end }}
    {{- end }}
}

 {{- range $fieldName, $type := .Outputs }}
        {{- if $type.IsPrimitive }}
func (c *simple{{$key|ConvertToBaseIfFirstOutput}}Capability) {{$fieldName}}() workflows.CapabilityDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}] {
        {{- else }}
func (c *simple{{$key|ConvertToBaseIfFirstOutput}}Capability) {{$fieldName}}() {{ $type.Type }}Capability {
        {{- end }}
    return c.{{$fieldName|LowerFirst}}
}
    {{- end }}

func (c *simple{{$key|ConvertToBaseIfFirstOutput}}Capability) private() {}


{{ end }}

{{- if .Input }}
type {{InputAfterCapability}} struct {
{{- range $fieldName, $type := .Input.Outputs }}
    {{$fieldName}} workflows.CapabilityDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}]
{{- end }}
}
{{- end }}