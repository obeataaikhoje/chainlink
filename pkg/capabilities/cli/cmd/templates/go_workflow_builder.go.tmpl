// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package {{.Package}}

import (
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/workflows"

    {{- range .ExtraImports }}
    {{.}}
    {{- end }}
)

func (cfg {{.Config.Name}}) New(w *workflows.WorkflowSpecFactory, {{- if not .ID }}id string,{{- end }} {{- if and (ne .CapabilityType.String "target") (ne .CapabilityType.String "trigger")}}ref string,{{- end }}{{- if .Input }} input {{InputAfterCapability}}{{- end }}) {{- if ne .CapabilityType.String "target"}}{{- if eq .RootNumSlice 0}}{{.BaseName}}Cap{{- else }}workflows.CapDefinition[{{Repeat "[]" .RootNumSlice}}{{.RootType.Name}}]{{- end }}{{- end }} {
    {{ if eq .CapabilityType.String "trigger" }} ref := "trigger" {{- end }}
    def := workflows.StepDefinition{
       ID: {{- if .ID }} "{{.ID}}" {{- else }} id {{- end }},
       {{- if ne .CapabilityType.String "target"}}Ref: ref, {{- end }}
       Inputs: workflows.StepInputs{
{{- if .Input }}
           Mapping: map[string]any{
   {{- range $fieldName, $type := .Input.Outputs }}
               "{{$type.ConfigName}}": input.{{$fieldName}}.Ref(),
   {{- end }}
           },
{{- end }}
       },
       Config: map[string]any{
{{- range $fieldName, $type := .Config.Outputs }}
           "{{$type.ConfigName}}": cfg.{{$fieldName}},
{{- end }}
       },
       CapabilityType: capabilities.CapabilityType{{.CapabilityType.String|Capitalize}},
   }
    step := workflows.Step[{{- if eq .CapabilityType.String "target"}}struct{}{{- else }}{{Repeat "[]" .RootNumSlice}}{{.RootType.Name}} {{- end}}]{Definition: def}
    {{if ne .CapabilityType.String "target"}} raw := {{- end }} step.AddTo(w)
    {{if ne .CapabilityType.String "target"}} return {{- if eq 0 .RootNumSlice }} &{{.BaseName|LowerFirst}}{CapDefinition: raw} {{- else }} raw {{- end }} {{- end }}
}

{{ range $key, $value := .Types }}
{{- if .Outputs }}
type {{$key|ConvertToBaseIfFirstOutput}}Cap interface {
    workflows.CapDefinition[{{ $key }}]
    {{- range $fieldName, $type := .Outputs }}
        {{- if $type.IsPrimitive }}
    {{$fieldName}}() workflows.CapDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}]
        {{- else }}
    {{$fieldName}}() {{Repeat "[]" $type.NumSlice}}{{ $type.Type }}Cap
        {{- end }}
    {{- end }}
    private()
}

type {{$key|ConvertToBaseIfFirstOutput|LowerFirst}} struct {
    workflows.CapDefinition[{{ $key }}]
}

func (*{{$key|ConvertToBaseIfFirstOutput|LowerFirst}}) private() {}

    {{- range $fieldName, $type := .Outputs }}
        {{- if or $type.IsPrimitive }}
func (c *{{$key|ConvertToBaseIfFirstOutput|LowerFirst}}) {{$fieldName}}() workflows.CapDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}] {
    return workflows.AccessField[{{$value.Name}}, {{Repeat "[]" $type.NumSlice}}{{$type.Type}}](c.CapDefinition, "{{$fieldName}}")
}
        {{- else }}
func (c *{{$key|ConvertToBaseIfFirstOutput|LowerFirst}}) {{$fieldName}}() {{ $type.Type }}Cap {
           {{- if $type.Type|HasOutputs }}
     return &{{ $type.Type | LowerFirst }}{ CapDefinition: workflows.AccessField[{{$value.Name}}, {{$type.Type}}](c.CapDefinition, "{{$fieldName}}")}
           {{- else }}
     return {{ $type.Type }}Cap(workflows.AccessField[{{$value.Name}}, {{$type.Type}}](c.CapDefinition, "{{$fieldName}}"))
           {{- end }}
}
        {{- end }}
    {{- end }}

func New{{$key|ConvertToBaseIfFirstOutput}}FromFields({{- range $fieldName, $type := .Outputs }}
                                                                            {{- if $type.IsPrimitive }}
                                                                        {{$fieldName|LowerFirst}} workflows.CapDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}],
                                                                            {{- else }}
                                                                        {{$fieldName|LowerFirst}} {{Repeat "[]" $type.NumSlice}}{{ $type.Type }}Cap,
                                                                            {{- end }}                                                                        {{- end }}) {{$key|ConvertToBaseIfFirstOutput}}Cap {
    return &simple{{$key|ConvertToBaseIfFirstOutput}}{
        CapDefinition: workflows.ComponentCapDefinition[{{$value.Name}}]{ {{- range $fieldName, $type := .Outputs }}
        "{{$fieldName|LowerFirst}}": {{$fieldName|LowerFirst}}.Ref(),
        {{- end }}
        },
        {{- range $fieldName, $type := .Outputs }}
        {{$fieldName|LowerFirst}}: {{$fieldName|LowerFirst}},
        {{- end }}
    }
}

type simple{{$key|ConvertToBaseIfFirstOutput}} struct {
    workflows.CapDefinition[{{ $key }}]
    {{- range $fieldName, $type := .Outputs }}
        {{- if $type.IsPrimitive }}
    {{$fieldName|LowerFirst}} workflows.CapDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}]
        {{- else }}
    {{$fieldName|LowerFirst}} {{Repeat "[]" $type.NumSlice}}{{ $type.Type }}Cap
        {{- end }}
    {{- end }}
}

 {{- range $fieldName, $type := .Outputs }}
        {{- if $type.IsPrimitive }}
func (c *simple{{$key|ConvertToBaseIfFirstOutput}}) {{$fieldName}}() workflows.CapDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}] {
        {{- else }}
func (c *simple{{$key|ConvertToBaseIfFirstOutput}}) {{$fieldName}}() {{ $type.Type }}Cap {
        {{- end }}
    return c.{{$fieldName|LowerFirst}}
}
    {{- end }}

func (c *simple{{$key|ConvertToBaseIfFirstOutput}}) private() {}
{{- else }}
type {{$key|ConvertToBaseIfFirstOutput}}Cap workflows.CapDefinition[{{ $key }}]
{{- end }}

{{ end }}

{{- if .Input }}
type {{InputAfterCapability}} struct {
{{- range $fieldName, $type := .Input.Outputs }}
    {{$fieldName}} workflows.CapDefinition[{{Repeat "[]" $type.NumSlice}}{{ $type.Type }}]
{{- end }}
}
{{- end }}