// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package arrayaction

import (
	"encoding/json"
	"fmt"
)

// Array Test Action
type Action struct {
	// Config corresponds to the JSON schema field "config".
	Config ActionConfig `json:"config" yaml:"config" mapstructure:"config"`

	// Inputs corresponds to the JSON schema field "inputs".
	Inputs *ActionInputs `json:"inputs,omitempty" yaml:"inputs,omitempty" mapstructure:"inputs,omitempty"`

	// Outputs corresponds to the JSON schema field "outputs".
	Outputs []ActionOutputsElem `json:"outputs,omitempty" yaml:"outputs,omitempty" mapstructure:"outputs,omitempty"`
}

type ActionConfig struct {
	// Details corresponds to the JSON schema field "details".
	Details ActionConfigDetails `json:"details" yaml:"details" mapstructure:"details"`
}

type ActionConfigDetails struct {
	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// The interval in seconds after which a new trigger event is generated.
	Number uint64 `json:"number" yaml:"number" mapstructure:"number"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionConfigDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in ActionConfigDetails: required")
	}
	if _, ok := raw["number"]; raw != nil && !ok {
		return fmt.Errorf("field number in ActionConfigDetails: required")
	}
	type Plain ActionConfigDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 1 > plain.Number {
		return fmt.Errorf("field %s: must be >= %v", "number", 1)
	}
	*j = ActionConfigDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["details"]; raw != nil && !ok {
		return fmt.Errorf("field details in ActionConfig: required")
	}
	type Plain ActionConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionConfig(plain)
	return nil
}

type ActionInputs struct {
	// Metadata corresponds to the JSON schema field "metadata".
	Metadata ActionInputsMetadata `json:"metadata" yaml:"metadata" mapstructure:"metadata"`
}

type ActionInputsMetadata struct {
	// InputThing corresponds to the JSON schema field "input_thing".
	InputThing bool `json:"input_thing" yaml:"input_thing" mapstructure:"input_thing"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionInputsMetadata) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["input_thing"]; raw != nil && !ok {
		return fmt.Errorf("field input_thing in ActionInputsMetadata: required")
	}
	type Plain ActionInputsMetadata
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionInputsMetadata(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionInputs) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["metadata"]; raw != nil && !ok {
		return fmt.Errorf("field metadata in ActionInputs: required")
	}
	type Plain ActionInputs
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionInputs(plain)
	return nil
}

type ActionOutputsElem struct {
	// Results corresponds to the JSON schema field "results".
	Results *ActionOutputsElemResults `json:"results,omitempty" yaml:"results,omitempty" mapstructure:"results,omitempty"`
}

type ActionOutputsElemResults struct {
	// AdaptedThing corresponds to the JSON schema field "adapted_thing".
	AdaptedThing string `json:"adapted_thing" yaml:"adapted_thing" mapstructure:"adapted_thing"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionOutputsElemResults) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["adapted_thing"]; raw != nil && !ok {
		return fmt.Errorf("field adapted_thing in ActionOutputsElemResults: required")
	}
	type Plain ActionOutputsElemResults
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActionOutputsElemResults(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Action) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["config"]; raw != nil && !ok {
		return fmt.Errorf("field config in Action: required")
	}
	type Plain Action
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Action(plain)
	return nil
}
