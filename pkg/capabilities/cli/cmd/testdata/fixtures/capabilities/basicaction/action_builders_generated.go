// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package basicaction

import (
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk"
)

func (cfg ActionConfig) New(w *sdk.WorkflowSpecFactory, ref string, input ActionInput) ActionOutputsCap {

	def := sdk.StepDefinition{
		ID: "basic-test-action@1.0.0", Ref: ref,
		Inputs: input.ToSteps(),
		Config: map[string]any{
			"camelCaseInSchemaForTesting":      cfg.CamelCaseInSchemaForTesting,
			"snake_case_in_schema_for_testing": cfg.SnakeCaseInSchemaForTesting,
		},
		CapabilityType: capabilities.CapabilityTypeAction,
	}

	step := sdk.Step[ActionOutputs]{Definition: def}
	return ActionOutputsCapFromStep(w, step)
}

type ActionOutputsCap interface {
	sdk.CapDefinition[ActionOutputs]
	AdaptedThing() sdk.CapDefinition[string]
	private()
}

// ActionOutputsCapFromStep should only be called from generated code to assure type safety
func ActionOutputsCapFromStep(w *sdk.WorkflowSpecFactory, step sdk.Step[ActionOutputs]) ActionOutputsCap {
	raw := step.AddTo(w)
	return &actionOutputs{CapDefinition: raw}
}

type actionOutputs struct {
	sdk.CapDefinition[ActionOutputs]
}

func (*actionOutputs) private() {}
func (c *actionOutputs) AdaptedThing() sdk.CapDefinition[string] {
	return sdk.AccessField[ActionOutputs, string](c.CapDefinition, "adapted_thing")
}

func NewActionOutputsFromFields(
	adaptedThing sdk.CapDefinition[string]) ActionOutputsCap {
	return &simpleActionOutputs{
		CapDefinition: sdk.ComponentCapDefinition[ActionOutputs]{
			"adapted_thing": adaptedThing.Ref(),
		},
		adaptedThing: adaptedThing,
	}
}

type simpleActionOutputs struct {
	sdk.CapDefinition[ActionOutputs]
	adaptedThing sdk.CapDefinition[string]
}

func (c *simpleActionOutputs) AdaptedThing() sdk.CapDefinition[string] {
	return c.adaptedThing
}

func (c *simpleActionOutputs) private() {}

type ActionInput struct {
	InputThing sdk.CapDefinition[bool]
}

func (input ActionInput) ToSteps() sdk.StepInputs {
	return sdk.StepInputs{
		Mapping: map[string]any{
			"input_thing": input.InputThing.Ref(),
		},
	}
}
