package binary_test

import (
    "errors"
    "reflect"
    "testing"
    rawbinary "encoding/binary"

    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"

    "github.com/smartcontractkit/chainlink-common/pkg/codec/encodings/binary"
    "github.com/smartcontractkit/chainlink-common/pkg/types"
)

var bi = binary.BigEndian()

{{ range . }}
func TestInt{{.}}(t *testing.T) {
    t.Parallel()
    t.Run("Encodes and decodes to the same value with correct encoding length", func(t *testing.T) {
        i := bi.Int{{.}}()
        value := int{{.}}(123)

        encoded, err := i.Encode(value, nil)
        require.NoError(t, err)

        {{ if eq . 8 }}
        expected := []byte{123}
        {{ else }}
        expected := rawbinary.BigEndian.AppendUint{{.}}(nil, 123)
        {{ end }}
        assert.Equal(t, expected, encoded)

        decoded, remaining, err := i.Decode(encoded)

        require.NoError(t, err)
        assert.Equal(t, 0, len(remaining))
        assert.Equal(t, value, decoded)
    })

    t.Run("Encodes appends to prefix", func(t *testing.T) {
        i := bi.Int{{.}}()
        value := int{{.}}(123)
        prefix := []byte{1, 2, 3}

        encoded, err := i.Encode(value, prefix)

        require.NoError(t, err)
        assert.Equal(t, {{div . 8}} + 3, len(encoded))
        expected, err := i.Encode(value, nil)
        require.NoError(t, err)
        assert.Equal(t, expected, encoded[3:])
    })

    t.Run("Decode leaves a suffix", func(t *testing.T) {
        i := bi.Int{{.}}()
        value := int{{.}}(123)
        suffix := []byte{1, 2, 3}

        encoded, err := i.Encode(value, nil)
        require.NoError(t, err)
        encoded = append(encoded, suffix...)

        decoded, remaining, err := i.Decode(encoded)
        require.NoError(t, err)
        assert.Equal(t, suffix, remaining)
        assert.Equal(t, value, decoded)
    })

    t.Run("Decode returns an error if there are not enough bytes", func(t *testing.T) {
        i := bi.Int{{.}}()
        bytes := make([]byte, {{div . 8}} - 1) // nolint
        _, _, err := i.Decode(bytes)
        require.True(t, errors.Is(err, types.ErrInvalidEncoding))
    })

    t.Run("GetType returns correct type", func(t *testing.T) {
        i := bi.Int{{.}}()
        assert.Equal(t, i.GetType(), reflect.TypeOf(int{{.}}(0)))
    })

    t.Run("Size returns correct size", func(t *testing.T) {
        size, err := bi.Int{{.}}().Size(100)
        require.NoError(t, err)
        assert.Equal(t, size, {{div . 8}})
    })

    t.Run("FixedSize returns correct size", func(t *testing.T) {
        size, err := bi.Int{{.}}().FixedSize()
        require.NoError(t, err)
        assert.Equal(t, size, {{div . 8}})
    })

    t.Run("returns an error if the input is not an uint{{.}}", func(t *testing.T) {
        i := bi.Int{{.}}()

        _, err := i.Encode("foo", nil)
        require.True(t, errors.Is(err, types.ErrInvalidType))
    })
}

func TestUint{{.}}(t *testing.T) {
    t.Parallel()
    t.Run("Encodes and decodes to the same value with correct encoding length", func(t *testing.T) {
        i := bi.Uint{{.}}()
        value := uint{{.}}(123)

        encoded, err := i.Encode(value, nil)
        require.NoError(t, err)

        {{ if eq . 8 }}
        expected := []byte{123}
        {{ else }}
        expected := rawbinary.BigEndian.AppendUint{{.}}(nil, 123)
        {{ end }}
        assert.Equal(t, expected, encoded)

        decoded, remaining, err := i.Decode(encoded)

        require.NoError(t, err)
        assert.Equal(t, 0, len(remaining))
        assert.Equal(t, value, decoded)
    })

    t.Run("Encodes appends to prefix", func(t *testing.T) {
        i := bi.Uint{{.}}()
        value := uint{{.}}(123)
        prefix := []byte{1, 2, 3}

        encoded, err := i.Encode(value, prefix)

        require.NoError(t, err)
        assert.Equal(t, {{div . 8}} + 3, len(encoded))
        expected, err := i.Encode(value, nil)
        require.NoError(t, err)
        assert.Equal(t, expected, encoded[3:])
    })

    t.Run("Decode leaves a suffix", func(t *testing.T) {
        i := bi.Uint{{.}}()
        value := uint{{.}}(123)
        suffix := []byte{1, 2, 3}

        encoded, err := i.Encode(value, nil)
        require.NoError(t, err)
        encoded = append(encoded, suffix...)

        decoded, remaining, err := i.Decode(encoded)
        require.NoError(t, err)
        assert.Equal(t, suffix, remaining)
        assert.Equal(t, value, decoded)
    })

    t.Run("Decode returns an error if there are not enough bytes", func(t *testing.T) {
        i := bi.Uint{{.}}()
        bytes := make([]byte, {{div . 8}} - 1) // nolint
        _, _, err := i.Decode(bytes)
        require.True(t, errors.Is(err, types.ErrInvalidEncoding))
    })

    t.Run("GetType returns correct type", func(t *testing.T) {
        i := bi.Uint{{.}}()
        assert.Equal(t, i.GetType(), reflect.TypeOf(uint{{.}}(0)))
    })

    t.Run("Size returns correct size", func(t *testing.T) {
        size, err := bi.Uint{{.}}().Size(100)
        require.NoError(t, err)
        assert.Equal(t, size, {{div . 8}})
    })

    t.Run("FixedSize returns correct size", func(t *testing.T) {
        size, err := bi.Uint{{.}}().FixedSize()
        require.NoError(t, err)
        assert.Equal(t, size, {{div . 8}})
    })

    t.Run("returns an error if the input is not an uint{{.}}", func(t *testing.T) {
        i := bi.Uint{{.}}()

        _, err := i.Encode("foo", nil)
        require.True(t, errors.Is(err, types.ErrInvalidType))
    })
}

{{ end }}

func TestBuilderInt(t *testing.T) {
    {{ range . -}}
    t.Run("Wraps encoding and decoding for {{.}} bytes", func(t *testing.T) {
        codec, err := bi.Int({{div . 8}})
        require.NoError(t, err)
        anyValue := 123

        encoded, err := codec.Encode(anyValue, nil)
        require.NoError(t, err)
        require.Equal(t, {{div . 8}}, len(encoded))

        decoded, remaining, err := codec.Decode(encoded)
        require.NoError(t, err)
        require.Empty(t, remaining)
        require.Equal(t, anyValue, decoded)
    })

    t.Run("Size returns correct size", func(t *testing.T) {
        codec, err := bi.Int({{div . 8}})
        require.NoError(t, err)
        size, err := codec.Size(100)
        require.NoError(t, err)
        assert.Equal(t, size, {{div . 8}})
    })

    t.Run("FixedSize returns correct size", func(t *testing.T) {
        codec, err := bi.Int({{div . 8}})
        require.NoError(t, err)
        size, err := codec.FixedSize()
        require.NoError(t, err)
        assert.Equal(t, size, {{div . 8}})
    })
    {{ end }}

    t.Run("Wraps encoding and decoding for other sized bytes", func(t *testing.T) {
        codec, err := bi.Int(10)
        require.NoError(t, err)
        anyValue := 123

        encoded, err := codec.Encode(anyValue, nil)
        require.NoError(t, err)
        require.Equal(t, 10, len(encoded))

        decoded, remaining, err := codec.Decode(encoded)
        require.NoError(t, err)
        require.Empty(t, remaining)
        require.Equal(t, anyValue, decoded)
    })

    t.Run("returns an error if the input is not an int", func(t *testing.T) {
        codec, err := bi.Int(4)
        require.NoError(t, err)

        _, err = codec.Encode("foo", nil)
        require.True(t, errors.Is(err, types.ErrInvalidType))
    })

    t.Run("GetType returns int", func(t *testing.T) {
        codec, err := bi.Int(4)
        require.NoError(t, err)

        assert.Equal(t, reflect.TypeOf(0), codec.GetType())
    })
}

func TestGetUintTypeCodecByByteSize(t *testing.T) {
    {{ range . -}}
    t.Run("Wraps encoding and decoding for {{.}} bytes", func(t *testing.T) {
        codec, err := bi.Uint({{div . 8}})
        require.NoError(t, err)
        anyValue := uint(123)

        encoded, err := codec.Encode(anyValue, nil)
        require.NoError(t, err)
        require.Equal(t, {{div . 8}}, len(encoded))

        decoded, remaining, err := codec.Decode(encoded)
        require.NoError(t, err)
        require.Empty(t, remaining)
        require.Equal(t, anyValue, decoded)
    })

    t.Run("Size returns correct size", func(t *testing.T) {
        codec, err := bi.Uint({{div . 8}})
        require.NoError(t, err)
        size, err := codec.Size(100)
        require.NoError(t, err)
        assert.Equal(t, size, {{div . 8}})
    })

    t.Run("FixedSize returns correct size", func(t *testing.T) {
        codec, err := bi.Uint({{div . 8}})
        require.NoError(t, err)
        size, err := codec.FixedSize()
        require.NoError(t, err)
        assert.Equal(t, size, {{div . 8}})
    })
    {{ end }}
    t.Run("Wraps encoding and decoding for other sized bytes", func(t *testing.T) {
        codec, err := bi.Uint(10)
        require.NoError(t, err)
        anyValue := uint(123)

        encoded, err := codec.Encode(anyValue, nil)
        require.NoError(t, err)
        require.Equal(t, 10, len(encoded))

        decoded, remaining, err := codec.Decode(encoded)
        require.NoError(t, err)
        require.Empty(t, remaining)
        require.Equal(t, anyValue, decoded)
    })

    t.Run("returns an error if the input is not an int", func(t *testing.T) {
        codec, err := bi.Uint(4)
        require.NoError(t, err)

        _, err = codec.Encode("foo", nil)
        require.True(t, errors.Is(err, types.ErrInvalidType))
    })

    t.Run("GetType returns uint", func(t *testing.T) {
        codec, err := bi.Uint(4)
        require.NoError(t, err)

        assert.Equal(t, reflect.TypeOf(uint(0)), codec.GetType())
    })
}