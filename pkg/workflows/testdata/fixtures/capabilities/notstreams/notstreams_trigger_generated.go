// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package notstreams

import (
	"encoding/json"
	"fmt"
)

type Feed struct {
	// ID corresponds to the JSON schema field "ID".
	ID string `json:"ID" yaml:"ID" mapstructure:"ID"`

	// Metadata corresponds to the JSON schema field "Metadata".
	Metadata SignerMetadata `json:"Metadata" yaml:"Metadata" mapstructure:"Metadata"`

	// Payload corresponds to the JSON schema field "Payload".
	Payload FeedReport `json:"Payload" yaml:"Payload" mapstructure:"Payload"`

	// Timestamp corresponds to the JSON schema field "Timestamp".
	Timestamp string `json:"Timestamp" yaml:"Timestamp" mapstructure:"Timestamp"`

	// TriggerType corresponds to the JSON schema field "TriggerType".
	TriggerType string `json:"TriggerType" yaml:"TriggerType" mapstructure:"TriggerType"`
}

type FeedReport struct {
	// BuyPrice corresponds to the JSON schema field "BuyPrice".
	BuyPrice string `json:"BuyPrice" yaml:"BuyPrice" mapstructure:"BuyPrice"`

	// FullReport corresponds to the JSON schema field "FullReport".
	FullReport string `json:"FullReport" yaml:"FullReport" mapstructure:"FullReport"`

	// ObservationTimestamp corresponds to the JSON schema field
	// "ObservationTimestamp".
	ObservationTimestamp int `json:"ObservationTimestamp" yaml:"ObservationTimestamp" mapstructure:"ObservationTimestamp"`

	// ReportContext corresponds to the JSON schema field "ReportContext".
	ReportContext string `json:"ReportContext" yaml:"ReportContext" mapstructure:"ReportContext"`

	// SellPrice corresponds to the JSON schema field "SellPrice".
	SellPrice string `json:"SellPrice" yaml:"SellPrice" mapstructure:"SellPrice"`

	// Signature corresponds to the JSON schema field "Signature".
	Signature string `json:"Signature" yaml:"Signature" mapstructure:"Signature"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FeedReport) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["BuyPrice"]; raw != nil && !ok {
		return fmt.Errorf("field BuyPrice in FeedReport: required")
	}
	if _, ok := raw["FullReport"]; raw != nil && !ok {
		return fmt.Errorf("field FullReport in FeedReport: required")
	}
	if _, ok := raw["ObservationTimestamp"]; raw != nil && !ok {
		return fmt.Errorf("field ObservationTimestamp in FeedReport: required")
	}
	if _, ok := raw["ReportContext"]; raw != nil && !ok {
		return fmt.Errorf("field ReportContext in FeedReport: required")
	}
	if _, ok := raw["SellPrice"]; raw != nil && !ok {
		return fmt.Errorf("field SellPrice in FeedReport: required")
	}
	if _, ok := raw["Signature"]; raw != nil && !ok {
		return fmt.Errorf("field Signature in FeedReport: required")
	}
	type Plain FeedReport
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = FeedReport(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Feed) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["ID"]; raw != nil && !ok {
		return fmt.Errorf("field ID in Feed: required")
	}
	if _, ok := raw["Metadata"]; raw != nil && !ok {
		return fmt.Errorf("field Metadata in Feed: required")
	}
	if _, ok := raw["Payload"]; raw != nil && !ok {
		return fmt.Errorf("field Payload in Feed: required")
	}
	if _, ok := raw["Timestamp"]; raw != nil && !ok {
		return fmt.Errorf("field Timestamp in Feed: required")
	}
	if _, ok := raw["TriggerType"]; raw != nil && !ok {
		return fmt.Errorf("field TriggerType in Feed: required")
	}
	type Plain Feed
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Feed(plain)
	return nil
}

type SignerMetadata struct {
	// Signer corresponds to the JSON schema field "Signer".
	Signer string `json:"Signer" yaml:"Signer" mapstructure:"Signer"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SignerMetadata) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["Signer"]; raw != nil && !ok {
		return fmt.Errorf("field Signer in SignerMetadata: required")
	}
	type Plain SignerMetadata
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SignerMetadata(plain)
	return nil
}

// Streams Trigger
type Trigger struct {
	// Config corresponds to the JSON schema field "config".
	Config TriggerConfig `json:"config" yaml:"config" mapstructure:"config"`

	// Outputs corresponds to the JSON schema field "outputs".
	Outputs *Feed `json:"outputs,omitempty" yaml:"outputs,omitempty" mapstructure:"outputs,omitempty"`
}

type TriggerConfig struct {
	// The interval in seconds after which a new trigger event is generated.
	MaxFrequencyMs int `json:"maxFrequencyMs" yaml:"maxFrequencyMs" mapstructure:"maxFrequencyMs"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TriggerConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["maxFrequencyMs"]; raw != nil && !ok {
		return fmt.Errorf("field maxFrequencyMs in TriggerConfig: required")
	}
	type Plain TriggerConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 1 > plain.MaxFrequencyMs {
		return fmt.Errorf("field %s: must be >= %v", "maxFrequencyMs", 1)
	}
	*j = TriggerConfig(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Trigger) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["config"]; raw != nil && !ok {
		return fmt.Errorf("field config in Trigger: required")
	}
	type Plain Trigger
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Trigger(plain)
	return nil
}
