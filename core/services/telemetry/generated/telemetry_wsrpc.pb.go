// Code generated by protoc-gen-go-wsrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-wsrpc v0.0.1
// - protoc             v3.13.0

package generated

import (
	context "context"

	wsrpc "github.com/smartcontractkit/wsrpc"
)

// TelemetryClient is the client API for Telemetry service.
//
type TelemetryClient interface {
	Telemetry(ctx context.Context, in *TelemetryRequest) (*TelemetryResponse, error)
}

type telemetryClient struct {
	cc wsrpc.ClientInterface
}

func NewTelemetryClient(cc wsrpc.ClientInterface) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) Telemetry(ctx context.Context, in *TelemetryRequest) (*TelemetryResponse, error) {
	out := new(TelemetryResponse)
	err := c.cc.Invoke(ctx, "Telemetry", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServer is the server API for Telemetry service.
type TelemetryServer interface {
	Telemetry(context.Context, *TelemetryRequest) (*TelemetryResponse, error)
}

func RegisterTelemetryServer(s wsrpc.ServiceRegistrar, srv TelemetryServer) {
	s.RegisterService(&Telemetry_ServiceDesc, srv)
}

func _Telemetry_Telemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(TelemetryServer).Telemetry(ctx, in)
}

// Telemetry_ServiceDesc is the wsrpc.ServiceDesc for Telemetry service.
// It's only intended for direct use with wsrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telemetry_ServiceDesc = wsrpc.ServiceDesc{
	ServiceName: "generated.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []wsrpc.MethodDesc{
		{
			MethodName: "Telemetry",
			Handler:    _Telemetry_Telemetry_Handler,
		},
	},
}
